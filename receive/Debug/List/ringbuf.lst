###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     18/May/2011  21:40:31 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Documents and Settings\253642xvvn\桌面\IAR\2.4G_send\ #
#                    Demo\source\ringbuf.c                                    #
#    Command line =  "C:\Documents and Settings\253642xvvn\桌面\IAR\2.4G_send #
#                    \Demo\source\ringbuf.c" -lC "C:\Documents and            #
#                    Settings\253642xvvn\桌面\IAR\2.4G_send\Demo\project\EWAR #
#                    Mv5\Debug\List\" -lb "C:\Documents and                   #
#                    Settings\253642xvvn\桌面\IAR\2.4G_send\Demo\project\EWAR #
#                    Mv5\Debug\List\" -o "C:\Documents and                    #
#                    Settings\253642xvvn\桌面\IAR\2.4G_send\Demo\project\EWAR #
#                    Mv5\Debug\Obj\" --no_cse --no_unroll --no_inline         #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.4\arm\INC\DLib_Config_Full. #
#                    h" -I "C:\Documents and Settings\253642xvvn\桌面\IAR\2.4 #
#                    G_send\Demo\project\EWARMv5\..\..\include\" -I           #
#                    "C:\Documents and Settings\253642xvvn\桌面\IAR\2.4G_send #
#                    \Demo\project\EWARMv5\..\..\source\" -I "C:\Documents    #
#                    and Settings\253642xvvn\桌面\IAR\2.4G_send\Demo\project\ #
#                    EWARMv5\..\..\..\FWLib\library\inc\" -I "C:\Documents    #
#                    and Settings\253642xvvn\桌面\IAR\2.4G_send\Demo\project\ #
#                    EWARMv5\..\..\..\USBLib\library\inc\" -I "C:\Documents   #
#                    and Settings\253642xvvn\桌面\IAR\2.4G_send\Demo\project\ #
#                    EWARMv5\..\..\fatfs\" -I "D:\Program Files\IAR           #
#                    Systems\Embedded Workbench 5.4\arm\INC\" -Ol             #
#    List file    =  C:\Documents and Settings\253642xvvn\桌面\IAR\2.4G_send\ #
#                    Demo\project\EWARMv5\Debug\List\ringbuf.lst              #
#    Object file  =  C:\Documents and Settings\253642xvvn\桌面\IAR\2.4G_send\ #
#                    Demo\project\EWARMv5\Debug\Obj\ringbuf.o                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\253642xvvn\桌面\IAR\2.4G_send\Demo\source\ringbuf.c
      1          /*************************************************************************************************
      2          *                    (c) Copyright 1992-2009 Dareway Research Center
      3          *                                       All Rights Reserved
      4          *
      5          *File Name   : usb_ringbuf.c
      6          *Description : 对环形缓冲区的操作
      7          *Node(s)     : 
      8          *Log         : 2009.08.04    Ver1.0    陈仁海
      9          *              创建文件
     10          **************************************************************************************************/
     11          #include "ringbuf.h"
     12          #include <string.h>

   \                                 In section .text, align 2
   \   __??Code16?? __intrinsic __code __interwork void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   2000               MOVS     R0,R4
   \   00000006   ........           BL       __aeabi_memcpy
   \   0000000A   2000               MOVS     R0,R4
   \   0000000C   10BD               POP      {R4,PC}          ;; return
     13          

   \                                 In section .bss, align 4
     14          RING_BUFFER UserRingBuf;
   \                     UserRingBuf:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
     15          RING_BUFFER UART2RingBuf;
   \                     UART2RingBuf:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
     16          u8 UserBuf[RINGBUFFERSIZE];
   \                     UserBuf:
   \   00000000                      DS8 1000

   \                                 In section .bss, align 4
     17          u8 Uart2Buf[RINGBUFFERSIZE];
   \                     Uart2Buf:
   \   00000000                      DS8 1000
     18          
     19          /***************************************************************************************************
     20          *\Function      RingBufInit
     21          *\Description   对环形buffer进行初始化，包括分配大小、头指针位置、尾指针位置；
     22          *\Parameters     NULL
     23          *\Return         NULL
     24          *\Log            2011.3.29       CJ
     25          *                创建函数。
     26          ***************************************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     27          void RingBufInit()
     28          {
     29              UserRingBuf.RingBuf             = UserBuf;
   \                     RingBufInit:
   \   00000000   ....               LDR.N    R0,??DataTable10  ;; UserRingBuf
   \   00000002   0D49               LDR.N    R1,??RingBufInit_0  ;; UserBuf
   \   00000004   0160               STR      R1,[R0, #+0]
     30              UserRingBuf.RingBufSize         = RINGBUFFERSIZE;
   \   00000006   ....               LDR.N    R0,??DataTable10  ;; UserRingBuf
   \   00000008   4FF47A71           MOV      R1,#+1000
   \   0000000C   4160               STR      R1,[R0, #+4]
     31              UserRingBuf.RingBufStartPointer = 0;
   \   0000000E   ....               LDR.N    R0,??DataTable10  ;; UserRingBuf
   \   00000010   0021               MOVS     R1,#+0
   \   00000012   8160               STR      R1,[R0, #+8]
     32              UserRingBuf.RingBufEndPointer   = 0;
   \   00000014   ....               LDR.N    R0,??DataTable10  ;; UserRingBuf
   \   00000016   0021               MOVS     R1,#+0
   \   00000018   C160               STR      R1,[R0, #+12]
     33              
     34              UART2RingBuf.RingBuf             = Uart2Buf;
   \   0000001A   ....               LDR.N    R0,??DataTable11  ;; UART2RingBuf
   \   0000001C   0749               LDR.N    R1,??RingBufInit_0+0x4  ;; Uart2Buf
   \   0000001E   0160               STR      R1,[R0, #+0]
     35              UART2RingBuf.RingBufSize         = RINGBUFFERSIZE;
   \   00000020   ....               LDR.N    R0,??DataTable11  ;; UART2RingBuf
   \   00000022   4FF47A71           MOV      R1,#+1000
   \   00000026   4160               STR      R1,[R0, #+4]
     36              UART2RingBuf.RingBufStartPointer = 0;
   \   00000028   ....               LDR.N    R0,??DataTable11  ;; UART2RingBuf
   \   0000002A   0021               MOVS     R1,#+0
   \   0000002C   8160               STR      R1,[R0, #+8]
     37              UART2RingBuf.RingBufEndPointer   = 0;
   \   0000002E   ....               LDR.N    R0,??DataTable11  ;; UART2RingBuf
   \   00000030   0021               MOVS     R1,#+0
   \   00000032   C160               STR      R1,[R0, #+12]
     38              
     39          }
   \   00000034   7047               BX       LR               ;; return
   \   00000036   00BF               Nop      
   \                     ??RingBufInit_0:
   \   00000038   ........           DC32     UserBuf
   \   0000003C   ........           DC32     Uart2Buf
     40          
     41          
     42          /***************************************************************************************************
     43          *\Function      MemLineToCycle
     44          *\Description   内存区域src中len个字节环形拷贝到dst+start_pos起始的内存中。
     45          *\Parameter     dst             环形缓冲区
     46          *\Parameter     dst_size        环形缓冲区长度
     47          *\Parameter     start_offset    环形缓冲区写入起始偏移
     48          *\Parameter     src             数据来源内存区域
     49          *\Parameter     len             拷贝长度
     50          *\Return        u8*             环形写入结束时的指针（写指针）
     51          *\Log           2008.08.04    Ver 1.0    毕文
     52          *               创建函数。
     53          *\Log           2009.07.30    Ver 1.1    毕文
     54          ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     55          u8* MemLineToCycle(u8* dst, const u32 dst_size, u32 start_offset, u8* src, u32 len)
     56          {
   \                     MemLineToCycle:
   \   00000000   2DE9F843           PUSH     {R3-R9,LR}
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
   \   00000008   1600               MOVS     R6,R2
   \   0000000A   9946               MOV      R9,R3
   \   0000000C   089F               LDR      R7,[SP, #+32]
     57              u32 copy_len = 0x00;
   \   0000000E   5FF00008           MOVS     R8,#+0
     58          
     59              if ((dst_size == 0x00) || (start_offset >= dst_size))
   \   00000012   002D               CMP      R5,#+0
   \   00000014   01D0               BEQ.N    ??MemLineToCycle_0
   \   00000016   AE42               CMP      R6,R5
   \   00000018   01D3               BCC.N    ??MemLineToCycle_1
     60              {
     61                  return dst;
   \                     ??MemLineToCycle_0:
   \   0000001A   2000               MOVS     R0,R4
   \   0000001C   25E0               B.N      ??MemLineToCycle_2
     62              }
     63          
     64              copy_len = dst_size - start_offset;
   \                     ??MemLineToCycle_1:
   \   0000001E   B5EB0608           SUBS     R8,R5,R6
     65          
     66              if (len > copy_len)
   \   00000022   B845               CMP      R8,R7
   \   00000024   0AD2               BCS.N    ??MemLineToCycle_3
     67              {
     68                  memcpy(dst + start_offset, src, dst_size - start_offset);
   \   00000026   AA1B               SUBS     R2,R5,R6
   \   00000028   4946               MOV      R1,R9
   \   0000002A   3019               ADDS     R0,R6,R4
   \   0000002C   ........           BL       memcpy
     69                  src += copy_len;
   \   00000030   18EB0909           ADDS     R9,R8,R9
     70                  len -= copy_len;
   \   00000034   B7EB0807           SUBS     R7,R7,R8
     71                  start_offset = 0x00;
   \   00000038   0026               MOVS     R6,#+0
     72                  copy_len = dst_size;
   \   0000003A   A846               MOV      R8,R5
   \                     ??MemLineToCycle_3:
   \   0000003C   08E0               B.N      ??MemLineToCycle_4
     73              }
     74              while (len > copy_len)
     75              {
     76                  memcpy(dst, src, dst_size);
   \                     ??MemLineToCycle_5:
   \   0000003E   2A00               MOVS     R2,R5
   \   00000040   4946               MOV      R1,R9
   \   00000042   2000               MOVS     R0,R4
   \   00000044   ........           BL       memcpy
     77                  src += copy_len;
   \   00000048   18EB0909           ADDS     R9,R8,R9
     78                  len -= copy_len;
   \   0000004C   B7EB0807           SUBS     R7,R7,R8
     79              }
   \                     ??MemLineToCycle_4:
   \   00000050   B845               CMP      R8,R7
   \   00000052   F4D3               BCC.N    ??MemLineToCycle_5
     80              memcpy(dst + start_offset, src, len);
   \   00000054   3A00               MOVS     R2,R7
   \   00000056   4946               MOV      R1,R9
   \   00000058   3019               ADDS     R0,R6,R4
   \   0000005A   ........           BL       memcpy
     81          
     82              return dst + (start_offset + len) % dst_size;
   \   0000005E   B819               ADDS     R0,R7,R6
   \   00000060   B0FBF5F1           UDIV     R1,R0,R5
   \   00000064   01FB1500           MLS      R0,R1,R5,R0
   \   00000068   0019               ADDS     R0,R0,R4
   \                     ??MemLineToCycle_2:
   \   0000006A   BDE8F283           POP      {R1,R4-R9,PC}    ;; return
     83          }
     84          
     85          /***************************************************************************************************
     86          *\Function      MemCycleToLine
     87          *\Description   环形内存区域src中start_pos到end_pos的数据拷贝到dst起始的条形缓冲区中。
     88          *\Parameter     dst         条形缓冲区
     89          *\Parameter     src         环形缓冲区
     90          *\Parameter     start_pos   环形缓冲区起始偏移
     91          *\Parameter     end_pos     环形缓冲区终止偏移
     92          *\Parameter     src_size    环形缓冲区长度
     93          *\Return        u32         条形缓冲区写入的长度
     94          *\Log           2008.08.04    Ver 1.0    毕文
     95          *               创建函数。
     96          ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     97          u32 MemCycleToLine(u8* dst, u8* src, const u32 start_pos, const u32 end_pos, const u32 src_size)
     98          {
   \                     MemCycleToLine:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0E00               MOVS     R6,R1
   \   00000006   1000               MOVS     R0,R2
   \   00000008   1C00               MOVS     R4,R3
   \   0000000A   0699               LDR      R1,[SP, #+24]
     99              u32 len = 0x00;
   \   0000000C   0027               MOVS     R7,#+0
    100          
    101              if (end_pos > start_pos)
   \   0000000E   A042               CMP      R0,R4
   \   00000010   06D2               BCS.N    ??MemCycleToLine_0
    102              {
    103                  len = end_pos - start_pos;
   \   00000012   271A               SUBS     R7,R4,R0
    104                  memcpy(dst, src + start_pos, len);
   \   00000014   3A00               MOVS     R2,R7
   \   00000016   8119               ADDS     R1,R0,R6
   \   00000018   2800               MOVS     R0,R5
   \   0000001A   ........           BL       memcpy
   \   0000001E   0DE0               B.N      ??MemCycleToLine_1
    105              }
    106              else if (end_pos < start_pos)
   \                     ??MemCycleToLine_0:
   \   00000020   8442               CMP      R4,R0
   \   00000022   0BD2               BCS.N    ??MemCycleToLine_2
    107              {
    108                  len = src_size - start_pos;
   \   00000024   0F1A               SUBS     R7,R1,R0
    109                  memcpy(dst, src + start_pos, len);
   \   00000026   3A00               MOVS     R2,R7
   \   00000028   8119               ADDS     R1,R0,R6
   \   0000002A   2800               MOVS     R0,R5
   \   0000002C   ........           BL       memcpy
    110                  memcpy(dst + len, src, end_pos);
   \   00000030   2200               MOVS     R2,R4
   \   00000032   3100               MOVS     R1,R6
   \   00000034   7819               ADDS     R0,R7,R5
   \   00000036   ........           BL       memcpy
    111                  len += end_pos;
   \   0000003A   E719               ADDS     R7,R4,R7
    112              }
    113              return len;
   \                     ??MemCycleToLine_2:
   \                     ??MemCycleToLine_1:
   \   0000003C   3800               MOVS     R0,R7
   \   0000003E   F2BD               POP      {R1,R4-R7,PC}    ;; return
    114          }
    115          
    116          /***************************************************************************************************
    117          * FunctionName : Ring_ReadData
    118          * Description  : 从环形缓冲区中读取数据到一个线性的缓冲区中
    119          * Parameter(s) : 
    120          *                ringbuf : 环形缓冲区结构体，要读的数据就在这个环形缓冲区中 
    121          *                readbuf : 条形缓冲区，从环形缓冲区中读取的数据存储在这个缓冲区中
    122          *                readlen : 将要从环形缓冲区读取的数据长度
    123          *
    124          * Return       : u32 : 实际读回的数据长度
    125          * Note(s)      : 1)
    126          * Log          : 2009.07.23    Ver1.0    陈仁海
    127          *                创建函数
    128          ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    129          u32 Ring_ReadData(RING_BUFFER *ringbuf,u8 *readbuf,u32 readlen)
    130          {
   \                     Ring_ReadData:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0E00               MOVS     R6,R1
   \   00000006   1700               MOVS     R7,R2
    131              u32 len;    /*用于存储实际读回的数据长度*/
    132              u32 endpos; /*要读回的数据长度*/
    133              /*先判断要读的长度是否超过了缓冲区中有效数据长度*/
    134              if(readlen > GetUsedRingBufferSize(ringbuf))
   \   00000008   2800               MOVS     R0,R5
   \   0000000A   ........           BL       GetUsedRingBufferSize
   \   0000000E   B842               CMP      R0,R7
   \   00000010   04D2               BCS.N    ??Ring_ReadData_0
    135              {
    136                  len = GetUsedRingBufferSize(ringbuf);
   \   00000012   2800               MOVS     R0,R5
   \   00000014   ........           BL       GetUsedRingBufferSize
   \   00000018   0700               MOVS     R7,R0
   \   0000001A   FFE7               B.N      ??Ring_ReadData_1
    137              }   
    138              else
    139              {
    140                  len = readlen;
    141              }    
    142              /*再判断要读的数据是否超过了环形缓冲区的边界*/
    143              if((ringbuf->RingBufStartPointer + len) >= ringbuf->RingBufSize)
   \                     ??Ring_ReadData_0:
   \                     ??Ring_ReadData_1:
   \   0000001C   A868               LDR      R0,[R5, #+8]
   \   0000001E   3818               ADDS     R0,R7,R0
   \   00000020   6968               LDR      R1,[R5, #+4]
   \   00000022   8842               CMP      R0,R1
   \   00000024   04D3               BCC.N    ??Ring_ReadData_2
    144              {
    145                  endpos = ringbuf->RingBufStartPointer + len - ringbuf->RingBufSize;
   \   00000026   A868               LDR      R0,[R5, #+8]
   \   00000028   3818               ADDS     R0,R7,R0
   \   0000002A   6968               LDR      R1,[R5, #+4]
   \   0000002C   441A               SUBS     R4,R0,R1
   \   0000002E   01E0               B.N      ??Ring_ReadData_3
    146              }    
    147              else
    148              {
    149                  endpos = ringbuf->RingBufStartPointer + len;
   \                     ??Ring_ReadData_2:
   \   00000030   A868               LDR      R0,[R5, #+8]
   \   00000032   3C18               ADDS     R4,R7,R0
    150              }    
    151              MemCycleToLine(readbuf, ringbuf->RingBuf, ringbuf->RingBufStartPointer, \
    152                             endpos,ringbuf->RingBufSize);
   \                     ??Ring_ReadData_3:
   \   00000034   6868               LDR      R0,[R5, #+4]
   \   00000036   01B5               PUSH     {R0,LR}
   \   00000038   2300               MOVS     R3,R4
   \   0000003A   AA68               LDR      R2,[R5, #+8]
   \   0000003C   2968               LDR      R1,[R5, #+0]
   \   0000003E   3000               MOVS     R0,R6
   \   00000040   ........           BL       MemCycleToLine
   \   00000044   02B0               ADD      SP,SP,#+8
    153              ringbuf->RingBufStartPointer = endpos;
   \   00000046   AC60               STR      R4,[R5, #+8]
    154              
    155              return len;
   \   00000048   3800               MOVS     R0,R7
   \   0000004A   F2BD               POP      {R1,R4-R7,PC}    ;; return
    156          }
    157          
    158          /***************************************************************************************************
    159          * FunctionName : ReadData
    160          * Description  : 供用户调用，从环形缓冲区中读取数据到一个线性的缓冲区中
    161          * Parameter(s) : 
    162          *                readbuf : 条形缓冲区，从环形缓冲区中读取的数据存储在这个缓冲区中
    163          *                readlen : 将要从环形缓冲区读取的数据长度
    164          *
    165          * Return       : u32 : 实际读回的数据长度
    166          * Note(s)      : 1)
    167          * Log          : 2011.03.29        CJ  
    168          *                创建函数
    169          ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    170          u32 ReadData(u8 *readbuf, u32 readlen)
    171          {
   \                     ReadData:
   \   00000000   80B5               PUSH     {R7,LR}
    172          	return Ring_ReadData(&UserRingBuf, readbuf, readlen);
   \   00000002   0A00               MOVS     R2,R1
   \   00000004   0100               MOVS     R1,R0
   \   00000006   ....               LDR.N    R0,??DataTable10  ;; UserRingBuf
   \   00000008   ........           BL       Ring_ReadData
   \   0000000C   02BD               POP      {R1,PC}          ;; return
    173          }
    174          
    175          

   \                                 In section .text, align 2, keep-with-next
    176          u32 UART2_ReadData(u8 *readbuf, u32 readlen)
    177          {
   \                     UART2_ReadData:
   \   00000000   80B5               PUSH     {R7,LR}
    178          	return Ring_ReadData(&UART2RingBuf, readbuf, readlen);
   \   00000002   0A00               MOVS     R2,R1
   \   00000004   0100               MOVS     R1,R0
   \   00000006   ....               LDR.N    R0,??DataTable11  ;; UART2RingBuf
   \   00000008   ........           BL       Ring_ReadData
   \   0000000C   02BD               POP      {R1,PC}          ;; return
    179          }
    180          /***************************************************************************************************
    181          * FunctionName : Ring_WriteData
    182          * Description  : 读取从主机发送来的数据
    183          * Parameter(s) : 
    184          *                ringbuf  : 环形缓冲区结构体，要写的数据就在这个环形缓冲区中 
    185          *                writebuf : 条形缓冲区，往环形缓冲区中写的数据存储在这个缓冲区中
    186          *                writelen : 将要向环形缓冲区写的数据长度
    187          *
    188          * Return       : 0x00, if the write length is larger than the remain space
    189                           0x01, if write succesful
    190          * Note(s)      : 1)
    191          * Log          : 2009.07.23    Ver1.0    陈仁海
    192          *                创建函数
    193          * Log          : 2011.3.2      陈健
    194                           修改了函数返回类型，增加了判断是否覆盖原有数据
    195          ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    196          u8 Ring_WriteData(RING_BUFFER *ringbuf,u8 *writebuf,u32 writelen)
    197          {
   \                     Ring_WriteData:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   1600               MOVS     R6,R2
    198              if(writelen > ringbuf->RingBufSize - GetUsedRingBufferSize(ringbuf))
   \   00000008   6F68               LDR      R7,[R5, #+4]
   \   0000000A   2800               MOVS     R0,R5
   \   0000000C   ........           BL       GetUsedRingBufferSize
   \   00000010   381A               SUBS     R0,R7,R0
   \   00000012   B042               CMP      R0,R6
   \   00000014   01D2               BCS.N    ??Ring_WriteData_0
    199          	{
    200          		return 0x00;
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   1CE0               B.N      ??Ring_WriteData_1
    201          	}
    202          	/*只是将数据拷贝到了环形缓冲区中，但没有改变环形缓冲区的指针*/
    203              MemLineToCycle(ringbuf->RingBuf, ringbuf->RingBufSize,\
    204                             ringbuf->RingBufEndPointer, writebuf, writelen);
   \                     ??Ring_WriteData_0:
   \   0000001A   40B5               PUSH     {R6,LR}
   \   0000001C   2300               MOVS     R3,R4
   \   0000001E   EA68               LDR      R2,[R5, #+12]
   \   00000020   6968               LDR      R1,[R5, #+4]
   \   00000022   2868               LDR      R0,[R5, #+0]
   \   00000024   ........           BL       MemLineToCycle
   \   00000028   02B0               ADD      SP,SP,#+8
   \   0000002A   01E0               B.N      ??Ring_WriteData_2
    205              /*将环形缓冲区的尾部指针移到新的位置*/
    206              while(writelen >= ringbuf->RingBufSize)
    207              {
    208                  writelen -= ringbuf->RingBufSize;
   \                     ??Ring_WriteData_3:
   \   0000002C   6868               LDR      R0,[R5, #+4]
   \   0000002E   361A               SUBS     R6,R6,R0
    209              }   
   \                     ??Ring_WriteData_2:
   \   00000030   6868               LDR      R0,[R5, #+4]
   \   00000032   8642               CMP      R6,R0
   \   00000034   FAD2               BCS.N    ??Ring_WriteData_3
    210              if(writelen >= (ringbuf->RingBufSize - ringbuf->RingBufEndPointer))
   \   00000036   6868               LDR      R0,[R5, #+4]
   \   00000038   E968               LDR      R1,[R5, #+12]
   \   0000003A   401A               SUBS     R0,R0,R1
   \   0000003C   8642               CMP      R6,R0
   \   0000003E   05D3               BCC.N    ??Ring_WriteData_4
    211              {
    212                  ringbuf->RingBufEndPointer = writelen - (ringbuf->RingBufSize - ringbuf->RingBufEndPointer);
   \   00000040   E868               LDR      R0,[R5, #+12]
   \   00000042   6968               LDR      R1,[R5, #+4]
   \   00000044   711A               SUBS     R1,R6,R1
   \   00000046   0818               ADDS     R0,R1,R0
   \   00000048   E860               STR      R0,[R5, #+12]
   \   0000004A   02E0               B.N      ??Ring_WriteData_5
    213              }    
    214              else
    215              {
    216                  ringbuf->RingBufEndPointer = writelen + ringbuf->RingBufEndPointer;
   \                     ??Ring_WriteData_4:
   \   0000004C   E868               LDR      R0,[R5, #+12]
   \   0000004E   3018               ADDS     R0,R6,R0
   \   00000050   E860               STR      R0,[R5, #+12]
    217              }
    218          	return 0x01;
   \                     ??Ring_WriteData_5:
   \   00000052   0120               MOVS     R0,#+1
   \                     ??Ring_WriteData_1:
   \   00000054   F2BD               POP      {R1,R4-R7,PC}    ;; return
    219              
    220          }
    221          
    222          /***************************************************************************************************
    223          * FunctionName : FIFO_WriteData
    224          * Description  : 从锁存器AL422往环形缓冲器中写数据
    225          * Parameter(s) : 
    226          *                writebuf : 条形缓冲区，往环形缓冲区中写的数据存储在这个缓冲区中
    227          *                writelen : 将要向环形缓冲区写的数据长度
    228          *
    229          * Return       : 0x00, if the write length is larger than the remain space
    230                           0x01, if write succesful
    231          * Note(s)      : 1)
    232          * Log          : 2011.3.2      CJ
    233                           添加
    234          ***************************************************************************************************/			 

   \                                 In section .text, align 2, keep-with-next
    235          u8 FIFO_WriteData(u8 *writebuf, u32 writelen)
    236          {
   \                     FIFO_WriteData:
   \   00000000   80B5               PUSH     {R7,LR}
    237          	return Ring_WriteData(&UserRingBuf, writebuf, writelen);
   \   00000002   0A00               MOVS     R2,R1
   \   00000004   0100               MOVS     R1,R0
   \   00000006   ....               LDR.N    R0,??DataTable10  ;; UserRingBuf
   \   00000008   ........           BL       Ring_WriteData
   \   0000000C   02BD               POP      {R1,PC}          ;; return
    238          }
    239          
    240          
    241          
    242          

   \                                 In section .text, align 2, keep-with-next
    243          u8 UART2_WriteData(u8 *writebuf, u32 writelen)
    244          {
   \                     UART2_WriteData:
   \   00000000   80B5               PUSH     {R7,LR}
    245          	return Ring_WriteData(&UART2RingBuf, writebuf, writelen);
   \   00000002   0A00               MOVS     R2,R1
   \   00000004   0100               MOVS     R1,R0
   \   00000006   ....               LDR.N    R0,??DataTable11  ;; UART2RingBuf
   \   00000008   ........           BL       Ring_WriteData
   \   0000000C   02BD               POP      {R1,PC}          ;; return
    246          }
    247          
    248          
    249          /***************************************************************************************************
    250          * FunctionName : GetUsedRingBufferSize
    251          * Description  : 获得环形缓冲区已经使用的大小
    252          * Parameter(s) : 
    253          *                ringbuf : 要操作的环形缓冲区
    254          *
    255          * Return       : u32 : 已使用的环形缓冲区中数据包的长度
    256          * Note(s)      : 1)
    257          * Log          : 2009.07.27    Ver1.0    陈仁海
    258          *                创建函数
    259          ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    260          u32 GetUsedRingBufferSize(RING_BUFFER *ringbuf)
    261          {
   \                     GetUsedRingBufferSize:
   \   00000000   0100               MOVS     R1,R0
    262               u32 usedlen = 0;
   \   00000002   0020               MOVS     R0,#+0
    263              
    264              if(ringbuf->RingBufEndPointer >= ringbuf->RingBufStartPointer)
   \   00000004   CA68               LDR      R2,[R1, #+12]
   \   00000006   8B68               LDR      R3,[R1, #+8]
   \   00000008   9A42               CMP      R2,R3
   \   0000000A   03D3               BCC.N    ??GetUsedRingBufferSize_0
    265              {
    266                  usedlen = ringbuf->RingBufEndPointer - ringbuf->RingBufStartPointer;
   \   0000000C   C868               LDR      R0,[R1, #+12]
   \   0000000E   8968               LDR      R1,[R1, #+8]
   \   00000010   401A               SUBS     R0,R0,R1
   \   00000012   04E0               B.N      ??GetUsedRingBufferSize_1
    267              }
    268              else
    269              {
    270                  usedlen = ringbuf->RingBufSize - ringbuf->RingBufStartPointer \
    271                              + ringbuf->RingBufEndPointer;
   \                     ??GetUsedRingBufferSize_0:
   \   00000014   4868               LDR      R0,[R1, #+4]
   \   00000016   8A68               LDR      R2,[R1, #+8]
   \   00000018   801A               SUBS     R0,R0,R2
   \   0000001A   C968               LDR      R1,[R1, #+12]
   \   0000001C   0818               ADDS     R0,R1,R0
    272                             
    273              }
    274              return usedlen;
   \                     ??GetUsedRingBufferSize_1:
   \   0000001E   7047               BX       LR               ;; return
    275          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     UserRingBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     UART2RingBuf
    276          
    277          

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     FIFO_WriteData             8
     GetUsedRingBufferSize      0
     MemCycleToLine            24
     MemLineToCycle            32
     ReadData                   8
     RingBufInit                0
     Ring_ReadData             32
     Ring_WriteData            32
     UART2_ReadData             8
     UART2_WriteData            8
     memcpy                     8


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     memcpy                  14
     UserRingBuf             16
     UART2RingBuf            16
     UserBuf               1000
     Uart2Buf              1000
     RingBufInit             64
     MemLineToCycle         110
     MemCycleToLine          64
     Ring_ReadData           76
     ReadData                14
     UART2_ReadData          14
     Ring_WriteData          86
     FIFO_WriteData          14
     UART2_WriteData         14
     GetUsedRingBufferSize   32
     ??DataTable10            4
     ??DataTable11            4

 
 2 032 bytes in section .bss
   510 bytes in section .text
 
   496 bytes of CODE memory (+ 14 bytes shared)
 2 032 bytes of DATA memory

Errors: none
Warnings: none
