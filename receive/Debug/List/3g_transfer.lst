###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.40.0.51500/W32 for ARM     28/Apr/2011  09:50:56 #
# Copyright (C) 1999-2009 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Documents and Settings\Administrator\桌面\2.4G\Demo\s #
#                    ource\3g_transfer.c                                      #
#    Command line =  "C:\Documents and Settings\Administrator\桌面\2.4G\Demo\ #
#                    source\3g_transfer.c" -lC "C:\Documents and              #
#                    Settings\Administrator\桌面\2.4G\Demo\project\EWARMv5\De #
#                    bug\List\" -lb "C:\Documents and                         #
#                    Settings\Administrator\桌面\2.4G\Demo\project\EWARMv5\De #
#                    bug\List\" -o "C:\Documents and                          #
#                    Settings\Administrator\桌面\2.4G\Demo\project\EWARMv5\De #
#                    bug\Obj\" --debug --endian=little --cpu=Cortex-M3 -e     #
#                    --fpu=None --dlib_config "C:\Program Files\IAR           #
#                    Systems\Embedded Workbench 5.4_2\arm\INC\DLib_Config_Ful #
#                    l.h" -I "C:\Documents and Settings\Administrator\桌面\2. #
#                    4G\Demo\project\EWARMv5\..\..\include\" -I               #
#                    "C:\Documents and Settings\Administrator\桌面\2.4G\Demo\ #
#                    project\EWARMv5\..\..\source\" -I "C:\Documents and      #
#                    Settings\Administrator\桌面\2.4G\Demo\project\EWARMv5\.. #
#                    \..\..\FWLib\library\inc\" -I "C:\Documents and          #
#                    Settings\Administrator\桌面\2.4G\Demo\project\EWARMv5\.. #
#                    \..\..\USBLib\library\inc\" -I "C:\Documents and         #
#                    Settings\Administrator\桌面\2.4G\Demo\project\EWARMv5\.. #
#                    \..\fatfs\" -I "C:\Program Files\IAR Systems\Embedded    #
#                    Workbench 5.4_2\arm\INC\" -Ohz                           #
#    List file    =  C:\Documents and Settings\Administrator\桌面\2.4G\Demo\p #
#                    roject\EWARMv5\Debug\List\3g_transfer.lst                #
#    Object file  =  C:\Documents and Settings\Administrator\桌面\2.4G\Demo\p #
#                    roject\EWARMv5\Debug\Obj\3g_transfer.o                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\桌面\2.4G\Demo\source\3g_transfer.c
      1          #include "3g_transfer.h"
      2          #include "stm32f10x_usart.h"
      3          #include "delay.h"
      4          
      5          #define send_buf_len 1000               //发送数据缓冲区长度

   \                                 In section .bss, align 4
      6          u8 sendBuf[1000];       //缓存发送数据的条形缓冲区
   \                     sendBuf:
   \   00000000                      DS8 1000
      7          u32 num_of_tri_plus;    //统计发送的数据中“+++”出现的次数。“+++”为透传模式结束命令
      8          u8 resend_buf0[640];
   \                     resend_buf0:
   \   000003E8                      DS8 640
      9          u8 resend_buf1[640];
   \                     resend_buf1:
   \   00000668                      DS8 640
     10          u8 resend_buf2[640];
   \                     resend_buf2:
   \   000008E8                      DS8 640
     11          u8 resend_buf3[640];
   \                     resend_buf3:
   \   00000B68                      DS8 640
     12          u8 resend_buf4[640];
   \                     resend_buf4:
   \   00000DE8                      DS8 640

   \                                 In section .bss, align 4
   \                     num_of_tri_plus:
   \   00000000                      DS8 4
     13          
     14          

   \                                 In section .text, align 2, keep-with-next
     15          u32 read_to_sendBuf(RING_BUFFER *ringbuf, u32 bufStartPoint, u32 bufEndPoint)
     16          {
   \                     read_to_sendBuf:
   \   00000000   10B5               PUSH     {R4,LR}
     17            u32 len;
     18            if(bufEndPoint >= bufStartPoint)
   \   00000002   8A42               CMP      R2,R1
   \   00000004   2FBF               ITEEE    CS 
   \   00000006   541A               SUBCS    R4,R2,R1
   \   00000008   4FF47A73           MOVCC    R3,#+1000
   \   0000000C   591A               SUBCC    R1,R3,R1
   \   0000000E   5418               ADDCC    R4,R2,R1
     19              len = bufEndPoint - bufStartPoint;
     20            else
     21              len = (send_buf_len - bufStartPoint) + bufEndPoint;
     22            Ring_ReadData(ringbuf, sendBuf, len);
   \   00000010   2246               MOV      R2,R4
   \   00000012   ....               LDR.N    R1,??DataTable8  ;; sendBuf
   \   00000014   ........           BL       Ring_ReadData
     23            return len; 
   \   00000018   2046               MOV      R0,R4
   \   0000001A   10BD               POP      {R4,PC}          ;; return
     24          }
     25          

   \                                 In section .text, align 2, keep-with-next
     26          void send_transparent_transfer( u32 len )
     27          {
   \                     send_transparent_transfer:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0446               MOV      R4,R0
     28            for(int i=0;i<len-2;i++)
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   ....               LDR.N    R1,??DataTable6  ;; num_of_tri_plus
   \   00000008   0A68               LDR      R2,[R1, #+0]
   \   0000000A   ....               LDR.N    R5,??DataTable8  ;; sendBuf
   \   0000000C   0EE0               B.N      ??send_transparent_transfer_0
     29            {
     30              if(sendBuf[i]=='+' && sendBuf[i+1]=='+' && sendBuf[i+2]=='+' )
   \                     ??send_transparent_transfer_1:
   \   0000000E   435D               LDRB     R3,[R0, R5]
   \   00000010   2B2B               CMP      R3,#+43
   \   00000012   0AD1               BNE.N    ??send_transparent_transfer_2
   \   00000014   4319               ADDS     R3,R0,R5
   \   00000016   5B78               LDRB     R3,[R3, #+1]
   \   00000018   2B2B               CMP      R3,#+43
   \   0000001A   06D1               BNE.N    ??send_transparent_transfer_2
   \   0000001C   4319               ADDS     R3,R0,R5
   \   0000001E   9B78               LDRB     R3,[R3, #+2]
   \   00000020   2B2B               CMP      R3,#+43
   \   00000022   02D1               BNE.N    ??send_transparent_transfer_2
     31              { 
     32                sendBuf[i]='*';
   \   00000024   2A23               MOVS     R3,#+42
   \   00000026   4355               STRB     R3,[R0, R5]
     33                num_of_tri_plus ++;
   \   00000028   521C               ADDS     R2,R2,#+1
     34              }
     35            }
   \                     ??send_transparent_transfer_2:
   \   0000002A   401C               ADDS     R0,R0,#+1
   \                     ??send_transparent_transfer_0:
   \   0000002C   A31E               SUBS     R3,R4,#+2
   \   0000002E   9842               CMP      R0,R3
   \   00000030   EDD3               BCC.N    ??send_transparent_transfer_1
   \   00000032   0A60               STR      R2,[R1, #+0]
     36            for(int i=0;i<len;i++)
   \   00000034   0026               MOVS     R6,#+0
   \   00000036   ....               LDR.N    R7,??DataTable7  ;; 0x40004400
   \   00000038   0AE0               B.N      ??send_transparent_transfer_3
     37            {
     38              USART_SendData(UART_USING, sendBuf[i]);
   \                     ??send_transparent_transfer_4:
   \   0000003A   715D               LDRB     R1,[R6, R5]
   \   0000003C   3846               MOV      R0,R7
   \   0000003E   ........           BL       USART_SendData
     39              while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
   \                     ??send_transparent_transfer_5:
   \   00000042   4021               MOVS     R1,#+64
   \   00000044   3846               MOV      R0,R7
   \   00000046   ........           BL       USART_GetFlagStatus
   \   0000004A   0028               CMP      R0,#+0
   \   0000004C   F9D0               BEQ.N    ??send_transparent_transfer_5
     40            }
   \   0000004E   761C               ADDS     R6,R6,#+1
   \                     ??send_transparent_transfer_3:
   \   00000050   A642               CMP      R6,R4
   \   00000052   F2D3               BCC.N    ??send_transparent_transfer_4
     41          }
   \   00000054   F1BD               POP      {R0,R4-R7,PC}    ;; return
     42          

   \                                 In section .text, align 2, keep-with-next
     43          void send_line_id(int x)
     44          {
   \                     send_line_id:
   \   00000000   10B5               PUSH     {R4,LR}
     45            u8 data = x ;
     46            USART_SendData(UART_USING, data);
   \   00000002   ....               LDR.N    R4,??DataTable7  ;; 0x40004400
   \   00000004   C1B2               UXTB     R1,R0
   \   00000006   2046               MOV      R0,R4
   \   00000008   ........           BL       USART_SendData
     47            while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
   \                     ??send_line_id_0:
   \   0000000C   4021               MOVS     R1,#+64
   \   0000000E   2046               MOV      R0,R4
   \   00000010   ........           BL       USART_GetFlagStatus
   \   00000014   0028               CMP      R0,#+0
   \   00000016   F9D0               BEQ.N    ??send_line_id_0
     48          }
   \   00000018   10BD               POP      {R4,PC}          ;; return
     49          

   \                                 In section .text, align 2, keep-with-next
     50          void copy_to_resendBuf(int x, int lineCount, u32 len)
     51          {
   \                     copy_to_resendBuf:
   \   00000000   80B5               PUSH     {R7,LR}
     52            u8 *pBuf;
     53            if(x%lineCount == 0)
   \   00000002   90FBF1F3           SDIV     R3,R0,R1
   \   00000006   01FB1301           MLS      R1,R1,R3,R0
   \   0000000A   ....               LDR.N    R0,??DataTable8  ;; sendBuf
   \   0000000C   11B9               CBNZ     R1,??copy_to_resendBuf_0
     54            {
     55              pBuf = resend_buf0;
     56              copyBuf(sendBuf, pBuf, len);
   \   0000000E   00F2E831           ADDW     R1,R0,#+1000
   \   00000012   12E0               B.N      ??copy_to_resendBuf_1
     57            }
     58            else if(x%lineCount == 1)
   \                     ??copy_to_resendBuf_0:
   \   00000014   0129               CMP      R1,#+1
   \   00000016   02D1               BNE.N    ??copy_to_resendBuf_2
     59            {
     60              pBuf = resend_buf1;
     61              copyBuf(sendBuf, pBuf, len);
   \   00000018   00F5CD61           ADD      R1,R0,#+1640
   \   0000001C   0DE0               B.N      ??copy_to_resendBuf_1
     62            }
     63            else if(x%lineCount == 2)
   \                     ??copy_to_resendBuf_2:
   \   0000001E   0229               CMP      R1,#+2
   \   00000020   02D1               BNE.N    ??copy_to_resendBuf_3
     64            {
     65              pBuf = resend_buf2;
     66              copyBuf(sendBuf, pBuf, len);
   \   00000022   00F6E801           ADDW     R1,R0,#+2280
   \   00000026   08E0               B.N      ??copy_to_resendBuf_1
     67            }
     68            else if(x%lineCount == 3)
   \                     ??copy_to_resendBuf_3:
   \   00000028   0329               CMP      R1,#+3
   \   0000002A   02D1               BNE.N    ??copy_to_resendBuf_4
     69            {
     70              pBuf = resend_buf3;
     71              copyBuf(sendBuf, pBuf, len);
   \   0000002C   00F66831           ADDW     R1,R0,#+2920
   \   00000030   03E0               B.N      ??copy_to_resendBuf_1
     72            }
     73            else if(x%lineCount == 4)
   \                     ??copy_to_resendBuf_4:
   \   00000032   0429               CMP      R1,#+4
   \   00000034   03D1               BNE.N    ??copy_to_resendBuf_5
     74            {
     75              pBuf = resend_buf4;
     76              copyBuf(sendBuf, pBuf, len);
   \   00000036   00F6E851           ADDW     R1,R0,#+3560
   \                     ??copy_to_resendBuf_1:
   \   0000003A   ........           BL       copyBuf
     77            }
     78          }
   \                     ??copy_to_resendBuf_5:
   \   0000003E   01BD               POP      {R0,PC}          ;; return
     79          
     80          

   \                                 In section .text, align 2, keep-with-next
     81          void copyBuf(u8 *s, u8 *d, u32 len )
     82          {
   \                     copyBuf:
   \   00000000   10B5               PUSH     {R4,LR}
     83            for(int i=0;i<len;i++)
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   02E0               B.N      ??copyBuf_0
     84            {
     85              d[i] = s[i];
   \                     ??copyBuf_1:
   \   00000006   1C5C               LDRB     R4,[R3, R0]
   \   00000008   5C54               STRB     R4,[R3, R1]
     86            }
   \   0000000A   5B1C               ADDS     R3,R3,#+1
   \                     ??copyBuf_0:
   \   0000000C   9342               CMP      R3,R2
   \   0000000E   FAD3               BCC.N    ??copyBuf_1
     87          }
   \   00000010   10BD               POP      {R4,PC}          ;; return
     88          

   \                                 In section .text, align 2, keep-with-next
     89          void transparent_send_buf(u8 *buf, u32 len)
     90          {
   \                     transparent_send_buf:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0446               MOV      R4,R0
   \   00000004   0D46               MOV      R5,R1
     91            for(int i=0;i<len-2;i++)
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   ....               LDR.N    R1,??DataTable6  ;; num_of_tri_plus
   \   0000000A   10E0               B.N      ??transparent_send_buf_0
     92            {
     93              if(buf[i]=='+' && buf[i+1]=='+' && buf[i+2]=='+' )
   \                     ??transparent_send_buf_1:
   \   0000000C   025D               LDRB     R2,[R0, R4]
   \   0000000E   2B2A               CMP      R2,#+43
   \   00000010   0CD1               BNE.N    ??transparent_send_buf_2
   \   00000012   0219               ADDS     R2,R0,R4
   \   00000014   5278               LDRB     R2,[R2, #+1]
   \   00000016   2B2A               CMP      R2,#+43
   \   00000018   08D1               BNE.N    ??transparent_send_buf_2
   \   0000001A   0219               ADDS     R2,R0,R4
   \   0000001C   9278               LDRB     R2,[R2, #+2]
   \   0000001E   2B2A               CMP      R2,#+43
   \   00000020   04D1               BNE.N    ??transparent_send_buf_2
     94              { 
     95                buf[i]='*';
   \   00000022   2A22               MOVS     R2,#+42
   \   00000024   0255               STRB     R2,[R0, R4]
     96                num_of_tri_plus ++;
   \   00000026   0A68               LDR      R2,[R1, #+0]
   \   00000028   521C               ADDS     R2,R2,#+1
   \   0000002A   0A60               STR      R2,[R1, #+0]
     97              }
     98            }
   \                     ??transparent_send_buf_2:
   \   0000002C   401C               ADDS     R0,R0,#+1
   \                     ??transparent_send_buf_0:
   \   0000002E   AA1E               SUBS     R2,R5,#+2
   \   00000030   9042               CMP      R0,R2
   \   00000032   EBD3               BCC.N    ??transparent_send_buf_1
     99            for(int i=0;i<len;i++)
   \   00000034   0026               MOVS     R6,#+0
   \   00000036   ....               LDR.N    R7,??DataTable7  ;; 0x40004400
   \   00000038   0AE0               B.N      ??transparent_send_buf_3
    100            {
    101              USART_SendData(UART_USING, buf[i]);
   \                     ??transparent_send_buf_4:
   \   0000003A   315D               LDRB     R1,[R6, R4]
   \   0000003C   3846               MOV      R0,R7
   \   0000003E   ........           BL       USART_SendData
    102              while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
   \                     ??transparent_send_buf_5:
   \   00000042   4021               MOVS     R1,#+64
   \   00000044   3846               MOV      R0,R7
   \   00000046   ........           BL       USART_GetFlagStatus
   \   0000004A   0028               CMP      R0,#+0
   \   0000004C   F9D0               BEQ.N    ??transparent_send_buf_5
    103            }
   \   0000004E   761C               ADDS     R6,R6,#+1
   \                     ??transparent_send_buf_3:
   \   00000050   AE42               CMP      R6,R5
   \   00000052   F2D3               BCC.N    ??transparent_send_buf_4
    104          }
   \   00000054   F1BD               POP      {R0,R4-R7,PC}    ;; return
    105          
    106          

   \                                 In section .text, align 4, keep-with-next
    107          void resend(int line_count, u32 len)
    108          {
   \                     resend:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0546               MOV      R5,R0
   \   00000004   0C46               MOV      R4,R1
    109            for(int i=0; i<line_count ;i++)
   \   00000006   0026               MOVS     R6,#+0
   \   00000008   08E0               B.N      ??resend_0
    110            {
    111              switch (i)
    112              {
    113                case 0:
    114                  transparent_send_buf(resend_buf0 , len);
    115                  break;
    116                case 1:
    117                  transparent_send_buf(resend_buf1 , len);
    118                  break;
    119                case 2:
    120                  transparent_send_buf(resend_buf2 , len);
    121                  break;
    122                case 3:
    123                  transparent_send_buf(resend_buf3 , len);
    124                  break;
    125                case 4:
    126                  transparent_send_buf(resend_buf4 , len);
   \                     ??resend_1:
   \   0000000A   2146               MOV      R1,R4
   \   0000000C   00F6E850           ADDW     R0,R0,#+3560
   \                     ??resend_2:
   \   00000010   ........           BL       transparent_send_buf
    127                  break;
    128              }
    129              delay_us(100000);
   \                     ??resend_3:
   \   00000014   0F48               LDR.N    R0,??resend_4    ;; 0x186a0
   \   00000016   ........           BL       delay_us
   \   0000001A   761C               ADDS     R6,R6,#+1
   \                     ??resend_0:
   \   0000001C   AE42               CMP      R6,R5
   \   0000001E   18DA               BGE.N    ??resend_5
   \   00000020   ....               LDR.N    R0,??DataTable8  ;; sendBuf
   \   00000022   36B1               CBZ      R6,??resend_6
   \   00000024   022E               CMP      R6,#+2
   \   00000026   0CD0               BEQ.N    ??resend_7
   \   00000028   07D3               BCC.N    ??resend_8
   \   0000002A   042E               CMP      R6,#+4
   \   0000002C   EDD0               BEQ.N    ??resend_1
   \   0000002E   0CD3               BCC.N    ??resend_9
   \   00000030   F0E7               B.N      ??resend_3
   \                     ??resend_6:
   \   00000032   2146               MOV      R1,R4
   \   00000034   00F2E830           ADDW     R0,R0,#+1000
   \   00000038   EAE7               B.N      ??resend_2
   \                     ??resend_8:
   \   0000003A   2146               MOV      R1,R4
   \   0000003C   00F5CD60           ADD      R0,R0,#+1640
   \   00000040   E6E7               B.N      ??resend_2
   \                     ??resend_7:
   \   00000042   2146               MOV      R1,R4
   \   00000044   00F6E800           ADDW     R0,R0,#+2280
   \   00000048   E2E7               B.N      ??resend_2
   \                     ??resend_9:
   \   0000004A   2146               MOV      R1,R4
   \   0000004C   00F66830           ADDW     R0,R0,#+2920
   \   00000050   DEE7               B.N      ??resend_2
    130            }
    131          } 
   \                     ??resend_5:
   \   00000052   70BD               POP      {R4-R6,PC}       ;; return
   \                     ??resend_4:
   \   00000054   A0860100           DC32     0x186a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     num_of_tri_plus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   00440040           DC32     0x40004400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     sendBuf

   Maximum stack usage in bytes:

     Function                  .cstack
     --------                  -------
     copyBuf                        8
     copy_to_resendBuf              8
     read_to_sendBuf                8
     resend                        16
     send_line_id                   8
     send_transparent_transfer     24
     transparent_send_buf          24


   Section sizes:

     Function/Label            Bytes
     --------------            -----
     sendBuf                   4200
     resend_buf0
     resend_buf1
     resend_buf2
     resend_buf3
     resend_buf4
     num_of_tri_plus              4
     read_to_sendBuf             28
     send_transparent_transfer   86
     send_line_id                26
     copy_to_resendBuf           64
     copyBuf                     18
     transparent_send_buf        86
     resend                      88
     ??DataTable6                 4
     ??DataTable7                 4
     ??DataTable8                 4

 
 4 204 bytes in section .bss
   408 bytes in section .text
 
   408 bytes of CODE memory
 4 204 bytes of DATA memory

Errors: none
Warnings: none
