###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.2.51295/W32 for ARM     11/Apr/2011  13:51:33 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\LiYang\Desktop\newest\Demo\source\sdcard.c      #
#    Command line =  C:\Users\LiYang\Desktop\newest\Demo\source\sdcard.c -lC  #
#                    C:\Users\LiYang\Desktop\newest\Demo\project\EWARMv5\Debu #
#                    g\List\ -lb C:\Users\LiYang\Desktop\newest\Demo\project\ #
#                    EWARMv5\Debug\List\ -o C:\Users\LiYang\Desktop\newest\De #
#                    mo\project\EWARMv5\Debug\Obj\ --debug --endian=little    #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "E:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    C:\Users\LiYang\Desktop\newest\Demo\project\EWARMv5\..\. #
#                    .\include\ -I C:\Users\LiYang\Desktop\newest\Demo\projec #
#                    t\EWARMv5\..\..\source\ -I C:\Users\LiYang\Desktop\newes #
#                    t\Demo\project\EWARMv5\..\..\..\FWLib\library\inc\ -I    #
#                    C:\Users\LiYang\Desktop\newest\Demo\project\EWARMv5\..\. #
#                    .\..\USBLib\library\inc\ -I                              #
#                    C:\Users\LiYang\Desktop\newest\Demo\project\EWARMv5\..\. #
#                    .\fatfs\ -I "E:\Program Files\IAR Systems\Embedded       #
#                    Workbench 5.4\arm\INC\" -Ohz                             #
#    List file    =  C:\Users\LiYang\Desktop\newest\Demo\project\EWARMv5\Debu #
#                    g\List\sdcard.lst                                        #
#    Object file  =  C:\Users\LiYang\Desktop\newest\Demo\project\EWARMv5\Debu #
#                    g\Obj\sdcard.o                                           #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\LiYang\Desktop\newest\Demo\source\sdcard.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : sdcard.c
      3          * Author             : MCD Application Team
      4          * Version            : V2.0.3
      5          * Date               : 09/22/2008
      6          * Description        : This file provides all the SD Card driver firmware
      7          *                      functions.
      8          ********************************************************************************
      9          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     11          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     12          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     13          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     14          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15          *******************************************************************************/
     16          
     17          /* Includes ------------------------------------------------------------------*/
     18          #include "sdcard.h"
     19          
     20          /* Private typedef -----------------------------------------------------------*/
     21          /* Private define ------------------------------------------------------------*/
     22          #define NULL 0
     23          #define SDIO_STATIC_FLAGS               ((u32)0x000005FF)
     24          #define SDIO_CMD0TIMEOUT                ((u32)0x00002710)
     25          #define SDIO_FIFO_Address               ((u32)0x40018080)
     26          
     27          /* Mask for errors Card Status R1 (OCR Register) */
     28          #define SD_OCR_ADDR_OUT_OF_RANGE        ((u32)0x80000000)
     29          #define SD_OCR_ADDR_MISALIGNED          ((u32)0x40000000)
     30          #define SD_OCR_BLOCK_LEN_ERR            ((u32)0x20000000)
     31          #define SD_OCR_ERASE_SEQ_ERR            ((u32)0x10000000)
     32          #define SD_OCR_BAD_ERASE_PARAM          ((u32)0x08000000)
     33          #define SD_OCR_WRITE_PROT_VIOLATION     ((u32)0x04000000)
     34          #define SD_OCR_LOCK_UNLOCK_FAILED       ((u32)0x01000000)
     35          #define SD_OCR_COM_CRC_FAILED           ((u32)0x00800000)
     36          #define SD_OCR_ILLEGAL_CMD              ((u32)0x00400000)
     37          #define SD_OCR_CARD_ECC_FAILED          ((u32)0x00200000)
     38          #define SD_OCR_CC_ERROR                 ((u32)0x00100000)
     39          #define SD_OCR_GENERAL_UNKNOWN_ERROR    ((u32)0x00080000)
     40          #define SD_OCR_STREAM_READ_UNDERRUN     ((u32)0x00040000)
     41          #define SD_OCR_STREAM_WRITE_OVERRUN     ((u32)0x00020000)
     42          #define SD_OCR_CID_CSD_OVERWRIETE       ((u32)0x00010000)
     43          #define SD_OCR_WP_ERASE_SKIP            ((u32)0x00008000)
     44          #define SD_OCR_CARD_ECC_DISABLED        ((u32)0x00004000)
     45          #define SD_OCR_ERASE_RESET              ((u32)0x00002000)
     46          #define SD_OCR_AKE_SEQ_ERROR            ((u32)0x00000008)
     47          #define SD_OCR_ERRORBITS                ((u32)0xFDFFE008)
     48          
     49          /* Masks for R6 Response */
     50          #define SD_R6_GENERAL_UNKNOWN_ERROR     ((u32)0x00002000)
     51          #define SD_R6_ILLEGAL_CMD               ((u32)0x00004000)
     52          #define SD_R6_COM_CRC_FAILED            ((u32)0x00008000)
     53          
     54          #define SD_VOLTAGE_WINDOW_SD            ((u32)0x80100000)
     55          #define SD_HIGH_CAPACITY                ((u32)0x40000000)
     56          #define SD_STD_CAPACITY                 ((u32)0x00000000)
     57          #define SD_CHECK_PATTERN                ((u32)0x000001AA)
     58          
     59          #define SD_MAX_VOLT_TRIAL               ((u32)0x0000FFFF)
     60          #define SD_ALLZERO                      ((u32)0x00000000)
     61          
     62          #define SD_WIDE_BUS_SUPPORT             ((u32)0x00040000)
     63          #define SD_SINGLE_BUS_SUPPORT           ((u32)0x00010000)
     64          #define SD_CARD_LOCKED                  ((u32)0x02000000)
     65          #define SD_CARD_PROGRAMMING             ((u32)0x00000007)
     66          #define SD_CARD_RECEIVING               ((u32)0x00000006)
     67          #define SD_DATATIMEOUT                  ((u32)0x000FFFFF)
     68          #define SD_0TO7BITS                     ((u32)0x000000FF)
     69          #define SD_8TO15BITS                    ((u32)0x0000FF00)
     70          #define SD_16TO23BITS                   ((u32)0x00FF0000)
     71          #define SD_24TO31BITS                   ((u32)0xFF000000)
     72          #define SD_MAX_DATA_LENGTH              ((u32)0x01FFFFFF)
     73          
     74          #define SD_HALFFIFO                     ((u32)0x00000008)
     75          #define SD_HALFFIFOBYTES                ((u32)0x00000020)
     76          
     77          /* Command Class Supported */
     78          #define SD_CCCC_LOCK_UNLOCK             ((u32)0x00000080)
     79          #define SD_CCCC_WRITE_PROT              ((u32)0x00000040)
     80          #define SD_CCCC_ERASE                   ((u32)0x00000020)
     81          
     82          /* Following commands are SD Card Specific commands.
     83             SDIO_APP_CMD should be sent before sending these commands. */
     84          #define SDIO_SEND_IF_COND               ((u32)0x00000008)
     85          
     86          #define SDIO_INIT_CLK_DIV                  ((u8)0xB2)
     87          #define SDIO_TRANSFER_CLK_DIV              ((u8)0x1) 
     88          
     89          /* Private macro -------------------------------------------------------------*/
     90          /* Private variables ---------------------------------------------------------*/
     91          static u32 CardType =  SDIO_STD_CAPACITY_SD_CARD_V1_1;
     92          static u32 CSD_Tab[4], CID_Tab[4], RCA = 0;
     93          static u32 DeviceMode = SD_POLLING_MODE;
     94          static u32 TotalNumberOfBytes = 0, StopCondition = 0;
     95          u32 *SrcBuffer, *DestBuffer;
     96          volatile SD_Error TransferError = SD_OK;
     97          vu32 TransferEnd = 0;
     98          vu32 NumberOfBytes = 0;

   \                                 In section .bss, align 4
     99          SDIO_InitTypeDef SDIO_InitStructure;
   \                     SDIO_InitStructure:
   \   00000000                      DS8 24

   \                                 In section .data, align 4
   \                     TransferError:
   \   00000000   2A                 DC8 42
   \   00000001   000000             DC8 0, 0, 0
    100          SDIO_CmdInitTypeDef SDIO_CmdInitStructure;
    101          SDIO_DataInitTypeDef SDIO_DataInitStructure;
   \                     SDIO_DataInitStructure:
   \   00000004   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     SDIO_CmdInitStructure:
   \   0000001C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000050   00000000           DC32 0
   \   00000054   00000000           DC32 0
   \   00000058   02000000           DC32 2
   \   0000005C   00000000           DC32 0
   \   00000060   00000000           DC32 0
   \                     SrcBuffer:
   \   00000064   00000000           DC8 0, 0, 0, 0
   \                     DestBuffer:
   \   00000068   00000000           DC8 0, 0, 0, 0
   \                     TransferEnd:
   \   0000006C   00000000           DC32 0
   \                     NumberOfBytes:
   \   00000070   00000000           DC32 0
    102          
    103          /* Private function prototypes -----------------------------------------------*/
    104          static SD_Error CmdError(void);
    105          static SD_Error CmdResp1Error(u8 cmd);
    106          static SD_Error CmdResp7Error(void);
    107          static SD_Error CmdResp3Error(void);
    108          static SD_Error CmdResp2Error(void);
    109          static SD_Error CmdResp6Error(u8 cmd, u16 *prca);
    110          static SD_Error SDEnWideBus(FunctionalState NewState);
    111          static SD_Error IsCardProgramming(u8 *pstatus);
    112          static SD_Error FindSCR(u16 rca, u32 *pscr);
    113          static u8 convert_from_bytes_to_power_of_two(u16 NumberOfBytes);
    114          static void SDIO_GPIO_Configuration(void);
    115          static void DMA_TxConfiguration(u32 *BufferSRC, u32 BufferSize);
    116          static void DMA_RxConfiguration(u32 *BufferDST, u32 BufferSize);
    117          
    118          /* Private functions ---------------------------------------------------------*/
    119          
    120          
    121          /*******************************************************************************
    122          * Function Name  : SD_Init
    123          * Description    : Initializes the SD Card and put it into StandBy State (Ready 
    124          *                  for data transfer).
    125          * Input          : None
    126          * Output         : None
    127          * Return         : SD_Error: SD Card Error code.
    128          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    129          SD_Error SD_Init(void)
    130          {
   \                     SD_Init:
   \   00000000   80B5               PUSH     {R7,LR}
    131            SD_Error errorstatus = SD_OK;
    132          
    133            /* Configure SDIO interface GPIO */
    134            SDIO_GPIO_Configuration();  
   \   00000002   4FF4F850           MOV      R0,#+7936
   \   00000006   ADF80000           STRH     R0,[SP, #+0]
   \   0000000A   0320               MOVS     R0,#+3
   \   0000000C   8DF80200           STRB     R0,[SP, #+2]
   \   00000010   1820               MOVS     R0,#+24
   \   00000012   8DF80300           STRB     R0,[SP, #+3]
   \   00000016   00A9               ADD      R1,SP,#+0
   \   00000018   1548               LDR.N    R0,??SD_Init_0   ;; 0x40011000
   \   0000001A   ........           BL       GPIO_Init
   \   0000001E   0420               MOVS     R0,#+4
   \   00000020   ADF80000           STRH     R0,[SP, #+0]
   \   00000024   00A9               ADD      R1,SP,#+0
   \   00000026   1348               LDR.N    R0,??SD_Init_0+0x4  ;; 0x40011400
   \   00000028   ........           BL       GPIO_Init
    135          
    136            /* Enable the SDIO AHB Clock */
    137            RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, ENABLE);
   \   0000002C   0121               MOVS     R1,#+1
   \   0000002E   4FF48060           MOV      R0,#+1024
   \   00000032   ........           BL       RCC_AHBPeriphClockCmd
    138          
    139            /* Enable the DMA2 Clock */
    140            RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
   \   00000036   0121               MOVS     R1,#+1
   \   00000038   0220               MOVS     R0,#+2
   \   0000003A   ........           BL       RCC_AHBPeriphClockCmd
    141          
    142            SDIO_DeInit();
   \   0000003E   ........           BL       SDIO_DeInit
    143          
    144            errorstatus = SD_PowerON();
   \   00000042   ........           BL       SD_PowerON
    145          
    146            if (errorstatus != SD_OK)
   \   00000046   2A28               CMP      R0,#+42
   \   00000048   10D1               BNE.N    ??SD_Init_1
    147            {
    148              /* CMD Response TimeOut (wait for CMDSENT flag) */
    149              return(errorstatus);
    150            }
    151          
    152            errorstatus = SD_InitializeCards();
   \   0000004A   ........           BL       SD_InitializeCards
    153          
    154            if (errorstatus != SD_OK)
   \   0000004E   2A28               CMP      R0,#+42
   \   00000050   0CD1               BNE.N    ??SD_Init_1
    155            {
    156              /* CMD Response TimeOut (wait for CMDSENT flag) */
    157              return(errorstatus);
    158            }
    159          
    160            /* Configure the SDIO peripheral */
    161            /* HCLK = 72 MHz, SDIOCLK = 72 MHz, SDIO_CK = HCLK/(2 + 1) = 24 MHz */  
    162            SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
   \   00000052   ........           LDR.W    R0,??DataTable8  ;; SDIO_InitStructure
   \   00000056   0121               MOVS     R1,#+1
   \   00000058   0170               STRB     R1,[R0, #+0]
    163            SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
   \   0000005A   0021               MOVS     R1,#+0
   \   0000005C   4160               STR      R1,[R0, #+4]
    164            SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
   \   0000005E   8160               STR      R1,[R0, #+8]
    165            SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
   \   00000060   C160               STR      R1,[R0, #+12]
    166            SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
   \   00000062   0161               STR      R1,[R0, #+16]
    167            SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
   \   00000064   4161               STR      R1,[R0, #+20]
    168            SDIO_Init(&SDIO_InitStructure);
   \   00000066   ........           BL       SDIO_Init
    169          
    170            return(errorstatus);
   \   0000006A   2A20               MOVS     R0,#+42
   \                     ??SD_Init_1:
   \   0000006C   02BD               POP      {R1,PC}          ;; return
   \   0000006E   00BF               Nop      
   \                     ??SD_Init_0:
   \   00000070   00100140           DC32     0x40011000
   \   00000074   00140140           DC32     0x40011400
    171          }
    172          /******************************************************************************
    173          * Function Name  : SD_PowerON
    174          * Description    : Enquires cards about their operating voltage and configures 
    175          *                  clock controls.
    176          * Input          : None
    177          * Output         : None
    178          * Return         : SD_Error: SD Card Error code.
    179          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    180          SD_Error SD_PowerON(void)
    181          {
   \                     SD_PowerON:
   \   00000000   2DE9F84F           PUSH     {R3-R11,LR}
    182            SD_Error errorstatus = SD_OK;
    183            u32 response = 0, count = 0;
   \   00000004   0024               MOVS     R4,#+0
    184            bool validvoltage = FALSE;
   \   00000006   A046               MOV      R8,R4
    185            u32 SDType = SD_STD_CAPACITY;
   \   00000008   A246               MOV      R10,R4
    186          
    187            /* Power ON Sequence -------------------------------------------------------*/
    188            /* Configure the SDIO peripheral */
    189            SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV; /* HCLK = 72MHz, SDIOCLK = 72MHz, SDIO_CK = HCLK/(178 + 2) = 400 KHz */
   \   0000000A   ........           LDR.W    R0,??DataTable8  ;; SDIO_InitStructure
   \   0000000E   B221               MOVS     R1,#+178
   \   00000010   0170               STRB     R1,[R0, #+0]
    190            SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
   \   00000012   4460               STR      R4,[R0, #+4]
    191            SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
   \   00000014   8460               STR      R4,[R0, #+8]
    192            SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
   \   00000016   C460               STR      R4,[R0, #+12]
    193            SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
   \   00000018   0461               STR      R4,[R0, #+16]
    194            SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
   \   0000001A   4461               STR      R4,[R0, #+20]
    195            SDIO_Init(&SDIO_InitStructure);
   \   0000001C   ........           BL       SDIO_Init
    196          
    197            /* Set Power State to ON */
    198            SDIO_SetPowerState(SDIO_PowerState_ON);
   \   00000020   0320               MOVS     R0,#+3
   \   00000022   ........           BL       SDIO_SetPowerState
    199          
    200            /* Enable SDIO Clock */
    201            SDIO_ClockCmd(ENABLE);
   \   00000026   0120               MOVS     R0,#+1
   \   00000028   ........           BL       SDIO_ClockCmd
    202          
    203            /* CMD0: GO_IDLE_STATE -------------------------------------------------------*/
    204            /* No CMD response required */
    205            SDIO_CmdInitStructure.SDIO_Argument = 0x0;
   \   0000002C   ........           LDR.W    R7,??DataTable16  ;; TransferError
   \   00000030   FC61               STR      R4,[R7, #+28]
    206            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_GO_IDLE_STATE;
   \   00000032   3C62               STR      R4,[R7, #+32]
    207            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
   \   00000034   7C62               STR      R4,[R7, #+36]
    208            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   \   00000036   BC62               STR      R4,[R7, #+40]
    209            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   \   00000038   4FF48065           MOV      R5,#+1024
   \   0000003C   ........           BL       ??Subroutine45_0
    210            SDIO_SendCommand(&SDIO_CmdInitStructure);
    211          
    212            errorstatus = CmdError();
   \                     ??CrossCallReturnLabel_162:
   \   00000040   42F21079           MOVW     R9,#+10000
   \   00000044   4E46               MOV      R6,R9
   \   00000046   01E0               B.N      ??SD_PowerON_0
   \                     ??SD_PowerON_1:
   \   00000048   761E               SUBS     R6,R6,#+1
   \   0000004A   06D0               BEQ.N    ??SD_PowerON_2
   \                     ??SD_PowerON_0:
   \   0000004C   8020               MOVS     R0,#+128
   \   0000004E   ........           BL       SDIO_GetFlagStatus
   \   00000052   0028               CMP      R0,#+0
   \   00000054   F8D0               BEQ.N    ??SD_PowerON_1
   \   00000056   002E               CMP      R6,#+0
   \   00000058   02D1               BNE.N    ??SD_PowerON_3
   \                     ??SD_PowerON_2:
   \   0000005A   0326               MOVS     R6,#+3
    213          
    214            if (errorstatus != SD_OK)
    215            {
    216              /* CMD Response TimeOut (wait for CMDSENT flag) */
    217              return(errorstatus);
   \                     ??SD_PowerON_4:
   \   0000005C   3046               MOV      R0,R6
   \   0000005E   66E0               B.N      ??SD_PowerON_5
    218            }
   \                     ??SD_PowerON_3:
   \   00000060   40F2FF5B           MOVW     R11,#+1535
   \   00000064   5846               MOV      R0,R11
   \   00000066   ........           BL       SDIO_ClearFlag
    219          
    220            /* CMD8: SEND_IF_COND --------------------------------------------------------*/
    221            /* Send CMD8 to verify SD card interface operating condition */
    222            /* Argument: - [31:12]: Reserved (shall be set to '0')
    223                         - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
    224                         - [7:0]: Check Pattern (recommended 0xAA) */
    225            /* CMD Response: R7 */
    226            SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
   \   0000006A   4FF4D570           MOV      R0,#+426
   \   0000006E   F861               STR      R0,[R7, #+28]
    227            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;
   \   00000070   0820               MOVS     R0,#+8
   \   00000072   ........           BL       ??Subroutine44_0
    228            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    229            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    230            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    231            SDIO_SendCommand(&SDIO_CmdInitStructure);
    232          
    233            errorstatus = CmdResp7Error();
   \                     ??CrossCallReturnLabel_163:
   \   00000076   4846               MOV      R0,R9
   \   00000078   ........           LDR.W    R9,??DataTable18  ;; 0x40018034
   \   0000007C   01E0               B.N      ??SD_PowerON_6
   \                     ??SD_PowerON_7:
   \   0000007E   48B1               CBZ      R0,??SD_PowerON_8
   \   00000080   401E               SUBS     R0,R0,#+1
   \                     ??SD_PowerON_6:
   \   00000082   D9F80010           LDR      R1,[R9, #+0]
   \   00000086   11F0450F           TST      R1,#0x45
   \   0000008A   F8D0               BEQ.N    ??SD_PowerON_7
   \   0000008C   10B1               CBZ      R0,??SD_PowerON_8
   \   0000008E   11F0040F           TST      R1,#0x4
   \   00000092   06D0               BEQ.N    ??SD_PowerON_9
   \                     ??SD_PowerON_8:
   \   00000094   ........           BL       ?Subroutine2
    234          
    235            if (errorstatus == SD_OK)
    236            {
    237              CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0; /* SD Card 2.0 */
    238              SDType = SD_HIGH_CAPACITY;
    239            }
    240            else
    241            {
    242              /* CMD55 */
    243              SDIO_CmdInitStructure.SDIO_Argument = 0x00;
   \                     ??CrossCallReturnLabel_3:
   \   00000098   ........           BL       ?Subroutine9
    244              SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
    245              SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    246              SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    247              SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    248              SDIO_SendCommand(&SDIO_CmdInitStructure);
    249              errorstatus = CmdResp1Error(SDIO_APP_CMD);
   \                     ??CrossCallReturnLabel_165:
   \   0000009C   ........           BL       ?Subroutine31
    250            }
   \                     ??CrossCallReturnLabel_109:
   \   000000A0   09E0               B.N      ??SD_PowerON_10
   \                     ??SD_PowerON_9:
   \   000000A2   11F0400F           TST      R1,#0x40
   \   000000A6   02D0               BEQ.N    ??SD_PowerON_11
   \   000000A8   4020               MOVS     R0,#+64
   \   000000AA   ........           BL       SDIO_ClearFlag
   \                     ??SD_PowerON_11:
   \   000000AE   0120               MOVS     R0,#+1
   \   000000B0   3865               STR      R0,[R7, #+80]
   \   000000B2   4FF0804A           MOV      R10,#+1073741824
    251            /* CMD55 */
    252            SDIO_CmdInitStructure.SDIO_Argument = 0x00;
   \                     ??SD_PowerON_10:
   \   000000B6   ........           BL       ?Subroutine9
    253            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
    254            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    255            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    256            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    257            SDIO_SendCommand(&SDIO_CmdInitStructure);
    258            errorstatus = CmdResp1Error(SDIO_APP_CMD);
   \                     ??CrossCallReturnLabel_164:
   \   000000BA   ........           BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_108:
   \   000000BE   0646               MOV      R6,R0
    259           
    260          
    261            /* If errorstatus is Command TimeOut, it is a MMC card */
    262            /* If errorstatus is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
    263               or SD card 1.x */
    264            if (errorstatus == SD_OK)
   \   000000C0   2A2E               CMP      R6,#+42
   \   000000C2   CBD1               BNE.N    ??SD_PowerON_4
    265            {
    266              /* SD CARD */
    267              /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    268              while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
    269              {
    270          
    271                /* SEND CMD55 APP_CMD with RCA as 0 */
    272                SDIO_CmdInitStructure.SDIO_Argument = 0x00;
   \                     ??SD_PowerON_12:
   \   000000C4   0020               MOVS     R0,#+0
   \   000000C6   F861               STR      R0,[R7, #+28]
    273                SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
   \   000000C8   3720               MOVS     R0,#+55
   \   000000CA   ........           BL       ?Subroutine30
    274                SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    275                SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    276                SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   \                     ??CrossCallReturnLabel_102:
   \   000000CE   ........           BL       ??Subroutine45_0
    277                SDIO_SendCommand(&SDIO_CmdInitStructure);
    278          
    279                errorstatus = CmdResp1Error(SDIO_APP_CMD);
   \                     ??CrossCallReturnLabel_161:
   \   000000D2   ........           BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_107:
   \   000000D6   0646               MOV      R6,R0
    280          
    281                if (errorstatus != SD_OK)
   \   000000D8   2A2E               CMP      R6,#+42
   \   000000DA   BFD1               BNE.N    ??SD_PowerON_4
    282                {
    283                  return(errorstatus);
    284                }
    285                SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
   \   000000DC   1848               LDR.N    R0,??SD_PowerON_13  ;; 0x80100000
   \   000000DE   40EA0A00           ORR      R0,R0,R10
   \   000000E2   F861               STR      R0,[R7, #+28]
    286                SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_OP_COND;
   \   000000E4   2920               MOVS     R0,#+41
   \   000000E6   ........           BL       ?Subroutine30
    287                SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    288                SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    289                SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   \                     ??CrossCallReturnLabel_103:
   \   000000EA   ........           BL       ??Subroutine45_0
    290                SDIO_SendCommand(&SDIO_CmdInitStructure);
    291          
    292                errorstatus = CmdResp3Error();
   \                     ??CrossCallReturnLabel_160:
   \   000000EE   D9F80000           LDR      R0,[R9, #+0]
   \   000000F2   10F0450F           TST      R0,#0x45
   \   000000F6   FAD0               BEQ.N    ??CrossCallReturnLabel_160
   \   000000F8   10F0040F           TST      R0,#0x4
   \   000000FC   02D0               BEQ.N    ??SD_PowerON_14
   \   000000FE   ........           BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_4:
   \   00000102   AAE7               B.N      ??SD_PowerON_2
   \                     ??SD_PowerON_14:
   \   00000104   5846               MOV      R0,R11
   \   00000106   ........           BL       SDIO_ClearFlag
    293                if (errorstatus != SD_OK)
    294                {
    295                  return(errorstatus);
    296                }
    297          
    298                response = SDIO_GetResponse(SDIO_RESP1);
   \   0000010A   ........           BL       ?Subroutine32
    299                validvoltage = (bool) (((response >> 31) == 1) ? 1 : 0);
   \                     ??CrossCallReturnLabel_119:
   \   0000010E   C10F               LSRS     R1,R0,#+31
   \   00000110   0129               CMP      R1,#+1
   \   00000112   01D1               BNE.N    ??SD_PowerON_15
   \   00000114   4FF00108           MOV      R8,#+1
    300                count++;
   \                     ??SD_PowerON_15:
   \   00000118   641C               ADDS     R4,R4,#+1
    301              }
   \   0000011A   4FF6FF71           MOVW     R1,#+65535
   \   0000011E   B8F1000F           CMP      R8,#+0
   \   00000122   01D1               BNE.N    ??SD_PowerON_16
   \   00000124   8C42               CMP      R4,R1
   \   00000126   CDD3               BCC.N    ??SD_PowerON_12
    302              if (count >= SD_MAX_VOLT_TRIAL)
   \                     ??SD_PowerON_16:
   \   00000128   8C42               CMP      R4,R1
   \   0000012A   02D3               BCC.N    ??SD_PowerON_17
    303              {
    304                errorstatus = SD_INVALID_VOLTRANGE;
    305                return(errorstatus);
   \   0000012C   1B20               MOVS     R0,#+27
   \                     ??SD_PowerON_5:
   \   0000012E   BDE8F28F           POP      {R1,R4-R11,PC}
    306              }
    307          
    308              if (response &= SD_HIGH_CAPACITY)
   \                     ??SD_PowerON_17:
   \   00000132   10F0804F           TST      R0,#0x40000000
   \   00000136   91D0               BEQ.N    ??SD_PowerON_4
    309              {
    310                CardType = SDIO_HIGH_CAPACITY_SD_CARD;
   \   00000138   0220               MOVS     R0,#+2
   \   0000013A   3865               STR      R0,[R7, #+80]
   \   0000013C   8EE7               B.N      ??SD_PowerON_4
   \   0000013E   00BF               Nop      
   \                     ??SD_PowerON_13:
   \   00000140   00001080           DC32     0x80100000
    311              }
    312          
    313            }/* else MMC Card */
    314          
    315            return(errorstatus);
    316          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine9:
   \   00000000   FC61               STR      R4,[R7, #+28]
   \   00000002   3720               MOVS     R0,#+55
   \   00000004                      REQUIRE ??Subroutine44_0
   \   00000004                      ;; // Fall through to label ??Subroutine44_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??Subroutine44_0:
   \   00000000   3862               STR      R0,[R7, #+32]
   \   00000002   4020               MOVS     R0,#+64
   \   00000004   7862               STR      R0,[R7, #+36]
   \   00000006   BC62               STR      R4,[R7, #+40]
   \   00000008                      REQUIRE ??Subroutine45_0
   \   00000008                      ;; // Fall through to label ??Subroutine45_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??Subroutine45_0:
   \   00000000   FD62               STR      R5,[R7, #+44]
   \   00000002   00BF               Nop      
   \   00000004                      REQUIRE ??Subroutine46_0
   \   00000004                      ;; // Fall through to label ??Subroutine46_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine46_0:
   \   00000000   07F11C00           ADD      R0,R7,#+28
   \   00000004   ........           B.W      SDIO_SendCommand

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine30:
   \   00000000   3862               STR      R0,[R7, #+32]
   \   00000002   4020               MOVS     R0,#+64
   \   00000004   7862               STR      R0,[R7, #+36]
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   B862               STR      R0,[R7, #+40]
   \   0000000A   7047               BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine31:
   \   00000000   3720               MOVS     R0,#+55
   \   00000002   ....               B.N      CmdResp1Error

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine32:
   \   00000000   0020               MOVS     R0,#+0
   \   00000002   ........           B.W      SDIO_GetResponse

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0420               MOVS     R0,#+4
   \   00000002   ........           B.W      SDIO_ClearFlag
    317          
    318          /*******************************************************************************
    319          * Function Name  : SD_PowerOFF
    320          * Description    : Turns the SDIO output signals off.
    321          * Input          : None
    322          * Output         : None
    323          * Return         : SD_Error: SD Card Error code.
    324          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    325          SD_Error SD_PowerOFF(void)
    326          {
   \                     SD_PowerOFF:
   \   00000000   80B5               PUSH     {R7,LR}
    327            SD_Error errorstatus = SD_OK;
    328          
    329            /* Set Power State to OFF */
    330            SDIO_SetPowerState(SDIO_PowerState_OFF);
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   ........           BL       SDIO_SetPowerState
    331          
    332            return(errorstatus);
   \   00000008   2A20               MOVS     R0,#+42
   \   0000000A   02BD               POP      {R1,PC}          ;; return
    333          }
    334          
    335          /*******************************************************************************
    336          * Function Name  : SD_InitializeCards
    337          * Description    : Intialises all cards or single card as the case may be. 
    338          *                  Card(s) come into standby state.
    339          * Input          : None
    340          * Output         : None
    341          * Return         : SD_Error: SD Card Error code.
    342          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    343          SD_Error SD_InitializeCards(void)
    344          {
   \                     SD_InitializeCards:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    345            SD_Error errorstatus = SD_OK;
    346            u16 rca = 0x01;
   \   00000002   0124               MOVS     R4,#+1
    347          
    348            if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
   \   00000004   ........           BL       SDIO_GetPowerState
   \   00000008   0028               CMP      R0,#+0
   \   0000000A   01D1               BNE.N    ??SD_InitializeCards_0
    349            {
    350              errorstatus = SD_REQUEST_NOT_APPLICABLE;
    351              return(errorstatus);
   \   0000000C   2520               MOVS     R0,#+37
   \   0000000E   70BD               POP      {R4-R6,PC}
    352            }
    353          
    354            if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
   \                     ??SD_InitializeCards_0:
   \   00000010   ........           LDR.W    R5,??DataTable16  ;; TransferError
   \   00000014   286D               LDR      R0,[R5, #+80]
   \   00000016   0428               CMP      R0,#+4
   \   00000018   68D0               BEQ.N    ??SD_InitializeCards_1
    355            {
    356              /* Send CMD2 ALL_SEND_CID */
    357              SDIO_CmdInitStructure.SDIO_Argument = 0x0;
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   E861               STR      R0,[R5, #+28]
    358              SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_ALL_SEND_CID;
   \   0000001E   0220               MOVS     R0,#+2
   \   00000020   2862               STR      R0,[R5, #+32]
    359              SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
   \   00000022   C020               MOVS     R0,#+192
   \   00000024   6862               STR      R0,[R5, #+36]
    360              SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   \   00000026   0020               MOVS     R0,#+0
   \   00000028   A862               STR      R0,[R5, #+40]
    361              SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   \   0000002A   4FF48066           MOV      R6,#+1024
   \   0000002E   ........           BL       ??Subroutine53_0
    362              SDIO_SendCommand(&SDIO_CmdInitStructure);
    363          
    364              errorstatus = CmdResp2Error();
   \                     ??CrossCallReturnLabel_188:
   \   00000032   ........           BL       CmdResp2Error
    365          
    366              if (SD_OK != errorstatus)
   \   00000036   2A28               CMP      R0,#+42
   \   00000038   59D1               BNE.N    ??SD_InitializeCards_2
    367              {
    368                return(errorstatus);
    369              }
    370          
    371              CID_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
   \   0000003A   ........           BL       ?Subroutine32
   \                     ??CrossCallReturnLabel_118:
   \   0000003E   2864               STR      R0,[R5, #+64]
    372              CID_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
   \   00000040   0420               MOVS     R0,#+4
   \   00000042   ........           BL       SDIO_GetResponse
   \   00000046   6864               STR      R0,[R5, #+68]
    373              CID_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
   \   00000048   0820               MOVS     R0,#+8
   \   0000004A   ........           BL       SDIO_GetResponse
   \   0000004E   A864               STR      R0,[R5, #+72]
    374              CID_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
   \   00000050   0C20               MOVS     R0,#+12
   \   00000052   ........           BL       SDIO_GetResponse
   \   00000056   E864               STR      R0,[R5, #+76]
    375            }
    376            if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) ||  (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) ||  (SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType)
    377                ||  (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
   \   00000058   286D               LDR      R0,[R5, #+80]
   \   0000005A   28B1               CBZ      R0,??SD_InitializeCards_3
   \   0000005C   0128               CMP      R0,#+1
   \   0000005E   03D0               BEQ.N    ??SD_InitializeCards_3
   \   00000060   0628               CMP      R0,#+6
   \   00000062   01D0               BEQ.N    ??SD_InitializeCards_3
   \   00000064   0228               CMP      R0,#+2
   \   00000066   23D1               BNE.N    ??SD_InitializeCards_4
    378            {
    379              /* Send CMD3 SET_REL_ADDR with argument 0 */
    380              /* SD Card publishes its RCA. */
    381              SDIO_CmdInitStructure.SDIO_Argument = 0x00;
   \                     ??SD_InitializeCards_3:
   \   00000068   0020               MOVS     R0,#+0
   \   0000006A   E861               STR      R0,[R5, #+28]
    382              SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_REL_ADDR;
   \   0000006C   0320               MOVS     R0,#+3
   \   0000006E   ........           BL       ??Subroutine51_0
    383              SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    384              SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    385              SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    386              SDIO_SendCommand(&SDIO_CmdInitStructure);
    387          
    388              errorstatus = CmdResp6Error(SDIO_SET_REL_ADDR, &rca);
   \                     ??CrossCallReturnLabel_192:
   \   00000072   ........           LDR.W    R0,??DataTable18  ;; 0x40018034
   \   00000076   ........           BL       ?Subroutine33
    389          
    390              if (SD_OK != errorstatus)
    391              {
    392                return(errorstatus);
    393              }
    394            }
   \                     ??CrossCallReturnLabel_123:
   \   0000007A   03D0               BEQ.N    ??SD_InitializeCards_5
   \   0000007C   ........           BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_5:
   \   00000080   0320               MOVS     R0,#+3
   \   00000082   70BD               POP      {R4-R6,PC}
   \                     ??SD_InitializeCards_5:
   \   00000084   11F0010F           TST      R1,#0x1
   \   00000088   04D0               BEQ.N    ??SD_InitializeCards_6
   \   0000008A   0120               MOVS     R0,#+1
   \   0000008C   ........           BL       SDIO_ClearFlag
   \   00000090   2046               MOV      R0,R4
   \   00000092   70BD               POP      {R4-R6,PC}
   \                     ??SD_InitializeCards_6:
   \   00000094   ........           BL       SDIO_GetCommandResponse
   \   00000098   0328               CMP      R0,#+3
   \   0000009A   01D0               BEQ.N    ??SD_InitializeCards_7
   \                     ??SD_InitializeCards_8:
   \   0000009C   1020               MOVS     R0,#+16
   \   0000009E   70BD               POP      {R4-R6,PC}
   \                     ??SD_InitializeCards_7:
   \   000000A0   ........           BL       ?Subroutine18
   \                     ??CrossCallReturnLabel_52:
   \   000000A4   ........           BL       ?Subroutine32
   \                     ??CrossCallReturnLabel_120:
   \   000000A8   10F4604F           TST      R0,#0xE000
   \   000000AC   20D1               BNE.N    ??SD_InitializeCards_9
   \   000000AE   040C               LSRS     R4,R0,#+16
    395          
    396            if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
   \                     ??SD_InitializeCards_4:
   \   000000B0   286D               LDR      R0,[R5, #+80]
   \   000000B2   0428               CMP      R0,#+4
   \   000000B4   1AD0               BEQ.N    ??SD_InitializeCards_1
    397            {
    398              RCA = rca;
   \   000000B6   6C65               STR      R4,[R5, #+84]
    399          
    400              /* Send CMD9 SEND_CSD with argument as card's RCA */
    401              SDIO_CmdInitStructure.SDIO_Argument = (u32)(rca << 16);
   \   000000B8   2004               LSLS     R0,R4,#+16
   \   000000BA   E861               STR      R0,[R5, #+28]
    402              SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_CSD;
   \   000000BC   0920               MOVS     R0,#+9
   \   000000BE   2862               STR      R0,[R5, #+32]
    403              SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
   \   000000C0   C020               MOVS     R0,#+192
   \   000000C2   ........           BL       ??Subroutine52_0
    404              SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    405              SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    406              SDIO_SendCommand(&SDIO_CmdInitStructure);
    407          
    408              errorstatus = CmdResp2Error();
   \                     ??CrossCallReturnLabel_189:
   \   000000C6   ........           BL       CmdResp2Error
    409          
    410              if (SD_OK != errorstatus)
   \   000000CA   2A28               CMP      R0,#+42
   \   000000CC   0FD1               BNE.N    ??SD_InitializeCards_2
    411              {
    412                return(errorstatus);
    413              }
    414          
    415              CSD_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
   \   000000CE   ........           BL       ?Subroutine32
   \                     ??CrossCallReturnLabel_117:
   \   000000D2   2863               STR      R0,[R5, #+48]
    416              CSD_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
   \   000000D4   0420               MOVS     R0,#+4
   \   000000D6   ........           BL       SDIO_GetResponse
   \   000000DA   6863               STR      R0,[R5, #+52]
    417              CSD_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
   \   000000DC   0820               MOVS     R0,#+8
   \   000000DE   ........           BL       SDIO_GetResponse
   \   000000E2   A863               STR      R0,[R5, #+56]
    418              CSD_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
   \   000000E4   0C20               MOVS     R0,#+12
   \   000000E6   ........           BL       SDIO_GetResponse
   \   000000EA   E863               STR      R0,[R5, #+60]
    419            }
    420          
    421            errorstatus = SD_OK; /* All cards get intialized */
    422          
    423            return(errorstatus);
   \                     ??SD_InitializeCards_1:
   \   000000EC   2A20               MOVS     R0,#+42
   \                     ??SD_InitializeCards_2:
   \   000000EE   70BD               POP      {R4-R6,PC}       ;; return
   \                     ??SD_InitializeCards_9:
   \   000000F0   10F4005F           TST      R0,#0x2000
   \   000000F4   01D0               BEQ.N    ??SD_InitializeCards_10
   \   000000F6   1320               MOVS     R0,#+19
   \   000000F8   70BD               POP      {R4-R6,PC}
   \                     ??SD_InitializeCards_10:
   \   000000FA   10F4804F           TST      R0,#0x4000
   \   000000FE   CDD1               BNE.N    ??SD_InitializeCards_8
   \   00000100   10F4004F           TST      R0,#0x8000
   \   00000104   D4D0               BEQ.N    ??SD_InitializeCards_4
   \   00000106   0F20               MOVS     R0,#+15
   \   00000108   70BD               POP      {R4-R6,PC}
    424          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   40F2FF50           MOVW     R0,#+1535
   \   00000004   ........           B.W      SDIO_ClearFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??Subroutine51_0:
   \   00000000   2862               STR      R0,[R5, #+32]
   \   00000002   4020               MOVS     R0,#+64
   \   00000004                      REQUIRE ??Subroutine52_0
   \   00000004                      ;; // Fall through to label ??Subroutine52_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??Subroutine52_0:
   \   00000000   6862               STR      R0,[R5, #+36]
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   A862               STR      R0,[R5, #+40]
   \   00000006   00BF               Nop      
   \   00000008                      REQUIRE ??Subroutine53_0
   \   00000008                      ;; // Fall through to label ??Subroutine53_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??Subroutine53_0:
   \   00000000   EE62               STR      R6,[R5, #+44]
   \   00000002   00BF               Nop      
   \   00000004                      REQUIRE ??Subroutine54_0
   \   00000004                      ;; // Fall through to label ??Subroutine54_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine54_0:
   \   00000000   05F11C00           ADD      R0,R5,#+28
   \   00000004   ........           B.W      SDIO_SendCommand

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine33:
   \   00000000   0168               LDR      R1,[R0, #+0]
   \   00000002   11F0450F           TST      R1,#0x45
   \   00000006   FBD0               BEQ.N    ?Subroutine33
   \   00000008   11F0040F           TST      R1,#0x4
   \   0000000C   7047               BX       LR
    425          
    426          /*******************************************************************************
    427          * Function Name  : SD_GetCardInfo
    428          * Description    : Returns information about specific card.
    429          * Input          : cardinfo : pointer to a SD_CardInfo structure 
    430          *                  that contains all SD card information.
    431          * Output         : None
    432          * Return         : SD_Error: SD Card Error code.
    433          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    434          SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
    435          {
   \                     SD_GetCardInfo:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
    436            SD_Error errorstatus = SD_OK;
    437            u8 tmp = 0;
    438          
    439            cardinfo->CardType = (u8)CardType;
   \   00000002   ........           LDR.W    R1,??DataTable16  ;; TransferError
   \   00000006   0B6D               LDR      R3,[R1, #+80]
   \   00000008   00F14002           ADD      R2,R0,#+64
   \   0000000C   9373               STRB     R3,[R2, #+14]
    440            cardinfo->RCA = (u16)RCA;
   \   0000000E   4C6D               LDR      R4,[R1, #+84]
   \   00000010   9481               STRH     R4,[R2, #+12]
    441          
    442            /* Byte 0 */
    443            tmp = (u8)((CSD_Tab[0] & 0xFF000000) >> 24);
   \   00000012   0C6B               LDR      R4,[R1, #+48]
   \   00000014   240E               LSRS     R4,R4,#+24
    444            cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
   \   00000016   A509               LSRS     R5,R4,#+6
   \   00000018   0570               STRB     R5,[R0, #+0]
    445            cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
   \   0000001A   04F03C05           AND      R5,R4,#0x3C
   \   0000001E   AD08               LSRS     R5,R5,#+2
   \   00000020   4570               STRB     R5,[R0, #+1]
    446            cardinfo->SD_csd.Reserved1 = tmp & 0x03;
   \   00000022   04F00304           AND      R4,R4,#0x3
   \   00000026   8470               STRB     R4,[R0, #+2]
    447          
    448            /* Byte 1 */
    449            tmp = (u8)((CSD_Tab[0] & 0x00FF0000) >> 16);
    450            cardinfo->SD_csd.TAAC = tmp;
   \   00000028   0C6B               LDR      R4,[R1, #+48]
   \   0000002A   240C               LSRS     R4,R4,#+16
   \   0000002C   C470               STRB     R4,[R0, #+3]
    451          
    452            /* Byte 2 */
    453            tmp = (u8)((CSD_Tab[0] & 0x0000FF00) >> 8);
    454            cardinfo->SD_csd.NSAC = tmp;
   \   0000002E   0C6B               LDR      R4,[R1, #+48]
   \   00000030   240A               LSRS     R4,R4,#+8
   \   00000032   0471               STRB     R4,[R0, #+4]
    455          
    456            /* Byte 3 */
    457            tmp = (u8)(CSD_Tab[0] & 0x000000FF);
    458            cardinfo->SD_csd.MaxBusClkFrec = tmp;
   \   00000034   0C6B               LDR      R4,[R1, #+48]
   \   00000036   4471               STRB     R4,[R0, #+5]
    459          
    460            /* Byte 4 */
    461            tmp = (u8)((CSD_Tab[1] & 0xFF000000) >> 24);
    462            cardinfo->SD_csd.CardComdClasses = tmp << 4;
   \   00000038   4C6B               LDR      R4,[R1, #+52]
   \   0000003A   250E               LSRS     R5,R4,#+24
   \   0000003C   2D01               LSLS     R5,R5,#+4
   \   0000003E   C580               STRH     R5,[R0, #+6]
    463          
    464            /* Byte 5 */
    465            tmp = (u8)((CSD_Tab[1] & 0x00FF0000) >> 16);
   \   00000040   2402               LSLS     R4,R4,#+8
   \   00000042   240E               LSRS     R4,R4,#+24
    466            cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
   \   00000044   C588               LDRH     R5,[R0, #+6]
   \   00000046   2609               LSRS     R6,R4,#+4
   \   00000048   3543               ORRS     R5,R6,R5
   \   0000004A   C580               STRH     R5,[R0, #+6]
    467            cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
   \   0000004C   04F00F04           AND      R4,R4,#0xF
   \   00000050   0472               STRB     R4,[R0, #+8]
    468          
    469            /* Byte 6 */
    470            tmp = (u8)((CSD_Tab[1] & 0x0000FF00) >> 8);
   \   00000052   4C6B               LDR      R4,[R1, #+52]
   \   00000054   2404               LSLS     R4,R4,#+16
   \   00000056   240E               LSRS     R4,R4,#+24
    471            cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
   \   00000058   E509               LSRS     R5,R4,#+7
   \   0000005A   4572               STRB     R5,[R0, #+9]
    472            cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
   \   0000005C   04F04005           AND      R5,R4,#0x40
   \   00000060   AD09               LSRS     R5,R5,#+6
   \   00000062   8572               STRB     R5,[R0, #+10]
    473            cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
   \   00000064   04F02005           AND      R5,R4,#0x20
   \   00000068   6D09               LSRS     R5,R5,#+5
   \   0000006A   C572               STRB     R5,[R0, #+11]
    474            cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
   \   0000006C   04F01005           AND      R5,R4,#0x10
   \   00000070   2D09               LSRS     R5,R5,#+4
   \   00000072   0573               STRB     R5,[R0, #+12]
    475            cardinfo->SD_csd.Reserved2 = 0; /* Reserved */
   \   00000074   0025               MOVS     R5,#+0
   \   00000076   4573               STRB     R5,[R0, #+13]
    476          
    477            if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
   \   00000078   0BB1               CBZ      R3,??SD_GetCardInfo_0
   \   0000007A   012B               CMP      R3,#+1
   \   0000007C   3BD1               BNE.N    ??SD_GetCardInfo_1
    478            {
    479              cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
   \                     ??SD_GetCardInfo_0:
   \   0000007E   04F00303           AND      R3,R4,#0x3
   \   00000082   9B02               LSLS     R3,R3,#+10
   \   00000084   0361               STR      R3,[R0, #+16]
    480          
    481              /* Byte 7 */
    482              tmp = (u8)(CSD_Tab[1] & 0x000000FF);
    483              cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
   \   00000086   0369               LDR      R3,[R0, #+16]
   \   00000088   91F83440           LDRB     R4,[R1, #+52]
   \   0000008C   43EA8403           ORR      R3,R3,R4, LSL #+2
   \   00000090   0361               STR      R3,[R0, #+16]
    484          
    485              /* Byte 8 */
    486              tmp = (u8)((CSD_Tab[2] & 0xFF000000) >> 24);
   \   00000092   8B6B               LDR      R3,[R1, #+56]
   \   00000094   1B0E               LSRS     R3,R3,#+24
    487              cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
   \   00000096   0469               LDR      R4,[R0, #+16]
   \   00000098   9D09               LSRS     R5,R3,#+6
   \   0000009A   2C43               ORRS     R4,R5,R4
   \   0000009C   0461               STR      R4,[R0, #+16]
    488          
    489              cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
   \   0000009E   03F03804           AND      R4,R3,#0x38
   \   000000A2   E408               LSRS     R4,R4,#+3
   \   000000A4   0475               STRB     R4,[R0, #+20]
    490              cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
   \   000000A6   03F00703           AND      R3,R3,#0x7
   \   000000AA   4375               STRB     R3,[R0, #+21]
    491          
    492              /* Byte 9 */
    493              tmp = (u8)((CSD_Tab[2] & 0x00FF0000) >> 16);
   \   000000AC   8B6B               LDR      R3,[R1, #+56]
   \   000000AE   1B02               LSLS     R3,R3,#+8
   \   000000B0   1B0E               LSRS     R3,R3,#+24
    494              cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
   \   000000B2   5C09               LSRS     R4,R3,#+5
   \   000000B4   8475               STRB     R4,[R0, #+22]
    495              cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
   \   000000B6   03F01C04           AND      R4,R3,#0x1C
   \   000000BA   A408               LSRS     R4,R4,#+2
   \   000000BC   C475               STRB     R4,[R0, #+23]
    496              cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
   \   000000BE   03F00303           AND      R3,R3,#0x3
   \   000000C2   5B00               LSLS     R3,R3,#+1
   \   000000C4   0376               STRB     R3,[R0, #+24]
    497              /* Byte 10 */
    498              tmp = (u8)((CSD_Tab[2] & 0x0000FF00) >> 8);
   \   000000C6   8B6B               LDR      R3,[R1, #+56]
   \   000000C8   1C0A               LSRS     R4,R3,#+8
   \   000000CA   E4B2               UXTB     R4,R4
    499              cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
   \   000000CC   037E               LDRB     R3,[R0, #+24]
   \   000000CE   43EAD413           ORR      R3,R3,R4, LSR #+7
   \   000000D2   0376               STRB     R3,[R0, #+24]
    500              
    501              cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
   \   000000D4   0369               LDR      R3,[R0, #+16]
    502              cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
   \   000000D6   057E               LDRB     R5,[R0, #+24]
    503              cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
   \   000000D8   0126               MOVS     R6,#+1
   \   000000DA   90F90870           LDRSB    R7,[R0, #+8]
   \   000000DE   BE40               LSLS     R6,R6,R7
   \   000000E0   9660               STR      R6,[R2, #+8]
    504              cardinfo->CardCapacity *= cardinfo->CardBlockSize;
   \   000000E2   5B1C               ADDS     R3,R3,#+1
   \   000000E4   0126               MOVS     R6,#+1
   \   000000E6   AD1C               ADDS     R5,R5,#+2
   \   000000E8   06FA05F5           LSL      R5,R6,R5
   \   000000EC   6B43               MULS     R3,R3,R5
   \   000000EE   9568               LDR      R5,[R2, #+8]
   \   000000F0   6B43               MULS     R3,R3,R5
   \   000000F2   5360               STR      R3,[R2, #+4]
   \   000000F4   1CE0               B.N      ??SD_GetCardInfo_2
    505            }
    506            else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
   \                     ??SD_GetCardInfo_1:
   \   000000F6   022B               CMP      R3,#+2
   \   000000F8   1AD1               BNE.N    ??SD_GetCardInfo_2
    507            {
    508              /* Byte 7 */
    509              tmp = (u8)(CSD_Tab[1] & 0x000000FF);
    510              cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
   \   000000FA   4B6B               LDR      R3,[R1, #+52]
   \   000000FC   03F03F03           AND      R3,R3,#0x3F
   \   00000100   1B04               LSLS     R3,R3,#+16
   \   00000102   0361               STR      R3,[R0, #+16]
    511          
    512              /* Byte 8 */
    513              tmp = (u8)((CSD_Tab[2] & 0xFF000000) >> 24);
    514          
    515              cardinfo->SD_csd.DeviceSize |= (tmp << 8);
   \   00000104   0369               LDR      R3,[R0, #+16]
   \   00000106   8C6B               LDR      R4,[R1, #+56]
   \   00000108   240E               LSRS     R4,R4,#+24
   \   0000010A   43EA0423           ORR      R3,R3,R4, LSL #+8
   \   0000010E   0361               STR      R3,[R0, #+16]
    516          
    517              /* Byte 9 */
    518              tmp = (u8)((CSD_Tab[2] & 0x00FF0000) >> 16);
    519          
    520              cardinfo->SD_csd.DeviceSize |= (tmp);
   \   00000110   0369               LDR      R3,[R0, #+16]
   \   00000112   8C6B               LDR      R4,[R1, #+56]
   \   00000114   2402               LSLS     R4,R4,#+8
   \   00000116   240E               LSRS     R4,R4,#+24
   \   00000118   2343               ORRS     R3,R4,R3
   \   0000011A   0361               STR      R3,[R0, #+16]
    521          
    522              /* Byte 10 */
    523              tmp = (u8)((CSD_Tab[2] & 0x0000FF00) >> 8);
   \   0000011C   8B6B               LDR      R3,[R1, #+56]
   \   0000011E   1C0A               LSRS     R4,R3,#+8
   \   00000120   E4B2               UXTB     R4,R4
    524              
    525              cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
   \   00000122   0369               LDR      R3,[R0, #+16]
   \   00000124   5B1C               ADDS     R3,R3,#+1
   \   00000126   DB04               LSLS     R3,R3,#+19
   \   00000128   5360               STR      R3,[R2, #+4]
    526              cardinfo->CardBlockSize = 512;    
   \   0000012A   4FF40073           MOV      R3,#+512
   \   0000012E   9360               STR      R3,[R2, #+8]
    527            }
    528          
    529          
    530            cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
   \                     ??SD_GetCardInfo_2:
   \   00000130   04F04003           AND      R3,R4,#0x40
   \   00000134   9B09               LSRS     R3,R3,#+6
   \   00000136   4376               STRB     R3,[R0, #+25]
    531            cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
   \   00000138   04F03F03           AND      R3,R4,#0x3F
   \   0000013C   5B00               LSLS     R3,R3,#+1
   \   0000013E   8376               STRB     R3,[R0, #+26]
    532          
    533            /* Byte 11 */
    534            tmp = (u8)(CSD_Tab[2] & 0x000000FF);
   \   00000140   91F83830           LDRB     R3,[R1, #+56]
    535            cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
   \   00000144   847E               LDRB     R4,[R0, #+26]
   \   00000146   44EAD314           ORR      R4,R4,R3, LSR #+7
   \   0000014A   8476               STRB     R4,[R0, #+26]
    536            cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
   \   0000014C   03F07F03           AND      R3,R3,#0x7F
   \   00000150   C376               STRB     R3,[R0, #+27]
    537          
    538            /* Byte 12 */
    539            tmp = (u8)((CSD_Tab[3] & 0xFF000000) >> 24);
   \   00000152   CB6B               LDR      R3,[R1, #+60]
   \   00000154   1B0E               LSRS     R3,R3,#+24
    540            cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
   \   00000156   DC09               LSRS     R4,R3,#+7
   \   00000158   0477               STRB     R4,[R0, #+28]
    541            cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
   \   0000015A   03F06004           AND      R4,R3,#0x60
   \   0000015E   6409               LSRS     R4,R4,#+5
   \   00000160   4477               STRB     R4,[R0, #+29]
    542            cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
   \   00000162   03F01C04           AND      R4,R3,#0x1C
   \   00000166   A408               LSRS     R4,R4,#+2
   \   00000168   8477               STRB     R4,[R0, #+30]
    543            cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
   \   0000016A   03F00303           AND      R3,R3,#0x3
   \   0000016E   9B00               LSLS     R3,R3,#+2
   \   00000170   C377               STRB     R3,[R0, #+31]
    544          
    545            /* Byte 13 */
    546            tmp = (u8)((CSD_Tab[3] & 0x00FF0000) >> 16);
   \   00000172   CB6B               LDR      R3,[R1, #+60]
   \   00000174   1C0C               LSRS     R4,R3,#+16
   \   00000176   E4B2               UXTB     R4,R4
    547            cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
   \   00000178   C37F               LDRB     R3,[R0, #+31]
   \   0000017A   43EA9413           ORR      R3,R3,R4, LSR #+6
   \   0000017E   C377               STRB     R3,[R0, #+31]
    548            cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
   \   00000180   04F02003           AND      R3,R4,#0x20
   \   00000184   5B09               LSRS     R3,R3,#+5
   \   00000186   80F82030           STRB     R3,[R0, #+32]
    549            cardinfo->SD_csd.Reserved3 = 0;
   \   0000018A   00F12003           ADD      R3,R0,#+32
   \   0000018E   0025               MOVS     R5,#+0
   \   00000190   5D70               STRB     R5,[R3, #+1]
    550            cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
   \   00000192   04F00104           AND      R4,R4,#0x1
   \   00000196   9C70               STRB     R4,[R3, #+2]
    551          
    552            /* Byte 14 */
    553            tmp = (u8)((CSD_Tab[3] & 0x0000FF00) >> 8);
   \   00000198   CC6B               LDR      R4,[R1, #+60]
   \   0000019A   2404               LSLS     R4,R4,#+16
   \   0000019C   240E               LSRS     R4,R4,#+24
    554            cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
   \   0000019E   E509               LSRS     R5,R4,#+7
   \   000001A0   DD70               STRB     R5,[R3, #+3]
    555            cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
   \   000001A2   04F04005           AND      R5,R4,#0x40
   \   000001A6   AD09               LSRS     R5,R5,#+6
   \   000001A8   1D71               STRB     R5,[R3, #+4]
    556            cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
   \   000001AA   04F02005           AND      R5,R4,#0x20
   \   000001AE   6D09               LSRS     R5,R5,#+5
   \   000001B0   5D71               STRB     R5,[R3, #+5]
    557            cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
   \   000001B2   04F01005           AND      R5,R4,#0x10
   \   000001B6   2D09               LSRS     R5,R5,#+4
   \   000001B8   9D71               STRB     R5,[R3, #+6]
    558            cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
   \   000001BA   04F00C05           AND      R5,R4,#0xC
   \   000001BE   AD08               LSRS     R5,R5,#+2
   \   000001C0   DD71               STRB     R5,[R3, #+7]
    559            cardinfo->SD_csd.ECC = (tmp & 0x03);
   \   000001C2   04F00304           AND      R4,R4,#0x3
   \   000001C6   1C72               STRB     R4,[R3, #+8]
    560          
    561            /* Byte 15 */
    562            tmp = (u8)(CSD_Tab[3] & 0x000000FF);
    563            cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
   \   000001C8   CC6B               LDR      R4,[R1, #+60]
   \   000001CA   2406               LSLS     R4,R4,#+24
   \   000001CC   640E               LSRS     R4,R4,#+25
   \   000001CE   5C72               STRB     R4,[R3, #+9]
    564            cardinfo->SD_csd.Reserved4 = 1;
   \   000001D0   0124               MOVS     R4,#+1
   \   000001D2   9C72               STRB     R4,[R3, #+10]
    565          
    566          
    567            /* Byte 0 */
    568            tmp = (u8)((CID_Tab[0] & 0xFF000000) >> 24);
    569            cardinfo->SD_cid.ManufacturerID = tmp;
   \   000001D4   0C6C               LDR      R4,[R1, #+64]
   \   000001D6   240E               LSRS     R4,R4,#+24
   \   000001D8   1C73               STRB     R4,[R3, #+12]
    570          
    571            /* Byte 1 */
    572            tmp = (u8)((CID_Tab[0] & 0x00FF0000) >> 16);
    573            cardinfo->SD_cid.OEM_AppliID = tmp << 8;
   \   000001DA   0C6C               LDR      R4,[R1, #+64]
   \   000001DC   250C               LSRS     R5,R4,#+16
   \   000001DE   2D06               LSLS     R5,R5,#+24
   \   000001E0   2D0C               LSRS     R5,R5,#+16
   \   000001E2   DD81               STRH     R5,[R3, #+14]
    574          
    575            /* Byte 2 */
    576            tmp = (u8)((CID_Tab[0] & 0x000000FF00) >> 8);
    577            cardinfo->SD_cid.OEM_AppliID |= tmp;
   \   000001E4   DD89               LDRH     R5,[R3, #+14]
   \   000001E6   260A               LSRS     R6,R4,#+8
   \   000001E8   F6B2               UXTB     R6,R6
   \   000001EA   3543               ORRS     R5,R6,R5
   \   000001EC   DD81               STRH     R5,[R3, #+14]
    578          
    579            /* Byte 3 */
    580            tmp = (u8)(CID_Tab[0] & 0x000000FF);
    581            cardinfo->SD_cid.ProdName1 = tmp << 24;
   \   000001EE   E4B2               UXTB     R4,R4
   \   000001F0   2406               LSLS     R4,R4,#+24
   \   000001F2   1C61               STR      R4,[R3, #+16]
    582          
    583            /* Byte 4 */
    584            tmp = (u8)((CID_Tab[1] & 0xFF000000) >> 24);
    585            cardinfo->SD_cid.ProdName1 |= tmp << 16;
   \   000001F4   1C69               LDR      R4,[R3, #+16]
   \   000001F6   4D6C               LDR      R5,[R1, #+68]
   \   000001F8   2D0E               LSRS     R5,R5,#+24
   \   000001FA   44EA0544           ORR      R4,R4,R5, LSL #+16
   \   000001FE   1C61               STR      R4,[R3, #+16]
    586          
    587            /* Byte 5 */
    588            tmp = (u8)((CID_Tab[1] & 0x00FF0000) >> 16);
    589            cardinfo->SD_cid.ProdName1 |= tmp << 8;
   \   00000200   1C69               LDR      R4,[R3, #+16]
   \   00000202   4D6C               LDR      R5,[R1, #+68]
   \   00000204   2D02               LSLS     R5,R5,#+8
   \   00000206   2D0E               LSRS     R5,R5,#+24
   \   00000208   44EA0524           ORR      R4,R4,R5, LSL #+8
   \   0000020C   1C61               STR      R4,[R3, #+16]
    590          
    591            /* Byte 6 */
    592            tmp = (u8)((CID_Tab[1] & 0x0000FF00) >> 8);
    593            cardinfo->SD_cid.ProdName1 |= tmp;
   \   0000020E   1C69               LDR      R4,[R3, #+16]
   \   00000210   4D6C               LDR      R5,[R1, #+68]
   \   00000212   2D04               LSLS     R5,R5,#+16
   \   00000214   2D0E               LSRS     R5,R5,#+24
   \   00000216   2C43               ORRS     R4,R5,R4
   \   00000218   1C61               STR      R4,[R3, #+16]
    594          
    595            /* Byte 7 */
    596            tmp = (u8)(CID_Tab[1] & 0x000000FF);
    597            cardinfo->SD_cid.ProdName2 = tmp;
   \   0000021A   4C6C               LDR      R4,[R1, #+68]
   \   0000021C   1C75               STRB     R4,[R3, #+20]
    598          
    599            /* Byte 8 */
    600            tmp = (u8)((CID_Tab[2] & 0xFF000000) >> 24);
    601            cardinfo->SD_cid.ProdRev = tmp;
   \   0000021E   8C6C               LDR      R4,[R1, #+72]
   \   00000220   240E               LSRS     R4,R4,#+24
   \   00000222   5C75               STRB     R4,[R3, #+21]
    602          
    603            /* Byte 9 */
    604            tmp = (u8)((CID_Tab[2] & 0x00FF0000) >> 16);
    605            cardinfo->SD_cid.ProdSN = tmp << 24;
   \   00000224   8C6C               LDR      R4,[R1, #+72]
   \   00000226   2402               LSLS     R4,R4,#+8
   \   00000228   240E               LSRS     R4,R4,#+24
   \   0000022A   2406               LSLS     R4,R4,#+24
   \   0000022C   9C61               STR      R4,[R3, #+24]
    606          
    607            /* Byte 10 */
    608            tmp = (u8)((CID_Tab[2] & 0x0000FF00) >> 8);
    609            cardinfo->SD_cid.ProdSN |= tmp << 16;
   \   0000022E   9C69               LDR      R4,[R3, #+24]
   \   00000230   8D6C               LDR      R5,[R1, #+72]
   \   00000232   2D04               LSLS     R5,R5,#+16
   \   00000234   2D0E               LSRS     R5,R5,#+24
   \   00000236   44EA0544           ORR      R4,R4,R5, LSL #+16
   \   0000023A   9C61               STR      R4,[R3, #+24]
    610          
    611            /* Byte 11 */
    612            tmp = (u8)(CID_Tab[2] & 0x000000FF);
    613            cardinfo->SD_cid.ProdSN |= tmp << 8;
   \   0000023C   9C69               LDR      R4,[R3, #+24]
   \   0000023E   91F84850           LDRB     R5,[R1, #+72]
   \   00000242   44EA0524           ORR      R4,R4,R5, LSL #+8
   \   00000246   9C61               STR      R4,[R3, #+24]
    614          
    615            /* Byte 12 */
    616            tmp = (u8)((CID_Tab[3] & 0xFF000000) >> 24);
    617            cardinfo->SD_cid.ProdSN |= tmp;
   \   00000248   9C69               LDR      R4,[R3, #+24]
   \   0000024A   CD6C               LDR      R5,[R1, #+76]
   \   0000024C   2D0E               LSRS     R5,R5,#+24
   \   0000024E   2C43               ORRS     R4,R5,R4
   \   00000250   9C61               STR      R4,[R3, #+24]
    618          
    619            /* Byte 13 */
    620            tmp = (u8)((CID_Tab[3] & 0x00FF0000) >> 16);
   \   00000252   CC6C               LDR      R4,[R1, #+76]
   \   00000254   2402               LSLS     R4,R4,#+8
   \   00000256   240E               LSRS     R4,R4,#+24
    621            cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
   \   00000258   1D7F               LDRB     R5,[R3, #+28]
   \   0000025A   45EA1415           ORR      R5,R5,R4, LSR #+4
   \   0000025E   1D77               STRB     R5,[R3, #+28]
    622            cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
   \   00000260   04F00F04           AND      R4,R4,#0xF
   \   00000264   2402               LSLS     R4,R4,#+8
   \   00000266   DC83               STRH     R4,[R3, #+30]
    623          
    624            /* Byte 14 */
    625            tmp = (u8)((CID_Tab[3] & 0x0000FF00) >> 8);
    626            cardinfo->SD_cid.ManufactDate |= tmp;
   \   00000268   C96C               LDR      R1,[R1, #+76]
   \   0000026A   DC8B               LDRH     R4,[R3, #+30]
   \   0000026C   0D0A               LSRS     R5,R1,#+8
   \   0000026E   EDB2               UXTB     R5,R5
   \   00000270   2C43               ORRS     R4,R5,R4
   \   00000272   DC83               STRH     R4,[R3, #+30]
    627          
    628            /* Byte 15 */
    629            tmp = (u8)(CID_Tab[3] & 0x000000FF);
    630            cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
   \   00000274   0906               LSLS     R1,R1,#+24
   \   00000276   490E               LSRS     R1,R1,#+25
   \   00000278   80F84010           STRB     R1,[R0, #+64]
    631            cardinfo->SD_cid.Reserved2 = 1;
   \   0000027C   0120               MOVS     R0,#+1
   \   0000027E   5070               STRB     R0,[R2, #+1]
    632            
    633            return(errorstatus);
   \   00000280   2A20               MOVS     R0,#+42
   \   00000282   F2BD               POP      {R1,R4-R7,PC}    ;; return
    634          }
    635          
    636          /*******************************************************************************
    637          * Function Name  : SD_EnableWideBusOperation
    638          * Description    : Enables wide bus opeartion for the requeseted card if 
    639          *                  supported by card.
    640          * Input          : WideMode: Specifies the SD card wide bus mode. 
    641          *                     This parameter can be one of the following values:
    642          *                       - SDIO_BusWide_8b: 8-bit data transfer (Only for MMC)
    643          *                       - SDIO_BusWide_4b: 4-bit data transfer
    644          *                       - SDIO_BusWide_1b: 1-bit data transfer
    645          * Output         : None
    646          * Return         : SD_Error: SD Card Error code.
    647          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    648          SD_Error SD_EnableWideBusOperation(u32 WideMode)
    649          {
   \                     SD_EnableWideBusOperation:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    650            SD_Error errorstatus = SD_OK;
   \   00000002   2A24               MOVS     R4,#+42
   \   00000004   ........           LDR.W    R1,??DataTable16  ;; TransferError
   \   00000008   096D               LDR      R1,[R1, #+80]
   \   0000000A   0329               CMP      R1,#+3
   \   0000000C   01D1               BNE.N    ??SD_EnableWideBusOperation_0
    651          
    652            /* MMC Card doesn't support this feature */
    653            if (SDIO_MULTIMEDIA_CARD == CardType)
    654            {
    655              errorstatus = SD_UNSUPPORTED_FEATURE;
    656              return(errorstatus);
   \                     ??SD_EnableWideBusOperation_1:
   \   0000000E   2720               MOVS     R0,#+39
   \   00000010   32BD               POP      {R1,R4,R5,PC}
    657            }
    658            else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
   \                     ??SD_EnableWideBusOperation_0:
   \   00000012   19B1               CBZ      R1,??SD_EnableWideBusOperation_2
   \   00000014   0129               CMP      R1,#+1
   \   00000016   01D0               BEQ.N    ??SD_EnableWideBusOperation_2
   \   00000018   0229               CMP      R1,#+2
   \   0000001A   20D1               BNE.N    ??SD_EnableWideBusOperation_3
    659            {
    660              if (SDIO_BusWide_8b == WideMode)
   \                     ??SD_EnableWideBusOperation_2:
   \   0000001C   B0F5805F           CMP      R0,#+4096
   \   00000020   F5D0               BEQ.N    ??SD_EnableWideBusOperation_1
    661              {
    662                errorstatus = SD_UNSUPPORTED_FEATURE;
    663                return(errorstatus);
    664              }
    665              else if (SDIO_BusWide_4b == WideMode)
   \   00000022   ....               LDR.N    R5,??DataTable8  ;; SDIO_InitStructure
   \   00000024   B0F5006F           CMP      R0,#+2048
   \   00000028   0CD1               BNE.N    ??SD_EnableWideBusOperation_4
    666              {
    667                errorstatus = SDEnWideBus(ENABLE);
   \   0000002A   0120               MOVS     R0,#+1
   \   0000002C   ........           BL       SDEnWideBus
   \   00000030   0446               MOV      R4,R0
    668          
    669                if (SD_OK == errorstatus)
   \   00000032   2A28               CMP      R0,#+42
   \   00000034   13D1               BNE.N    ??SD_EnableWideBusOperation_3
    670                {
    671                  /* Configure the SDIO peripheral */
    672                  SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
   \   00000036   ........           BL       ?Subroutine13
    673                  SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
    674                  SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
    675                  SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
    676                  SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_4b;
   \                     ??CrossCallReturnLabel_35:
   \   0000003A   4FF40060           MOV      R0,#+2048
   \   0000003E   2861               STR      R0,[R5, #+16]
    677                  SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
   \   00000040   0020               MOVS     R0,#+0
   \   00000042   08E0               B.N      ??SD_EnableWideBusOperation_5
    678                  SDIO_Init(&SDIO_InitStructure);
    679                }
    680              }
    681              else
    682              {
    683                errorstatus = SDEnWideBus(DISABLE);
   \                     ??SD_EnableWideBusOperation_4:
   \   00000044   0020               MOVS     R0,#+0
   \   00000046   ........           BL       SDEnWideBus
   \   0000004A   0446               MOV      R4,R0
    684          
    685                if (SD_OK == errorstatus)
   \   0000004C   2A28               CMP      R0,#+42
   \   0000004E   06D1               BNE.N    ??SD_EnableWideBusOperation_3
    686                {
    687                  /* Configure the SDIO peripheral */
    688                  SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
   \   00000050   ........           BL       ?Subroutine13
    689                  SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
    690                  SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
    691                  SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
    692                  SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
   \                     ??CrossCallReturnLabel_36:
   \   00000054   2861               STR      R0,[R5, #+16]
    693                  SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
   \                     ??SD_EnableWideBusOperation_5:
   \   00000056   6861               STR      R0,[R5, #+20]
    694                  SDIO_Init(&SDIO_InitStructure);
   \   00000058   2846               MOV      R0,R5
   \   0000005A   ........           BL       SDIO_Init
    695                }
    696              }
    697            }
    698          
    699            return(errorstatus);
   \                     ??SD_EnableWideBusOperation_3:
   \   0000005E   2046               MOV      R0,R4
   \   00000060   32BD               POP      {R1,R4,R5,PC}    ;; return
    700          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   0120               MOVS     R0,#+1
   \   00000002   2870               STRB     R0,[R5, #+0]
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   6860               STR      R0,[R5, #+4]
   \   00000008   A860               STR      R0,[R5, #+8]
   \   0000000A   E860               STR      R0,[R5, #+12]
   \   0000000C   7047               BX       LR
    701          
    702          /*******************************************************************************
    703          * Function Name  : SD_SetDeviceMode
    704          * Description    : Sets device mode whether to operate in Polling, Interrupt or
    705          *                  DMA mode.
    706          * Input          : Mode: Specifies the Data Transfer mode.
    707          *                     This parameter can be one of the following values:
    708          *                       - SD_DMA_MODE: Data transfer using DMA.
    709          *                       - SD_INTERRUPT_MODE: Data transfer using interrupts.
    710          *                       - SD_POLLING_MODE: Data transfer using flags.
    711          * Output         : None
    712          * Return         : SD_Error: SD Card Error code.
    713          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    714          SD_Error SD_SetDeviceMode(u32 Mode)
    715          {
   \                     SD_SetDeviceMode:
   \   00000000   0146               MOV      R1,R0
    716            SD_Error errorstatus = SD_OK;
   \   00000002   2A20               MOVS     R0,#+42
    717          
    718            if ((Mode == SD_DMA_MODE) || (Mode == SD_INTERRUPT_MODE) || (Mode == SD_POLLING_MODE))
   \   00000004   0029               CMP      R1,#+0
   \   00000006   03D0               BEQ.N    ??SD_SetDeviceMode_0
   \   00000008   0129               CMP      R1,#+1
   \   0000000A   01D0               BEQ.N    ??SD_SetDeviceMode_0
   \   0000000C   0229               CMP      R1,#+2
   \   0000000E   03D1               BNE.N    ??SD_SetDeviceMode_1
    719            {
    720              DeviceMode = Mode;
   \                     ??SD_SetDeviceMode_0:
   \   00000010   ........           LDR.W    R2,??DataTable16  ;; TransferError
   \   00000014   9165               STR      R1,[R2, #+88]
   \   00000016   7047               BX       LR
    721            }
    722            else
    723            {
    724              errorstatus = SD_INVALID_PARAMETER;
   \                     ??SD_SetDeviceMode_1:
   \   00000018   2620               MOVS     R0,#+38
    725            }
    726            return(errorstatus);
   \   0000001A   7047               BX       LR               ;; return
    727          
    728          }
    729          
    730          /*******************************************************************************
    731          * Function Name  : SD_SelectDeselect
    732          * Description    : Selects od Deselects the corresponding card.
    733          * Input          : addr: Address of the Card to be selected.
    734          * Output         : None
    735          * Return         : SD_Error: SD Card Error code.
    736          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    737          SD_Error SD_SelectDeselect(u32 addr)
    738          {
   \                     SD_SelectDeselect:
   \   00000000   80B5               PUSH     {R7,LR}
    739            SD_Error errorstatus = SD_OK;
    740          
    741            /* Send CMD7 SDIO_SEL_DESEL_CARD */
    742            SDIO_CmdInitStructure.SDIO_Argument =  addr;
   \   00000002   ........           LDR.W    R1,??DataTable16  ;; TransferError
   \   00000006   C861               STR      R0,[R1, #+28]
    743            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEL_DESEL_CARD;
   \   00000008   0720               MOVS     R0,#+7
   \   0000000A   0862               STR      R0,[R1, #+32]
    744            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   \   0000000C   4020               MOVS     R0,#+64
   \   0000000E   4862               STR      R0,[R1, #+36]
    745            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   8862               STR      R0,[R1, #+40]
    746            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   \   00000014   4FF48060           MOV      R0,#+1024
   \   00000018   C862               STR      R0,[R1, #+44]
    747            SDIO_SendCommand(&SDIO_CmdInitStructure);
   \   0000001A   01F11C00           ADD      R0,R1,#+28
   \   0000001E   ........           BL       SDIO_SendCommand
    748          
    749            errorstatus = CmdResp1Error(SDIO_SEL_DESEL_CARD);
    750          
    751            return(errorstatus);
   \   00000022   0720               MOVS     R0,#+7
   \   00000024                      REQUIRE ?Subroutine1
   \   00000024                      ;; // Fall through to label ?Subroutine1
    752          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   BDE80240           POP      {R1,LR}
   \   00000004   ........           B.W      CmdResp1Error
    753          
    754          /*******************************************************************************
    755          * Function Name  : SD_ReadBlock
    756          * Description    : Allows to read one block from a specified address in a card.
    757          * Input          : - addr: Address from where data are to be read.
    758          *                  - readbuff: pointer to the buffer that will contain the 
    759          *                    received data
    760          *                  - blocksize: the SD card Data block size.
    761          * Output         : None
    762          * Return         : SD_Error: SD Card Error code.
    763          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    764          SD_Error SD_ReadBlock(u32 addr, u32 *readbuff, u16 BlockSize)
    765          {
   \                     SD_ReadBlock:
   \   00000000   2DE9F84F           PUSH     {R3-R11,LR}
   \   00000004   0446               MOV      R4,R0
   \   00000006   0D46               MOV      R5,R1
   \   00000008   1746               MOV      R7,R2
    766            SD_Error errorstatus = SD_OK;
    767            u32 count = 0, *tempbuff = readbuff;
   \   0000000A   A946               MOV      R9,R5
    768            u8 power = 0;
    769          
    770            if (NULL == readbuff)
   \   0000000C   002D               CMP      R5,#+0
   \   0000000E   01D1               BNE.N    ??SD_ReadBlock_0
    771            {
    772              errorstatus = SD_INVALID_PARAMETER;
    773              return(errorstatus);
   \                     ??SD_ReadBlock_1:
   \   00000010   2620               MOVS     R0,#+38
   \   00000012   1AE0               B.N      ??SD_ReadBlock_2
    774            }
    775          
    776            TransferError = SD_OK;
   \                     ??SD_ReadBlock_0:
   \   00000014   ........           LDR.W    R6,??DataTable16  ;; TransferError
   \   00000018   2A20               MOVS     R0,#+42
   \   0000001A   3070               STRB     R0,[R6, #+0]
    777            TransferEnd = 0;
   \   0000001C   0020               MOVS     R0,#+0
   \   0000001E   F066               STR      R0,[R6, #+108]
    778            TotalNumberOfBytes = 0;
   \   00000020   F065               STR      R0,[R6, #+92]
   \   00000022   ........           BL       ?Subroutine38
    779          
    780            /* Clear all DPSM configuration */
    781            SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
    782            SDIO_DataInitStructure.SDIO_DataLength = 0;
   \                     ??CrossCallReturnLabel_139:
   \   00000026   0020               MOVS     R0,#+0
   \   00000028   B060               STR      R0,[R6, #+8]
    783            SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
   \   0000002A   F060               STR      R0,[R6, #+12]
    784            SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
   \   0000002C   3061               STR      R0,[R6, #+16]
    785            SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
   \   0000002E   7061               STR      R0,[R6, #+20]
    786            SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
   \   00000030   B061               STR      R0,[R6, #+24]
    787            SDIO_DataConfig(&SDIO_DataInitStructure);
   \   00000032   301D               ADDS     R0,R6,#+4
   \   00000034   ........           BL       SDIO_DataConfig
    788            SDIO_DMACmd(DISABLE);
   \   00000038   0020               MOVS     R0,#+0
   \   0000003A   ........           BL       SDIO_DMACmd
    789          
    790            if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
   \   0000003E   ........           BL       ?Subroutine32
   \                     ??CrossCallReturnLabel_116:
   \   00000042   10F0007F           TST      R0,#0x2000000
   \   00000046   02D0               BEQ.N    ??SD_ReadBlock_3
    791            {
    792              errorstatus = SD_LOCK_UNLOCK_FAILED;
    793              return(errorstatus);
   \   00000048   0E20               MOVS     R0,#+14
   \                     ??SD_ReadBlock_2:
   \   0000004A   BDE8F28F           POP      {R1,R4-R11,PC}
    794            }
    795            
    796            if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
   \                     ??SD_ReadBlock_3:
   \   0000004E   306D               LDR      R0,[R6, #+80]
   \   00000050   0228               CMP      R0,#+2
   \   00000052   03D1               BNE.N    ??SD_ReadBlock_4
    797            {
    798              BlockSize = 512;
   \   00000054   4FF40077           MOV      R7,#+512
    799              addr /= 512;
   \   00000058   640A               LSRS     R4,R4,#+9
   \   0000005A   05E0               B.N      ??SD_ReadBlock_5
    800            }
    801            if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
   \                     ??SD_ReadBlock_4:
   \   0000005C   002F               CMP      R7,#+0
   \   0000005E   D7D0               BEQ.N    ??SD_ReadBlock_1
   \   00000060   40F60100           MOVW     R0,#+2049
   \   00000064   8742               CMP      R7,R0
   \   00000066   D3D2               BCS.N    ??SD_ReadBlock_1
   \                     ??SD_ReadBlock_5:
   \   00000068   781E               SUBS     R0,R7,#+1
   \   0000006A   0742               TST      R7,R0
   \   0000006C   D0D1               BNE.N    ??SD_ReadBlock_1
    802            {
    803              power = convert_from_bytes_to_power_of_two(BlockSize);
   \   0000006E   3846               MOV      R0,R7
   \   00000070   ........           BL       convert_from_bytes_to_power_of_two
   \   00000074   8246               MOV      R10,R0
    804          
    805              /* Set Block Size for Card */
    806              SDIO_CmdInitStructure.SDIO_Argument = (u32) BlockSize;
   \   00000076   F761               STR      R7,[R6, #+28]
    807              SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
   \   00000078   ........           BL       ?Subroutine39
    808              SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    809              SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   \                     ??CrossCallReturnLabel_144:
   \   0000007C   0020               MOVS     R0,#+0
   \   0000007E   B062               STR      R0,[R6, #+40]
    810              SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   \   00000080   4FF4806B           MOV      R11,#+1024
   \   00000084   ........           BL       ??Subroutine48_0
    811              SDIO_SendCommand(&SDIO_CmdInitStructure);
    812          
    813              errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
   \                     ??CrossCallReturnLabel_174:
   \   00000088   ........           BL       ?Subroutine34
   \                     ??CrossCallReturnLabel_128:
   \   0000008C   8046               MOV      R8,R0
    814          
    815              if (SD_OK != errorstatus)
   \   0000008E   2A28               CMP      R0,#+42
   \   00000090   01D0               BEQ.N    ??SD_ReadBlock_6
    816              {
    817                return(errorstatus);
   \                     ??SD_ReadBlock_7:
   \   00000092   4046               MOV      R0,R8
   \   00000094   D9E7               B.N      ??SD_ReadBlock_2
    818              }
    819            }
    820            else
    821            {
    822              errorstatus = SD_INVALID_PARAMETER;
    823              return(errorstatus);
    824            }
    825          
    826            SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
   \                     ??SD_ReadBlock_6:
   \   00000096   ........           BL       ?Subroutine38
    827            SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
   \                     ??CrossCallReturnLabel_140:
   \   0000009A   B760               STR      R7,[R6, #+8]
    828            SDIO_DataInitStructure.SDIO_DataBlockSize = (u32) power << 4;
   \   0000009C   4FEA0A10           LSL      R0,R10,#+4
   \   000000A0   F060               STR      R0,[R6, #+12]
    829            SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
   \   000000A2   0220               MOVS     R0,#+2
   \   000000A4   3061               STR      R0,[R6, #+16]
    830            SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
   \   000000A6   0020               MOVS     R0,#+0
   \   000000A8   7061               STR      R0,[R6, #+20]
    831            SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
   \   000000AA   ........           BL       ?Subroutine12
    832            SDIO_DataConfig(&SDIO_DataInitStructure);
    833          
    834            TotalNumberOfBytes = BlockSize;
   \                     ??CrossCallReturnLabel_34:
   \   000000AE   F765               STR      R7,[R6, #+92]
    835            StopCondition = 0;
   \   000000B0   0020               MOVS     R0,#+0
   \   000000B2   3066               STR      R0,[R6, #+96]
    836            DestBuffer = readbuff;
   \   000000B4   B566               STR      R5,[R6, #+104]
    837          
    838            /* Send CMD17 READ_SINGLE_BLOCK */
    839            SDIO_CmdInitStructure.SDIO_Argument = (u32)addr;
   \   000000B6   F461               STR      R4,[R6, #+28]
    840            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_SINGLE_BLOCK;
   \   000000B8   1120               MOVS     R0,#+17
   \   000000BA   3062               STR      R0,[R6, #+32]
    841            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   \   000000BC   4020               MOVS     R0,#+64
   \   000000BE   7062               STR      R0,[R6, #+36]
    842            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   \   000000C0   0020               MOVS     R0,#+0
   \   000000C2   B062               STR      R0,[R6, #+40]
    843            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   \   000000C4   ........           BL       ??Subroutine48_0
    844            SDIO_SendCommand(&SDIO_CmdInitStructure);
    845          
    846            errorstatus = CmdResp1Error(SDIO_READ_SINGLE_BLOCK);
   \                     ??CrossCallReturnLabel_173:
   \   000000C8   1120               MOVS     R0,#+17
   \   000000CA   ........           BL       CmdResp1Error
   \   000000CE   8046               MOV      R8,R0
    847          
    848            if (errorstatus != SD_OK)
   \   000000D0   2A28               CMP      R0,#+42
   \   000000D2   DED1               BNE.N    ??SD_ReadBlock_7
    849            {
    850              return(errorstatus);
    851            }
    852            /* In case of single block transfer, no need of stop transfer at all.*/
    853            if (DeviceMode == SD_POLLING_MODE)
   \   000000D4   B06D               LDR      R0,[R6, #+88]
   \   000000D6   0228               CMP      R0,#+2
   \   000000D8   1AD0               BEQ.N    ??SD_ReadBlock_8
    854            {
    855              /* Polling mode */
    856              while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
    857              {
    858                if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
    859                {
    860                  for (count = 0; count < 8; count++)
    861                  {
    862                    *(tempbuff + count) = SDIO_ReadData();
    863                  }
    864                  tempbuff += 8;
    865                }
    866              }
    867          
    868              if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
    869              {
    870                SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
    871                errorstatus = SD_DATA_TIMEOUT;
    872                return(errorstatus);
    873              }
    874              else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
    875              {
    876                SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
    877                errorstatus = SD_DATA_CRC_FAIL;
    878                return(errorstatus);
    879              }
    880              else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
    881              {
    882                SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
    883                errorstatus = SD_RX_OVERRUN;
    884                return(errorstatus);
    885              }
    886              else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
    887              {
    888                SDIO_ClearFlag(SDIO_FLAG_STBITERR);
    889                errorstatus = SD_START_BIT_ERR;
    890                return(errorstatus);
    891              }
    892              while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
    893              {
    894                *tempbuff = SDIO_ReadData();
    895                tempbuff++;
    896              }
    897          
    898              /* Clear all the static flags */
    899              SDIO_ClearFlag(SDIO_STATIC_FLAGS);
    900            }
    901            else if (DeviceMode == SD_INTERRUPT_MODE)
   \   000000DA   0128               CMP      R0,#+1
   \   000000DC   42D1               BNE.N    ??SD_ReadBlock_9
    902            {
    903              SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR, ENABLE);
   \   000000DE   ........           BL       ?Subroutine5
    904              while ((TransferEnd == 0) && (TransferError == SD_OK))
   \                     ??CrossCallReturnLabel_19:
   \   000000E2   F06E               LDR      R0,[R6, #+108]
   \   000000E4   10B9               CBNZ     R0,??SD_ReadBlock_10
   \   000000E6   3078               LDRB     R0,[R6, #+0]
   \   000000E8   2A28               CMP      R0,#+42
   \   000000EA   FAD0               BEQ.N    ??CrossCallReturnLabel_19
    905              {}
    906              if (TransferError != SD_OK)
   \                     ??SD_ReadBlock_10:
   \   000000EC   3078               LDRB     R0,[R6, #+0]
   \   000000EE   2A28               CMP      R0,#+42
   \   000000F0   CFD0               BEQ.N    ??SD_ReadBlock_7
    907              {
    908                return(TransferError);
   \   000000F2   3078               LDRB     R0,[R6, #+0]
   \   000000F4   A9E7               B.N      ??SD_ReadBlock_2
    909              }
    910            }
   \                     ??SD_ReadBlock_11:
   \   000000F6   ........           BL       ?Subroutine24
   \                     ??CrossCallReturnLabel_84:
   \   000000FA   48B1               CBZ      R0,??SD_ReadBlock_8
   \   000000FC   0024               MOVS     R4,#+0
   \                     ??SD_ReadBlock_12:
   \   000000FE   ........           BL       SDIO_ReadData
   \   00000102   49F82400           STR      R0,[R9, R4, LSL #+2]
   \   00000106   641C               ADDS     R4,R4,#+1
   \   00000108   082C               CMP      R4,#+8
   \   0000010A   F8D3               BCC.N    ??SD_ReadBlock_12
   \   0000010C   09F12009           ADD      R9,R9,#+32
   \                     ??SD_ReadBlock_8:
   \   00000110   ........           BL       ?Subroutine37
   \                     ??CrossCallReturnLabel_136:
   \   00000114   EFD0               BEQ.N    ??SD_ReadBlock_11
   \   00000116   ........           BL       ?Subroutine22
   \                     ??CrossCallReturnLabel_75:
   \   0000011A   18B1               CBZ      R0,??SD_ReadBlock_13
   \   0000011C   ........           BL       ?Subroutine23
   \                     ??CrossCallReturnLabel_81:
   \   00000120   0420               MOVS     R0,#+4
   \   00000122   92E7               B.N      ??SD_ReadBlock_2
   \                     ??SD_ReadBlock_13:
   \   00000124   ........           BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_11:
   \   00000128   18B1               CBZ      R0,??SD_ReadBlock_14
   \   0000012A   ........           BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_17:
   \   0000012E   0220               MOVS     R0,#+2
   \   00000130   8BE7               B.N      ??SD_ReadBlock_2
   \                     ??SD_ReadBlock_14:
   \   00000132   ........           BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_88:
   \   00000136   18B1               CBZ      R0,??SD_ReadBlock_15
   \   00000138   ........           BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_92:
   \   0000013C   0620               MOVS     R0,#+6
   \   0000013E   84E7               B.N      ??SD_ReadBlock_2
   \                     ??SD_ReadBlock_15:
   \   00000140   ........           BL       ?Subroutine19
   \                     ??CrossCallReturnLabel_58:
   \   00000144   38B1               CBZ      R0,??SD_ReadBlock_16
   \   00000146   ........           BL       ?Subroutine20
   \                     ??CrossCallReturnLabel_64:
   \   0000014A   0720               MOVS     R0,#+7
   \   0000014C   7DE7               B.N      ??SD_ReadBlock_2
   \                     ??SD_ReadBlock_17:
   \   0000014E   ........           BL       SDIO_ReadData
   \   00000152   49F8040B           STR      R0,[R9], #+4
   \                     ??SD_ReadBlock_16:
   \   00000156   ........           BL       ?Subroutine21
   \                     ??CrossCallReturnLabel_69:
   \   0000015A   0028               CMP      R0,#+0
   \   0000015C   F7D1               BNE.N    ??SD_ReadBlock_17
   \   0000015E   ........           BL       ?Subroutine18
   \                     ??CrossCallReturnLabel_51:
   \   00000162   96E7               B.N      ??SD_ReadBlock_7
    911            else if (DeviceMode == SD_DMA_MODE)
   \                     ??SD_ReadBlock_9:
   \   00000164   0028               CMP      R0,#+0
   \   00000166   94D1               BNE.N    ??SD_ReadBlock_7
    912            {
    913              SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
   \   00000168   ........           BL       ?Subroutine6
    914              SDIO_DMACmd(ENABLE);
   \                     ??CrossCallReturnLabel_21:
   \   0000016C   ........           BL       ?Subroutine14
    915              DMA_RxConfiguration(readbuff, BlockSize);
   \                     ??CrossCallReturnLabel_40:
   \   00000170   3946               MOV      R1,R7
   \   00000172   2846               MOV      R0,R5
   \   00000174   ........           BL       DMA_RxConfiguration
    916              while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
   \                     ??SD_ReadBlock_18:
   \   00000178   ........           BL       ?Subroutine41
    917              {}
    918            }
   \                     ??CrossCallReturnLabel_152:
   \   0000017C   0028               CMP      R0,#+0
   \   0000017E   88D1               BNE.N    ??SD_ReadBlock_7
   \   00000180   FAE7               B.N      ??SD_ReadBlock_18
    919            return(errorstatus);
    920          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??Subroutine48_0:
   \   00000000   C6F82CB0           STR      R11,[R6, #+44]
   \   00000004                      REQUIRE ??Subroutine49_0
   \   00000004                      ;; // Fall through to label ??Subroutine49_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine49_0:
   \   00000000   06F11C00           ADD      R0,R6,#+28
   \   00000004   ........           B.W      SDIO_SendCommand

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   4FF40040           MOV      R0,#+32768
   \   00000004   ........           B.W      SDIO_GetFlagStatus

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0121               MOVS     R1,#+1
   \   00000002   40F22A30           MOVW     R0,#+810
   \   00000006   ........           B.W      SDIO_ITConfig

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0121               MOVS     R1,#+1
   \   00000002   48F22A30           MOVW     R0,#+33578
   \   00000006   ........           B.W      SDIO_ITConfig

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine41:
   \   00000000   0148               LDR.N    R0,??Subroutine41_0  ;; 0x10002000
   \   00000002   ........           B.W      DMA_GetFlagStatus
   \   00000006   00BF               Nop      
   \                     ??Subroutine41_0:
   \   00000008   00200010           DC32     0x10002000

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine39:
   \   00000000   1020               MOVS     R0,#+16
   \   00000002   3062               STR      R0,[R6, #+32]
   \   00000004   4020               MOVS     R0,#+64
   \   00000006   7062               STR      R0,[R6, #+36]
   \   00000008   7047               BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine38:
   \   00000000   ....               LDR.N    R0,??DataTable19  ;; 0xfffff
   \   00000002   7060               STR      R0,[R6, #+4]
   \   00000004   7047               BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine34:
   \   00000000   1020               MOVS     R0,#+16
   \   00000002   ....               B.N      CmdResp1Error

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   0120               MOVS     R0,#+1
   \   00000002   ........           B.W      SDIO_DMACmd

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   0120               MOVS     R0,#+1
   \   00000002   B061               STR      R0,[R6, #+24]
   \   00000004   301D               ADDS     R0,R6,#+4
   \   00000006   ........           B.W      SDIO_DataConfig

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   0820               MOVS     R0,#+8
   \   00000002   ........           B.W      SDIO_ClearFlag

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   0820               MOVS     R0,#+8
   \   00000002   ........           B.W      SDIO_GetFlagStatus

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   4FF40070           MOV      R0,#+512
   \   00000004   ........           B.W      SDIO_ClearFlag

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   4FF40070           MOV      R0,#+512
   \   00000004   ........           B.W      SDIO_GetFlagStatus

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0220               MOVS     R0,#+2
   \   00000002   ........           B.W      SDIO_ClearFlag

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0220               MOVS     R0,#+2
   \   00000002   ........           B.W      SDIO_GetFlagStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine37:
   \   00000000   0248               LDR.N    R0,??Subroutine37_0  ;; 0x40018034
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   40F22A61           MOVW     R1,#+1578
   \   00000008   0842               TST      R0,R1
   \   0000000A   7047               BX       LR
   \                     ??Subroutine37_0:
   \   0000000C   34800140           DC32     0x40018034

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine26:
   \   00000000   2020               MOVS     R0,#+32
   \   00000002   ........           B.W      SDIO_ClearFlag

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   2020               MOVS     R0,#+32
   \   00000002   ........           B.W      SDIO_GetFlagStatus

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   4FF40010           MOV      R0,#+2097152
   \   00000004   ........           B.W      SDIO_GetFlagStatus
    921          
    922          /*******************************************************************************
    923          * Function Name  : SD_ReadMultiBlocks
    924          * Description    : Allows to read blocks from a specified address  in a card.
    925          * Input          : - addr: Address from where data are to be read.
    926          *                  - readbuff: pointer to the buffer that will contain the 
    927          *                    received data.
    928          *                  - BlockSize: the SD card Data block size.
    929          *                  - NumberOfBlocks: number of blocks to be read.
    930          * Output         : None
    931          * Return         : SD_Error: SD Card Error code.
    932          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    933          SD_Error SD_ReadMultiBlocks(u32 addr, u32 *readbuff, u16 BlockSize, u32 NumberOfBlocks)
    934          {
   \                     SD_ReadMultiBlocks:
   \   00000000   2DE9F24F           PUSH     {R1,R4-R11,LR}
   \   00000004   8346               MOV      R11,R0
   \   00000006   1446               MOV      R4,R2
   \   00000008   1D46               MOV      R5,R3
    935            SD_Error errorstatus = SD_OK;
    936            u32 count = 0, *tempbuff = readbuff;
   \   0000000A   8946               MOV      R9,R1
    937            u8 power = 0;
    938          
    939            if (NULL == readbuff)
   \   0000000C   0029               CMP      R1,#+0
   \   0000000E   01D1               BNE.N    ??SD_ReadMultiBlocks_0
    940            {
    941              errorstatus = SD_INVALID_PARAMETER;
    942              return(errorstatus);
   \                     ??SD_ReadMultiBlocks_1:
   \   00000010   2620               MOVS     R0,#+38
   \   00000012   1BE0               B.N      ??SD_ReadMultiBlocks_2
    943            }
    944          
    945            TransferError = SD_OK;
   \                     ??SD_ReadMultiBlocks_0:
   \   00000014   ........           LDR.W    R7,??DataTable16  ;; TransferError
   \   00000018   2A20               MOVS     R0,#+42
   \   0000001A   3870               STRB     R0,[R7, #+0]
    946            TransferEnd = 0;
   \   0000001C   0020               MOVS     R0,#+0
   \   0000001E   F866               STR      R0,[R7, #+108]
    947            TotalNumberOfBytes = 0;
   \   00000020   F865               STR      R0,[R7, #+92]
   \   00000022   ........           LDR.W    R0,??DataTable19  ;; 0xfffff
   \   00000026   7860               STR      R0,[R7, #+4]
    948          
    949            /* Clear all DPSM configuration */
    950            SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
    951            SDIO_DataInitStructure.SDIO_DataLength = 0;
   \   00000028   0020               MOVS     R0,#+0
   \   0000002A   B860               STR      R0,[R7, #+8]
    952            SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
   \   0000002C   F860               STR      R0,[R7, #+12]
    953            SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
   \   0000002E   3861               STR      R0,[R7, #+16]
    954            SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
   \   00000030   7861               STR      R0,[R7, #+20]
    955            SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
   \   00000032   B861               STR      R0,[R7, #+24]
    956            SDIO_DataConfig(&SDIO_DataInitStructure);
   \   00000034   381D               ADDS     R0,R7,#+4
   \   00000036   ........           BL       SDIO_DataConfig
    957            SDIO_DMACmd(DISABLE);
   \   0000003A   0020               MOVS     R0,#+0
   \   0000003C   ........           BL       SDIO_DMACmd
    958          
    959            if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
   \   00000040   ........           BL       ?Subroutine32
   \                     ??CrossCallReturnLabel_115:
   \   00000044   10F0007F           TST      R0,#0x2000000
   \   00000048   02D0               BEQ.N    ??SD_ReadMultiBlocks_3
    960            {
    961              errorstatus = SD_LOCK_UNLOCK_FAILED;
    962              return(errorstatus);
   \   0000004A   0E20               MOVS     R0,#+14
   \                     ??SD_ReadMultiBlocks_2:
   \   0000004C   BDE8F28F           POP      {R1,R4-R11,PC}
    963            }
    964          
    965            if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
   \                     ??SD_ReadMultiBlocks_3:
   \   00000050   386D               LDR      R0,[R7, #+80]
   \   00000052   0228               CMP      R0,#+2
   \   00000054   04D1               BNE.N    ??SD_ReadMultiBlocks_4
    966            {
    967              BlockSize = 512;
   \   00000056   4FF40074           MOV      R4,#+512
    968              addr /= 512;
   \   0000005A   4FEA5B2B           LSR      R11,R11,#+9
   \   0000005E   05E0               B.N      ??SD_ReadMultiBlocks_5
    969            }
    970            
    971            if ((BlockSize > 0) && (BlockSize <= 2048) && (0 == (BlockSize & (BlockSize - 1))))
   \                     ??SD_ReadMultiBlocks_4:
   \   00000060   002C               CMP      R4,#+0
   \   00000062   D5D0               BEQ.N    ??SD_ReadMultiBlocks_1
   \   00000064   40F60100           MOVW     R0,#+2049
   \   00000068   8442               CMP      R4,R0
   \   0000006A   D1D2               BCS.N    ??SD_ReadMultiBlocks_1
   \                     ??SD_ReadMultiBlocks_5:
   \   0000006C   601E               SUBS     R0,R4,#+1
   \   0000006E   0442               TST      R4,R0
   \   00000070   CED1               BNE.N    ??SD_ReadMultiBlocks_1
    972            {
    973              power = convert_from_bytes_to_power_of_two(BlockSize);
   \   00000072   2046               MOV      R0,R4
   \   00000074   ........           BL       convert_from_bytes_to_power_of_two
   \   00000078   8246               MOV      R10,R0
   \   0000007A   FC61               STR      R4,[R7, #+28]
    974          
    975              /* Set Block Size for Card */
    976              SDIO_CmdInitStructure.SDIO_Argument = (u32) BlockSize;
    977              SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
   \   0000007C   1020               MOVS     R0,#+16
   \   0000007E   ........           BL       ?Subroutine30
    978              SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    979              SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    980              SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   \                     ??CrossCallReturnLabel_104:
   \   00000082   4FF48066           MOV      R6,#+1024
   \   00000086   FE62               STR      R6,[R7, #+44]
    981              SDIO_SendCommand(&SDIO_CmdInitStructure);
   \   00000088   ........           BL       ??Subroutine46_0
    982          
    983              errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
   \                     ??CrossCallReturnLabel_159:
   \   0000008C   ........           BL       ?Subroutine34
   \                     ??CrossCallReturnLabel_127:
   \   00000090   8046               MOV      R8,R0
    984          
    985              if (SD_OK != errorstatus)
   \   00000092   2A28               CMP      R0,#+42
   \   00000094   01D0               BEQ.N    ??SD_ReadMultiBlocks_6
    986              {
    987                return(errorstatus);
   \                     ??SD_ReadMultiBlocks_7:
   \   00000096   4046               MOV      R0,R8
   \   00000098   D8E7               B.N      ??SD_ReadMultiBlocks_2
    988              }
    989            }
    990            else
    991            {
    992              errorstatus = SD_INVALID_PARAMETER;
    993              return(errorstatus);
    994            }
    995          
    996            if (NumberOfBlocks > 1)
   \                     ??SD_ReadMultiBlocks_6:
   \   0000009A   022D               CMP      R5,#+2
   \   0000009C   FBD3               BCC.N    ??SD_ReadMultiBlocks_7
    997            {
    998              /* Common to all modes */
    999              if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
   \   0000009E   6C43               MULS     R4,R5,R4
   \   000000A0   B4F1007F           CMP      R4,#+33554432
   \   000000A4   B4D2               BCS.N    ??SD_ReadMultiBlocks_1
   1000              {
   1001                errorstatus = SD_INVALID_PARAMETER;
   1002                return(errorstatus);
   1003              }
   1004          
   1005              TotalNumberOfBytes = NumberOfBlocks * BlockSize;
   \   000000A6   FC65               STR      R4,[R7, #+92]
   1006              StopCondition = 1;
   \   000000A8   0120               MOVS     R0,#+1
   \   000000AA   3866               STR      R0,[R7, #+96]
   1007              DestBuffer = readbuff;
   \   000000AC   0098               LDR      R0,[SP, #+0]
   \   000000AE   B866               STR      R0,[R7, #+104]
   1008          
   1009              SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
   \   000000B0   ........           LDR.W    R0,??DataTable19  ;; 0xfffff
   \   000000B4   7860               STR      R0,[R7, #+4]
   1010              SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
   \   000000B6   BC60               STR      R4,[R7, #+8]
   1011              SDIO_DataInitStructure.SDIO_DataBlockSize = (u32) power << 4;
   \   000000B8   4FEA0A10           LSL      R0,R10,#+4
   \   000000BC   F860               STR      R0,[R7, #+12]
   1012              SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
   \   000000BE   0220               MOVS     R0,#+2
   \   000000C0   3861               STR      R0,[R7, #+16]
   1013              SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
   \   000000C2   0020               MOVS     R0,#+0
   \   000000C4   7861               STR      R0,[R7, #+20]
   1014              SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
   \   000000C6   0120               MOVS     R0,#+1
   \   000000C8   B861               STR      R0,[R7, #+24]
   1015              SDIO_DataConfig(&SDIO_DataInitStructure);
   \   000000CA   381D               ADDS     R0,R7,#+4
   \   000000CC   ........           BL       SDIO_DataConfig
   1016          
   1017              /* Send CMD18 READ_MULT_BLOCK with argument data address */
   1018              SDIO_CmdInitStructure.SDIO_Argument = (u32)addr;
   \   000000D0   C7F81CB0           STR      R11,[R7, #+28]
   1019              SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_MULT_BLOCK;
   \   000000D4   1220               MOVS     R0,#+18
   \   000000D6   ........           BL       ?Subroutine29
   1020              SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1021              SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1022              SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1023              SDIO_SendCommand(&SDIO_CmdInitStructure);
   \                     ??CrossCallReturnLabel_100:
   \   000000DA   ........           BL       ??Subroutine46_0
   1024          
   1025              errorstatus = CmdResp1Error(SDIO_READ_MULT_BLOCK);
   \                     ??CrossCallReturnLabel_158:
   \   000000DE   1220               MOVS     R0,#+18
   \   000000E0   ........           BL       CmdResp1Error
   \   000000E4   8046               MOV      R8,R0
   1026          
   1027              if (errorstatus != SD_OK)
   \   000000E6   2A28               CMP      R0,#+42
   \   000000E8   D5D1               BNE.N    ??SD_ReadMultiBlocks_7
   1028              {
   1029                return(errorstatus);
   1030              }
   1031          
   1032              if (DeviceMode == SD_POLLING_MODE)
   \   000000EA   B86D               LDR      R0,[R7, #+88]
   \   000000EC   0228               CMP      R0,#+2
   \   000000EE   11D0               BEQ.N    ??SD_ReadMultiBlocks_8
   1033              {
   1034                /* Polling mode */
   1035                while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
   1036                {
   1037                  if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
   1038                  {
   1039                    for (count = 0; count < SD_HALFFIFO; count++)
   1040                    {
   1041                      *(tempbuff + count) = SDIO_ReadData();
   1042                    }
   1043                    tempbuff += SD_HALFFIFO;
   1044                  }
   1045                }
   1046          
   1047                if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
   1048                {
   1049                  SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
   1050                  errorstatus = SD_DATA_TIMEOUT;
   1051                  return(errorstatus);
   1052                }
   1053                else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
   1054                {
   1055                  SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
   1056                  errorstatus = SD_DATA_CRC_FAIL;
   1057                  return(errorstatus);
   1058                }
   1059                else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
   1060                {
   1061                  SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
   1062                  errorstatus = SD_RX_OVERRUN;
   1063                  return(errorstatus);
   1064                }
   1065                else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
   1066                {
   1067                  SDIO_ClearFlag(SDIO_FLAG_STBITERR);
   1068                  errorstatus = SD_START_BIT_ERR;
   1069                  return(errorstatus);
   1070                }
   1071                while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
   1072                {
   1073                  *tempbuff = SDIO_ReadData();
   1074                  tempbuff++;
   1075                }
   1076          
   1077                if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
   1078                {
   1079                  /* In Case Of SD-CARD Send Command STOP_TRANSMISSION */
   1080                  if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType))
   1081                  {
   1082                    /* Send CMD12 STOP_TRANSMISSION */
   1083                    SDIO_CmdInitStructure.SDIO_Argument = 0x0;
   1084                    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
   1085                    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1086                    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1087                    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1088                    SDIO_SendCommand(&SDIO_CmdInitStructure);
   1089          
   1090                    errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);
   1091          
   1092                    if (errorstatus != SD_OK)
   1093                    {
   1094                      return(errorstatus);
   1095                    }
   1096                  }
   1097                }
   1098                /* Clear all the static flags */
   1099                SDIO_ClearFlag(SDIO_STATIC_FLAGS);
   1100              }
   1101              else if (DeviceMode == SD_INTERRUPT_MODE)
   \   000000F0   0128               CMP      R0,#+1
   \   000000F2   54D1               BNE.N    ??SD_ReadMultiBlocks_9
   1102              {
   1103                SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR, ENABLE);
   \   000000F4   ........           BL       ?Subroutine5
   1104                while ((TransferEnd == 0) && (TransferError == SD_OK))
   1105                {}
   1106                if (TransferError != SD_OK)
   1107                {
   1108                  return(TransferError);
   1109                }
   1110              }
   \                     ??CrossCallReturnLabel_18:
   \   000000F8   5FE0               B.N      ??SD_ReadMultiBlocks_10
   \                     ??SD_ReadMultiBlocks_11:
   \   000000FA   ........           BL       ?Subroutine24
   \                     ??CrossCallReturnLabel_83:
   \   000000FE   48B1               CBZ      R0,??SD_ReadMultiBlocks_8
   \   00000100   0024               MOVS     R4,#+0
   \                     ??SD_ReadMultiBlocks_12:
   \   00000102   ........           BL       SDIO_ReadData
   \   00000106   49F82400           STR      R0,[R9, R4, LSL #+2]
   \   0000010A   641C               ADDS     R4,R4,#+1
   \   0000010C   082C               CMP      R4,#+8
   \   0000010E   F8D3               BCC.N    ??SD_ReadMultiBlocks_12
   \   00000110   09F12009           ADD      R9,R9,#+32
   \                     ??SD_ReadMultiBlocks_8:
   \   00000114   ....               LDR.N    R0,??DataTable18  ;; 0x40018034
   \   00000116   0068               LDR      R0,[R0, #+0]
   \   00000118   40F22A31           MOVW     R1,#+810
   \   0000011C   0842               TST      R0,R1
   \   0000011E   ECD0               BEQ.N    ??SD_ReadMultiBlocks_11
   \   00000120   ........           BL       ?Subroutine22
   \                     ??CrossCallReturnLabel_74:
   \   00000124   18B1               CBZ      R0,??SD_ReadMultiBlocks_13
   \   00000126   ........           BL       ?Subroutine23
   \                     ??CrossCallReturnLabel_80:
   \   0000012A   0420               MOVS     R0,#+4
   \   0000012C   8EE7               B.N      ??SD_ReadMultiBlocks_2
   \                     ??SD_ReadMultiBlocks_13:
   \   0000012E   ........           BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_10:
   \   00000132   18B1               CBZ      R0,??SD_ReadMultiBlocks_14
   \   00000134   ........           BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_16:
   \   00000138   0220               MOVS     R0,#+2
   \   0000013A   87E7               B.N      ??SD_ReadMultiBlocks_2
   \                     ??SD_ReadMultiBlocks_14:
   \   0000013C   ........           BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_87:
   \   00000140   18B1               CBZ      R0,??SD_ReadMultiBlocks_15
   \   00000142   ........           BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_91:
   \   00000146   0620               MOVS     R0,#+6
   \   00000148   80E7               B.N      ??SD_ReadMultiBlocks_2
   \                     ??SD_ReadMultiBlocks_15:
   \   0000014A   ........           BL       ?Subroutine19
   \                     ??CrossCallReturnLabel_57:
   \   0000014E   38B1               CBZ      R0,??SD_ReadMultiBlocks_16
   \   00000150   ........           BL       ?Subroutine20
   \                     ??CrossCallReturnLabel_63:
   \   00000154   0720               MOVS     R0,#+7
   \   00000156   79E7               B.N      ??SD_ReadMultiBlocks_2
   \                     ??SD_ReadMultiBlocks_17:
   \   00000158   ........           BL       SDIO_ReadData
   \   0000015C   49F8040B           STR      R0,[R9], #+4
   \                     ??SD_ReadMultiBlocks_16:
   \   00000160   ........           BL       ?Subroutine21
   \                     ??CrossCallReturnLabel_68:
   \   00000164   0028               CMP      R0,#+0
   \   00000166   F7D1               BNE.N    ??SD_ReadMultiBlocks_17
   \   00000168   4FF48070           MOV      R0,#+256
   \   0000016C   ........           BL       SDIO_GetFlagStatus
   \   00000170   90B1               CBZ      R0,??SD_ReadMultiBlocks_18
   \   00000172   386D               LDR      R0,[R7, #+80]
   \   00000174   18B1               CBZ      R0,??SD_ReadMultiBlocks_19
   \   00000176   0228               CMP      R0,#+2
   \   00000178   01D0               BEQ.N    ??SD_ReadMultiBlocks_19
   \   0000017A   0128               CMP      R0,#+1
   \   0000017C   0CD1               BNE.N    ??SD_ReadMultiBlocks_18
   \                     ??SD_ReadMultiBlocks_19:
   \   0000017E   0020               MOVS     R0,#+0
   \   00000180   F861               STR      R0,[R7, #+28]
   \   00000182   0C20               MOVS     R0,#+12
   \   00000184   ........           BL       ?Subroutine29
   \                     ??CrossCallReturnLabel_101:
   \   00000188   ........           BL       ??Subroutine46_0
   \                     ??CrossCallReturnLabel_157:
   \   0000018C   0C20               MOVS     R0,#+12
   \   0000018E   ........           BL       CmdResp1Error
   \   00000192   8046               MOV      R8,R0
   \   00000194   2A28               CMP      R0,#+42
   \   00000196   01D1               BNE.N    ??CrossCallReturnLabel_50
   \                     ??SD_ReadMultiBlocks_18:
   \   00000198   ........           BL       ?Subroutine18
   \                     ??CrossCallReturnLabel_50:
   \   0000019C   7BE7               B.N      ??SD_ReadMultiBlocks_7
   1111              else if (DeviceMode == SD_DMA_MODE)
   \                     ??SD_ReadMultiBlocks_9:
   \   0000019E   0028               CMP      R0,#+0
   \   000001A0   FCD1               BNE.N    ??CrossCallReturnLabel_50
   1112              {
   1113                SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
   \   000001A2   ........           BL       ?Subroutine6
   1114                SDIO_DMACmd(ENABLE);
   \                     ??CrossCallReturnLabel_20:
   \   000001A6   ........           BL       ?Subroutine14
   1115                DMA_RxConfiguration(readbuff, (NumberOfBlocks * BlockSize));
   \                     ??CrossCallReturnLabel_39:
   \   000001AA   2146               MOV      R1,R4
   \   000001AC   0098               LDR      R0,[SP, #+0]
   \   000001AE   ........           BL       DMA_RxConfiguration
   1116                while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
   \                     ??SD_ReadMultiBlocks_20:
   \   000001B2   ........           BL       ?Subroutine41
   \                     ??CrossCallReturnLabel_151:
   \   000001B6   0028               CMP      R0,#+0
   \   000001B8   FBD0               BEQ.N    ??SD_ReadMultiBlocks_20
   1117                {}
   1118                while ((TransferEnd == 0) && (TransferError == SD_OK))
   \                     ??SD_ReadMultiBlocks_10:
   \   000001BA   F86E               LDR      R0,[R7, #+108]
   \   000001BC   10B9               CBNZ     R0,??SD_ReadMultiBlocks_21
   \   000001BE   3878               LDRB     R0,[R7, #+0]
   \   000001C0   2A28               CMP      R0,#+42
   \   000001C2   FAD0               BEQ.N    ??SD_ReadMultiBlocks_10
   1119                {}
   1120                if (TransferError != SD_OK)
   \                     ??SD_ReadMultiBlocks_21:
   \   000001C4   3878               LDRB     R0,[R7, #+0]
   \   000001C6   2A28               CMP      R0,#+42
   \   000001C8   E8D0               BEQ.N    ??CrossCallReturnLabel_50
   1121                {
   1122                  return(TransferError);
   \   000001CA   3878               LDRB     R0,[R7, #+0]
   \   000001CC   3EE7               B.N      ??SD_ReadMultiBlocks_2
   1123                }
   1124              }
   1125            }
   1126            return(errorstatus);
   1127          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine29:
   \   00000000   3862               STR      R0,[R7, #+32]
   \   00000002   4020               MOVS     R0,#+64
   \   00000004   7862               STR      R0,[R7, #+36]
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   B862               STR      R0,[R7, #+40]
   \   0000000A   FE62               STR      R6,[R7, #+44]
   \   0000000C   7047               BX       LR
   1128          
   1129          /*******************************************************************************
   1130          * Function Name  : SD_WriteBlock
   1131          * Description    : Allows to write one block starting from a specified address 
   1132          *                  in a card.
   1133          * Input          : - addr: Address from where data are to be read.
   1134          *                  - writebuff: pointer to the buffer that contain the data to be
   1135          *                    transferred.
   1136          *                  - BlockSize: the SD card Data block size.
   1137          * Output         : None
   1138          * Return         : SD_Error: SD Card Error code.
   1139          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine17:
   \   00000000   706D               LDR      R0,[R6, #+84]
   \   00000002   0004               LSLS     R0,R0,#+16
   \   00000004   F061               STR      R0,[R6, #+28]
   \   00000006   0D20               MOVS     R0,#+13
   \   00000008                      REQUIRE ??Subroutine47_0
   \   00000008                      ;; // Fall through to label ??Subroutine47_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??Subroutine47_0:
   \   00000000   3062               STR      R0,[R6, #+32]
   \   00000002   4020               MOVS     R0,#+64
   \   00000004   7062               STR      R0,[R6, #+36]
   \   00000006   B762               STR      R7,[R6, #+40]
   \   00000008                      REQUIRE ??Subroutine48_0
   \   00000008                      ;; // Fall through to label ??Subroutine48_0

   \                                 In section .text, align 2, keep-with-next
   1140          SD_Error SD_WriteBlock(u32 addr, u32 *writebuff, u16 BlockSize)
   1141          {
   \                     SD_WriteBlock:
   \   00000000   2DE9F24F           PUSH     {R1,R4-R11,LR}
   \   00000004   82B0               SUB      SP,SP,#+8
   \   00000006   0546               MOV      R5,R0
   \   00000008   1446               MOV      R4,R2
   1142            SD_Error errorstatus = SD_OK;
   1143            u8  power = 0, cardstate = 0;
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   8DF80000           STRB     R0,[SP, #+0]
   1144            u32 timeout = 0, bytestransferred = 0;
   \   00000010   0027               MOVS     R7,#+0
   1145            u32 cardstatus = 0, count = 0, restwords = 0;
   1146            u32 *tempbuff = writebuff;
   \   00000012   DDF80880           LDR      R8,[SP, #+8]
   1147          
   1148            if (writebuff == NULL)
   \   00000016   4046               MOV      R0,R8
   \   00000018   0028               CMP      R0,#+0
   \   0000001A   01D1               BNE.N    ??SD_WriteBlock_0
   1149            {
   1150              errorstatus = SD_INVALID_PARAMETER;
   1151              return(errorstatus);
   \                     ??SD_WriteBlock_1:
   \   0000001C   2620               MOVS     R0,#+38
   \   0000001E   18E0               B.N      ??SD_WriteBlock_2
   1152            }
   1153          
   1154            TransferError = SD_OK;
   \                     ??SD_WriteBlock_0:
   \   00000020   ....               LDR.N    R6,??DataTable16  ;; TransferError
   \   00000022   2A20               MOVS     R0,#+42
   \   00000024   3070               STRB     R0,[R6, #+0]
   1155            TransferEnd = 0;
   \   00000026   F766               STR      R7,[R6, #+108]
   1156            TotalNumberOfBytes = 0;
   \   00000028   F765               STR      R7,[R6, #+92]
   \   0000002A   ........           BL       ?Subroutine38
   1157          
   1158            SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
   1159            SDIO_DataInitStructure.SDIO_DataLength = 0;
   \                     ??CrossCallReturnLabel_141:
   \   0000002E   B760               STR      R7,[R6, #+8]
   1160            SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
   \   00000030   F760               STR      R7,[R6, #+12]
   1161            SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
   \   00000032   3761               STR      R7,[R6, #+16]
   1162            SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
   \   00000034   7761               STR      R7,[R6, #+20]
   1163            SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
   \   00000036   B761               STR      R7,[R6, #+24]
   1164            SDIO_DataConfig(&SDIO_DataInitStructure);
   \   00000038   301D               ADDS     R0,R6,#+4
   \   0000003A   ........           BL       SDIO_DataConfig
   1165            SDIO_DMACmd(DISABLE);
   \   0000003E   0020               MOVS     R0,#+0
   \   00000040   ........           BL       SDIO_DMACmd
   1166          
   1167            if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
   \   00000044   3846               MOV      R0,R7
   \   00000046   ........           BL       SDIO_GetResponse
   \   0000004A   10F0007F           TST      R0,#0x2000000
   \   0000004E   02D0               BEQ.N    ??SD_WriteBlock_3
   1168            {
   1169              errorstatus = SD_LOCK_UNLOCK_FAILED;
   1170              return(errorstatus);
   \   00000050   0E20               MOVS     R0,#+14
   \                     ??SD_WriteBlock_2:
   \   00000052   BDE8FE8F           POP      {R1-R11,PC}
   1171            }
   1172          
   1173            if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
   \                     ??SD_WriteBlock_3:
   \   00000056   306D               LDR      R0,[R6, #+80]
   \   00000058   0228               CMP      R0,#+2
   \   0000005A   03D1               BNE.N    ??SD_WriteBlock_4
   1174            {
   1175              BlockSize = 512;
   \   0000005C   4FF40074           MOV      R4,#+512
   1176              addr /= 512;
   \   00000060   6D0A               LSRS     R5,R5,#+9
   \   00000062   05E0               B.N      ??SD_WriteBlock_5
   1177            }
   1178            
   1179            /* Set the block size, both on controller and card */
   1180            if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
   \                     ??SD_WriteBlock_4:
   \   00000064   002C               CMP      R4,#+0
   \   00000066   D9D0               BEQ.N    ??SD_WriteBlock_1
   \   00000068   40F60100           MOVW     R0,#+2049
   \   0000006C   8442               CMP      R4,R0
   \   0000006E   D5D2               BCS.N    ??SD_WriteBlock_1
   \                     ??SD_WriteBlock_5:
   \   00000070   601E               SUBS     R0,R4,#+1
   \   00000072   0442               TST      R4,R0
   \   00000074   D2D1               BNE.N    ??SD_WriteBlock_1
   1181            {
   1182              power = convert_from_bytes_to_power_of_two(BlockSize);
   \   00000076   2046               MOV      R0,R4
   \   00000078   ........           BL       convert_from_bytes_to_power_of_two
   \   0000007C   8146               MOV      R9,R0
   \   0000007E   F461               STR      R4,[R6, #+28]
   1183          
   1184              SDIO_CmdInitStructure.SDIO_Argument = (u32) BlockSize;
   1185              SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
   \   00000080   ........           BL       ?Subroutine39
   1186              SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1187              SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   \                     ??CrossCallReturnLabel_145:
   \   00000084   B762               STR      R7,[R6, #+40]
   1188              SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   \   00000086   4FF4806B           MOV      R11,#+1024
   \   0000008A   ........           BL       ??Subroutine48_0
   1189              SDIO_SendCommand(&SDIO_CmdInitStructure);
   1190          
   1191              errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
   \                     ??CrossCallReturnLabel_172:
   \   0000008E   ........           BL       ?Subroutine34
   1192          
   1193              if (errorstatus != SD_OK)
   \                     ??CrossCallReturnLabel_126:
   \   00000092   2A28               CMP      R0,#+42
   \   00000094   DDD1               BNE.N    ??SD_WriteBlock_2
   1194              {
   1195                return(errorstatus);
   1196              }
   1197            }
   1198            else
   1199            {
   1200              errorstatus = SD_INVALID_PARAMETER;
   1201              return(errorstatus);
   1202            }
   1203          
   1204            /* Wait till card is ready for data Added */
   1205            SDIO_CmdInitStructure.SDIO_Argument = (u32) (RCA << 16);
   \   00000096   ........           BL       ?Subroutine17
   1206            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
   1207            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1208            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1209            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1210            SDIO_SendCommand(&SDIO_CmdInitStructure);
   1211          
   1212            errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
   \                     ??CrossCallReturnLabel_177:
   \   0000009A   ........           BL       ?Subroutine35
   1213          
   1214            if (errorstatus != SD_OK)
   \                     ??CrossCallReturnLabel_133:
   \   0000009E   2A28               CMP      R0,#+42
   \   000000A0   D7D1               BNE.N    ??SD_WriteBlock_2
   1215            {
   1216              return(errorstatus);
   1217            }
   1218          
   1219            cardstatus = SDIO_GetResponse(SDIO_RESP1);
   \   000000A2   0020               MOVS     R0,#+0
   \   000000A4   ........           BL       SDIO_GetResponse
   1220          
   1221            timeout = SD_DATATIMEOUT;
   \   000000A8   ........           LDR.W    R10,??DataTable19  ;; 0xfffff
   \   000000AC   0DE0               B.N      ??SD_WriteBlock_6
   1222          
   1223            while (((cardstatus & 0x00000100) == 0) && (timeout > 0))
   \                     ??SD_WriteBlock_7:
   \   000000AE   BAF1000F           CMP      R10,#+0
   \   000000B2   10D0               BEQ.N    ??SD_WriteBlock_8
   1224            {
   1225              timeout--;
   \   000000B4   AAF1010A           SUB      R10,R10,#+1
   1226              SDIO_CmdInitStructure.SDIO_Argument = (u32) (RCA << 16);
   \   000000B8   ........           BL       ?Subroutine17
   1227              SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
   1228              SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1229              SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1230              SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1231              SDIO_SendCommand(&SDIO_CmdInitStructure);
   1232          
   1233              errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
   \                     ??CrossCallReturnLabel_176:
   \   000000BC   ........           BL       ?Subroutine35
   1234          
   1235              if (errorstatus != SD_OK)
   \                     ??CrossCallReturnLabel_132:
   \   000000C0   2A28               CMP      R0,#+42
   \   000000C2   C6D1               BNE.N    ??SD_WriteBlock_2
   1236              {
   1237                return(errorstatus);
   1238              }
   1239              cardstatus = SDIO_GetResponse(SDIO_RESP1);
   \   000000C4   0020               MOVS     R0,#+0
   \   000000C6   ........           BL       SDIO_GetResponse
   1240            }
   \                     ??SD_WriteBlock_6:
   \   000000CA   10F4807F           TST      R0,#0x100
   \   000000CE   EED0               BEQ.N    ??SD_WriteBlock_7
   1241          
   1242            if (timeout == 0)
   \   000000D0   BAF1000F           CMP      R10,#+0
   \   000000D4   01D1               BNE.N    ??SD_WriteBlock_9
   1243            {
   1244              return(SD_ERROR);
   \                     ??SD_WriteBlock_8:
   \   000000D6   2920               MOVS     R0,#+41
   \   000000D8   BBE7               B.N      ??SD_WriteBlock_2
   1245            }
   1246          
   1247            /* Send CMD24 WRITE_SINGLE_BLOCK */
   1248            SDIO_CmdInitStructure.SDIO_Argument = addr;
   \                     ??SD_WriteBlock_9:
   \   000000DA   F561               STR      R5,[R6, #+28]
   1249            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_SINGLE_BLOCK;
   \   000000DC   1820               MOVS     R0,#+24
   \   000000DE   ........           BL       ??Subroutine47_0
   1250            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1251            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1252            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1253            SDIO_SendCommand(&SDIO_CmdInitStructure);
   1254          
   1255            errorstatus = CmdResp1Error(SDIO_WRITE_SINGLE_BLOCK);
   \                     ??CrossCallReturnLabel_175:
   \   000000E2   1820               MOVS     R0,#+24
   \   000000E4   ........           BL       CmdResp1Error
   1256          
   1257            if (errorstatus != SD_OK)
   \   000000E8   2A28               CMP      R0,#+42
   \   000000EA   B2D1               BNE.N    ??SD_WriteBlock_2
   1258            {
   1259              return(errorstatus);
   1260            }
   1261          
   1262            TotalNumberOfBytes = BlockSize;
   \   000000EC   F465               STR      R4,[R6, #+92]
   1263            StopCondition = 0;
   \   000000EE   3766               STR      R7,[R6, #+96]
   1264            SrcBuffer = writebuff;
   \   000000F0   0298               LDR      R0,[SP, #+8]
   \   000000F2   7066               STR      R0,[R6, #+100]
   1265          
   1266            SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
   \   000000F4   ........           BL       ?Subroutine38
   1267            SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
   \                     ??CrossCallReturnLabel_142:
   \   000000F8   B460               STR      R4,[R6, #+8]
   1268            SDIO_DataInitStructure.SDIO_DataBlockSize = (u32) power << 4;
   \   000000FA   4FEA0910           LSL      R0,R9,#+4
   \   000000FE   F060               STR      R0,[R6, #+12]
   1269            SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
   \   00000100   3761               STR      R7,[R6, #+16]
   1270            SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
   \   00000102   7761               STR      R7,[R6, #+20]
   1271            SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
   \   00000104   ........           BL       ?Subroutine12
   1272            SDIO_DataConfig(&SDIO_DataInitStructure);
   1273          
   1274            /* In case of single data block transfer no need of stop command at all */
   1275            if (DeviceMode == SD_POLLING_MODE)
   \                     ??CrossCallReturnLabel_33:
   \   00000108   B06D               LDR      R0,[R6, #+88]
   \   0000010A   0228               CMP      R0,#+2
   \   0000010C   18D0               BEQ.N    ??SD_WriteBlock_10
   1276            {
   1277              while (!(SDIO->STA & (SDIO_FLAG_DBCKEND | SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
   1278              {
   1279                if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
   1280                {
   1281                  if ((TotalNumberOfBytes - bytestransferred) < 32)
   1282                  {
   1283                    restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - bytestransferred) / 4) : (( TotalNumberOfBytes -  bytestransferred) / 4 + 1);
   1284          
   1285                    for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
   1286                    {
   1287                      SDIO_WriteData(*tempbuff);
   1288                    }
   1289                  }
   1290                  else
   1291                  {
   1292                    for (count = 0; count < 8; count++)
   1293                    {
   1294                      SDIO_WriteData(*(tempbuff + count));
   1295                    }
   1296                    tempbuff += 8;
   1297                    bytestransferred += 32;
   1298                  }
   1299                }
   1300              }
   1301              if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
   1302              {
   1303                SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
   1304                errorstatus = SD_DATA_TIMEOUT;
   1305                return(errorstatus);
   1306              }
   1307              else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
   1308              {
   1309                SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
   1310                errorstatus = SD_DATA_CRC_FAIL;
   1311                return(errorstatus);
   1312              }
   1313              else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
   1314              {
   1315                SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
   1316                errorstatus = SD_TX_UNDERRUN;
   1317                return(errorstatus);
   1318              }
   1319              else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
   1320              {
   1321                SDIO_ClearFlag(SDIO_FLAG_STBITERR);
   1322                errorstatus = SD_START_BIT_ERR;
   1323                return(errorstatus);
   1324              }
   1325            }
   1326            else if (DeviceMode == SD_INTERRUPT_MODE)
   \   0000010E   0128               CMP      R0,#+1
   \   00000110   54D1               BNE.N    ??SD_WriteBlock_11
   1327            {    
   1328          	SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_FLAG_TXFIFOHE | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
   \   00000112   ........           BL       ?Subroutine7
   1329              while ((TransferEnd == 0) && (TransferError == SD_OK))
   \                     ??CrossCallReturnLabel_23:
   \   00000116   F06E               LDR      R0,[R6, #+108]
   \   00000118   10B9               CBNZ     R0,??SD_WriteBlock_12
   \   0000011A   3078               LDRB     R0,[R6, #+0]
   \   0000011C   2A28               CMP      R0,#+42
   \   0000011E   FAD0               BEQ.N    ??CrossCallReturnLabel_23
   1330              {}
   1331              if (TransferError != SD_OK)
   \                     ??SD_WriteBlock_12:
   \   00000120   3078               LDRB     R0,[R6, #+0]
   \   00000122   2A28               CMP      R0,#+42
   \   00000124   58D0               BEQ.N    ??SD_WriteBlock_13
   1332              {
   1333                return(TransferError);
   \   00000126   3078               LDRB     R0,[R6, #+0]
   \   00000128   93E7               B.N      ??SD_WriteBlock_2
   1334              }
   1335            }
   \                     ??SD_WriteBlock_14:
   \   0000012A   0024               MOVS     R4,#+0
   \                     ??SD_WriteBlock_15:
   \   0000012C   58F82400           LDR      R0,[R8, R4, LSL #+2]
   \   00000130   ........           BL       SDIO_WriteData
   \   00000134   641C               ADDS     R4,R4,#+1
   \   00000136   082C               CMP      R4,#+8
   \   00000138   F8D3               BCC.N    ??SD_WriteBlock_15
   \   0000013A   08F12008           ADD      R8,R8,#+32
   \   0000013E   2037               ADDS     R7,R7,#+32
   \                     ??SD_WriteBlock_10:
   \   00000140   ....               LDR.N    R0,??DataTable18  ;; 0x40018034
   \   00000142   0068               LDR      R0,[R0, #+0]
   \   00000144   40F21A61           MOVW     R1,#+1562
   \   00000148   0842               TST      R0,R1
   \   0000014A   19D1               BNE.N    ??SD_WriteBlock_16
   \   0000014C   4FF48040           MOV      R0,#+16384
   \   00000150   ........           BL       SDIO_GetFlagStatus
   \   00000154   0028               CMP      R0,#+0
   \   00000156   F3D0               BEQ.N    ??SD_WriteBlock_10
   \   00000158   F06D               LDR      R0,[R6, #+92]
   \   0000015A   C11B               SUBS     R1,R0,R7
   \   0000015C   2029               CMP      R1,#+32
   \   0000015E   E4D2               BCS.N    ??SD_WriteBlock_14
   \   00000160   8D08               LSRS     R5,R1,#+2
   \   00000162   C01B               SUBS     R0,R0,R7
   \   00000164   10F0030F           TST      R0,#0x3
   \   00000168   00D0               BEQ.N    ??SD_WriteBlock_17
   \   0000016A   6D1C               ADDS     R5,R5,#+1
   \                     ??SD_WriteBlock_17:
   \   0000016C   0024               MOVS     R4,#+0
   \                     ??SD_WriteBlock_18:
   \   0000016E   AC42               CMP      R4,R5
   \   00000170   E6D2               BCS.N    ??SD_WriteBlock_10
   \   00000172   58F8040B           LDR      R0,[R8], #+4
   \   00000176   ........           BL       SDIO_WriteData
   \   0000017A   641C               ADDS     R4,R4,#+1
   \   0000017C   3F1D               ADDS     R7,R7,#+4
   \   0000017E   F6E7               B.N      ??SD_WriteBlock_18
   \                     ??SD_WriteBlock_16:
   \   00000180   ........           BL       ?Subroutine22
   \                     ??CrossCallReturnLabel_73:
   \   00000184   18B1               CBZ      R0,??SD_WriteBlock_19
   \   00000186   ........           BL       ?Subroutine23
   \                     ??CrossCallReturnLabel_79:
   \   0000018A   0420               MOVS     R0,#+4
   \   0000018C   61E7               B.N      ??SD_WriteBlock_2
   \                     ??SD_WriteBlock_19:
   \   0000018E   ........           BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_9:
   \   00000192   18B1               CBZ      R0,??SD_WriteBlock_20
   \   00000194   ........           BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_15:
   \   00000198   0220               MOVS     R0,#+2
   \   0000019A   5AE7               B.N      ??SD_WriteBlock_2
   \                     ??SD_WriteBlock_20:
   \   0000019C   1020               MOVS     R0,#+16
   \   0000019E   ........           BL       SDIO_GetFlagStatus
   \   000001A2   20B1               CBZ      R0,??SD_WriteBlock_21
   \   000001A4   1020               MOVS     R0,#+16
   \   000001A6   ........           BL       SDIO_ClearFlag
   \   000001AA   0520               MOVS     R0,#+5
   \   000001AC   51E7               B.N      ??SD_WriteBlock_2
   \                     ??SD_WriteBlock_21:
   \   000001AE   ........           BL       ?Subroutine19
   \                     ??CrossCallReturnLabel_56:
   \   000001B2   88B1               CBZ      R0,??SD_WriteBlock_13
   \   000001B4   ........           BL       ?Subroutine20
   \                     ??CrossCallReturnLabel_62:
   \   000001B8   0720               MOVS     R0,#+7
   \                     ??SD_WriteBlock_22:
   \   000001BA   4AE7               B.N      ??SD_WriteBlock_2
   1336            else if (DeviceMode == SD_DMA_MODE)
   \                     ??SD_WriteBlock_11:
   \   000001BC   60B9               CBNZ     R0,??SD_WriteBlock_13
   1337            {
   1338              SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
   \   000001BE   ........           BL       ?Subroutine8
   1339              DMA_TxConfiguration(writebuff, BlockSize);
   \                     ??CrossCallReturnLabel_25:
   \   000001C2   2146               MOV      R1,R4
   \   000001C4   0298               LDR      R0,[SP, #+8]
   \   000001C6   ........           BL       DMA_TxConfiguration
   1340              SDIO_DMACmd(ENABLE);
   \   000001CA   ........           BL       ?Subroutine14
   1341              while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
   \                     ??CrossCallReturnLabel_38:
   \   000001CE   ........           BL       ?Subroutine41
   \                     ??CrossCallReturnLabel_150:
   \   000001D2   0028               CMP      R0,#+0
   \   000001D4   FBD0               BEQ.N    ??CrossCallReturnLabel_38
   1342              {}
   1343            //  while ((TransferEnd == 0) && (TransferError == SD_OK))
   1344            //  {}
   1345              if (TransferError != SD_OK)
   \   000001D6   A3E7               B.N      ??SD_WriteBlock_12
   1346              {
   1347                return(TransferError);
   1348              }
   1349            }
   1350          
   1351            /* Clear all the static flags */
   1352            SDIO_ClearFlag(SDIO_STATIC_FLAGS);
   \                     ??SD_WriteBlock_13:
   \   000001D8   ........           BL       ?Subroutine18
   1353          
   1354            /* Wait till the card is in programming state */
   1355            errorstatus = IsCardProgramming(&cardstate);
   \                     ??CrossCallReturnLabel_49:
   \   000001DC   00A8               ADD      R0,SP,#+0
   \   000001DE   ........           BL       IsCardProgramming
   1356          
   1357            while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
   \   000001E2   2A28               CMP      R0,#+42
   \   000001E4   E9D1               BNE.N    ??SD_WriteBlock_22
   \   000001E6   9DF80010           LDRB     R1,[SP, #+0]
   \   000001EA   0729               CMP      R1,#+7
   \   000001EC   F6D0               BEQ.N    ??CrossCallReturnLabel_49
   \   000001EE   0629               CMP      R1,#+6
   \   000001F0   E3D1               BNE.N    ??SD_WriteBlock_22
   1358            {
   1359              errorstatus = IsCardProgramming(&cardstate);
   \   000001F2   F3E7               B.N      ??CrossCallReturnLabel_49
   1360            }
   1361          
   1362            return(errorstatus);
   1363          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0121               MOVS     R1,#+1
   \   00000002   40F21A30           MOVW     R0,#+794
   \   00000006   ........           B.W      SDIO_ITConfig

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   0121               MOVS     R1,#+1
   \   00000002   44F21A30           MOVW     R0,#+17178
   \   00000006   ........           B.W      SDIO_ITConfig

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine35:
   \   00000000   0D20               MOVS     R0,#+13
   \   00000002   ....               B.N      CmdResp1Error
   1364          
   1365          /*******************************************************************************
   1366          * Function Name  : SD_WriteMultiBlocks
   1367          * Description    : Allows to write blocks starting from a specified address in 
   1368          *                  a card.
   1369          * Input          : - addr: Address from where data are to be read.
   1370          *                  - writebuff: pointer to the buffer that contain the data to be
   1371          *                    transferred.
   1372          *                  - BlockSize: the SD card Data block size.
   1373          *                  - NumberOfBlocks: number of blocks to be written.
   1374          * Output         : None
   1375          * Return         : SD_Error: SD Card Error code.
   1376          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1377          SD_Error SD_WriteMultiBlocks(u32 addr, u32 *writebuff, u16 BlockSize, u32 NumberOfBlocks)
   1378          {
   \                     SD_WriteMultiBlocks:
   \   00000000   2DE9F84F           PUSH     {R3-R11,LR}
   \   00000004   82B0               SUB      SP,SP,#+8
   \   00000006   8246               MOV      R10,R0
   \   00000008   8B46               MOV      R11,R1
   \   0000000A   1646               MOV      R6,R2
   1379            SD_Error errorstatus = SD_OK;
   1380            u8  power = 0, cardstate = 0;
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   8DF80000           STRB     R0,[SP, #+0]
   1381            u32 bytestransferred = 0;
   \   00000012   0027               MOVS     R7,#+0
   1382            u32 count = 0, restwords = 0;
   1383            u32 *tempbuff = writebuff;
   \   00000014   D846               MOV      R8,R11
   1384          
   1385            if (writebuff == NULL)
   \   00000016   BBF1000F           CMP      R11,#+0
   \   0000001A   01D1               BNE.N    ??SD_WriteMultiBlocks_0
   1386            {
   1387              errorstatus = SD_INVALID_PARAMETER;
   1388              return(errorstatus);
   \                     ??SD_WriteMultiBlocks_1:
   \   0000001C   2620               MOVS     R0,#+38
   \   0000001E   18E0               B.N      ??SD_WriteMultiBlocks_2
   1389            }
   1390          
   1391            TransferError = SD_OK;
   \                     ??SD_WriteMultiBlocks_0:
   \   00000020   8E4D               LDR.N    R5,??SD_WriteMultiBlocks_3  ;; TransferError
   \   00000022   2A20               MOVS     R0,#+42
   \   00000024   2870               STRB     R0,[R5, #+0]
   1392            TransferEnd = 0;
   \   00000026   EF66               STR      R7,[R5, #+108]
   1393            TotalNumberOfBytes = 0;
   \   00000028   EF65               STR      R7,[R5, #+92]
   \   0000002A   8D48               LDR.N    R0,??SD_WriteMultiBlocks_3+0x4  ;; 0xfffff
   \   0000002C   6860               STR      R0,[R5, #+4]
   1394          
   1395            SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
   1396            SDIO_DataInitStructure.SDIO_DataLength = 0;
   \   0000002E   AF60               STR      R7,[R5, #+8]
   1397            SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
   \   00000030   EF60               STR      R7,[R5, #+12]
   1398            SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
   \   00000032   2F61               STR      R7,[R5, #+16]
   1399            SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
   \   00000034   6F61               STR      R7,[R5, #+20]
   1400            SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
   \   00000036   AF61               STR      R7,[R5, #+24]
   1401            SDIO_DataConfig(&SDIO_DataInitStructure);
   \   00000038   281D               ADDS     R0,R5,#+4
   \   0000003A   ........           BL       SDIO_DataConfig
   1402            SDIO_DMACmd(DISABLE);
   \   0000003E   0020               MOVS     R0,#+0
   \   00000040   ........           BL       SDIO_DMACmd
   1403          
   1404            if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
   \   00000044   3846               MOV      R0,R7
   \   00000046   ........           BL       SDIO_GetResponse
   \   0000004A   10F0007F           TST      R0,#0x2000000
   \   0000004E   02D0               BEQ.N    ??SD_WriteMultiBlocks_4
   1405            {
   1406              errorstatus = SD_LOCK_UNLOCK_FAILED;
   1407              return(errorstatus);
   \   00000050   0E20               MOVS     R0,#+14
   \                     ??SD_WriteMultiBlocks_2:
   \   00000052   BDE8FE8F           POP      {R1-R11,PC}
   1408            }
   1409          
   1410            if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
   \                     ??SD_WriteMultiBlocks_4:
   \   00000056   286D               LDR      R0,[R5, #+80]
   \   00000058   0228               CMP      R0,#+2
   \   0000005A   04D1               BNE.N    ??SD_WriteMultiBlocks_5
   1411            {
   1412              BlockSize = 512;
   \   0000005C   4FF40076           MOV      R6,#+512
   1413              addr /= 512;
   \   00000060   4FEA5A2A           LSR      R10,R10,#+9
   \   00000064   05E0               B.N      ??SD_WriteMultiBlocks_6
   1414            }
   1415            
   1416            /* Set the block size, both on controller and card */
   1417            if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
   \                     ??SD_WriteMultiBlocks_5:
   \   00000066   002E               CMP      R6,#+0
   \   00000068   D8D0               BEQ.N    ??SD_WriteMultiBlocks_1
   \   0000006A   40F60100           MOVW     R0,#+2049
   \   0000006E   8642               CMP      R6,R0
   \   00000070   D4D2               BCS.N    ??SD_WriteMultiBlocks_1
   \                     ??SD_WriteMultiBlocks_6:
   \   00000072   701E               SUBS     R0,R6,#+1
   \   00000074   0642               TST      R6,R0
   \   00000076   D1D1               BNE.N    ??SD_WriteMultiBlocks_1
   1418            {
   1419              power = convert_from_bytes_to_power_of_two(BlockSize);
   \   00000078   3046               MOV      R0,R6
   \   0000007A   ........           BL       convert_from_bytes_to_power_of_two
   \   0000007E   8146               MOV      R9,R0
   1420          
   1421              SDIO_CmdInitStructure.SDIO_Argument = (u32) BlockSize;
   \   00000080   EE61               STR      R6,[R5, #+28]
   1422              SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
   \   00000082   1020               MOVS     R0,#+16
   \   00000084   2862               STR      R0,[R5, #+32]
   1423              SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   \   00000086   4020               MOVS     R0,#+64
   \   00000088   6862               STR      R0,[R5, #+36]
   1424              SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   \   0000008A   AF62               STR      R7,[R5, #+40]
   1425              SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   \   0000008C   4FF48064           MOV      R4,#+1024
   \   00000090   EC62               STR      R4,[R5, #+44]
   1426              SDIO_SendCommand(&SDIO_CmdInitStructure);
   \   00000092   ........           BL       ??Subroutine54_0
   1427          
   1428              errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
   \                     ??CrossCallReturnLabel_186:
   \   00000096   ........           BL       ?Subroutine34
   1429          
   1430              if (errorstatus != SD_OK)
   \                     ??CrossCallReturnLabel_125:
   \   0000009A   2A28               CMP      R0,#+42
   \   0000009C   D9D1               BNE.N    ??SD_WriteMultiBlocks_2
   1431              {
   1432                return(errorstatus);
   1433              }
   1434            }
   1435            else
   1436            {
   1437              errorstatus = SD_INVALID_PARAMETER;
   1438              return(errorstatus);
   1439            }
   1440          
   1441            /* Wait till card is ready for data Added */
   1442            SDIO_CmdInitStructure.SDIO_Argument = (u32) (RCA << 16);
   \   0000009E   686D               LDR      R0,[R5, #+84]
   \   000000A0   0004               LSLS     R0,R0,#+16
   \   000000A2   E861               STR      R0,[R5, #+28]
   1443            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
   \   000000A4   0D20               MOVS     R0,#+13
   \   000000A6   ........           BL       ?Subroutine28
   1444            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1445            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1446            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1447            SDIO_SendCommand(&SDIO_CmdInitStructure);
   \                     ??CrossCallReturnLabel_96:
   \   000000AA   ........           BL       ??Subroutine54_0
   1448          
   1449            errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
   \                     ??CrossCallReturnLabel_185:
   \   000000AE   ........           BL       ?Subroutine35
   1450          
   1451            if (errorstatus != SD_OK)
   \                     ??CrossCallReturnLabel_131:
   \   000000B2   2A28               CMP      R0,#+42
   \   000000B4   CDD1               BNE.N    ??SD_WriteMultiBlocks_2
   1452            {
   1453              return(errorstatus);
   1454            }
   1455          
   1456            if (NumberOfBlocks > 1)
   \   000000B6   0298               LDR      R0,[SP, #+8]
   \   000000B8   0228               CMP      R0,#+2
   \   000000BA   C0F0B280           BCC.W    ??SD_WriteMultiBlocks_7
   1457            {
   1458              /* Common to all modes */
   1459              if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
   \   000000BE   4643               MULS     R6,R0,R6
   \   000000C0   B6F1007F           CMP      R6,#+33554432
   \   000000C4   AAD2               BCS.N    ??SD_WriteMultiBlocks_1
   1460              {
   1461                errorstatus = SD_INVALID_PARAMETER;
   1462                return(errorstatus);
   1463              }
   1464          
   1465              if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
   \   000000C6   286D               LDR      R0,[R5, #+80]
   \   000000C8   18B1               CBZ      R0,??SD_WriteMultiBlocks_8
   \   000000CA   0128               CMP      R0,#+1
   \   000000CC   01D0               BEQ.N    ??SD_WriteMultiBlocks_8
   \   000000CE   0228               CMP      R0,#+2
   \   000000D0   17D1               BNE.N    ??SD_WriteMultiBlocks_9
   1466              {
   1467                /* To improve performance */
   1468                SDIO_CmdInitStructure.SDIO_Argument = (u32) (RCA << 16);
   \                     ??SD_WriteMultiBlocks_8:
   \   000000D2   686D               LDR      R0,[R5, #+84]
   \   000000D4   0004               LSLS     R0,R0,#+16
   \   000000D6   E861               STR      R0,[R5, #+28]
   1469                SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
   \   000000D8   3720               MOVS     R0,#+55
   \   000000DA   ........           BL       ?Subroutine28
   1470                SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1471                SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1472                SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1473                SDIO_SendCommand(&SDIO_CmdInitStructure);
   \                     ??CrossCallReturnLabel_97:
   \   000000DE   ........           BL       ??Subroutine54_0
   1474          
   1475          
   1476                errorstatus = CmdResp1Error(SDIO_APP_CMD);
   \                     ??CrossCallReturnLabel_184:
   \   000000E2   ........           BL       ?Subroutine31
   1477          
   1478                if (errorstatus != SD_OK)
   \                     ??CrossCallReturnLabel_106:
   \   000000E6   2A28               CMP      R0,#+42
   \   000000E8   B3D1               BNE.N    ??SD_WriteMultiBlocks_2
   1479                {
   1480                  return(errorstatus);
   1481                }
   1482                /* To improve performance */
   1483                SDIO_CmdInitStructure.SDIO_Argument = (u32)NumberOfBlocks;
   \   000000EA   0298               LDR      R0,[SP, #+8]
   \   000000EC   E861               STR      R0,[R5, #+28]
   1484                SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCK_COUNT;
   \   000000EE   1720               MOVS     R0,#+23
   \   000000F0   ........           BL       ?Subroutine28
   1485                SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1486                SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1487                SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1488                SDIO_SendCommand(&SDIO_CmdInitStructure);
   \                     ??CrossCallReturnLabel_98:
   \   000000F4   ........           BL       ??Subroutine54_0
   1489          
   1490                errorstatus = CmdResp1Error(SDIO_SET_BLOCK_COUNT);
   \                     ??CrossCallReturnLabel_183:
   \   000000F8   1720               MOVS     R0,#+23
   \   000000FA   ........           BL       CmdResp1Error
   1491          
   1492                if (errorstatus != SD_OK)
   \   000000FE   2A28               CMP      R0,#+42
   \   00000100   A7D1               BNE.N    ??SD_WriteMultiBlocks_2
   1493                {
   1494                  return(errorstatus);
   1495                }
   1496              }
   1497          
   1498              /* Send CMD25 WRITE_MULT_BLOCK with argument data address */
   1499              SDIO_CmdInitStructure.SDIO_Argument = (u32)addr;
   \                     ??SD_WriteMultiBlocks_9:
   \   00000102   C5F81CA0           STR      R10,[R5, #+28]
   1500              SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_MULT_BLOCK;
   \   00000106   1920               MOVS     R0,#+25
   \   00000108   ........           BL       ?Subroutine28
   1501              SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1502              SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1503              SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1504              SDIO_SendCommand(&SDIO_CmdInitStructure);
   \                     ??CrossCallReturnLabel_99:
   \   0000010C   ........           BL       ??Subroutine54_0
   1505          
   1506              errorstatus = CmdResp1Error(SDIO_WRITE_MULT_BLOCK);
   \                     ??CrossCallReturnLabel_182:
   \   00000110   1920               MOVS     R0,#+25
   \   00000112   ........           BL       CmdResp1Error
   1507          
   1508              if (SD_OK != errorstatus)
   \   00000116   2A28               CMP      R0,#+42
   \   00000118   9BD1               BNE.N    ??SD_WriteMultiBlocks_2
   1509              {
   1510                return(errorstatus);
   1511              }
   1512          
   1513              TotalNumberOfBytes = NumberOfBlocks * BlockSize;
   \   0000011A   EE65               STR      R6,[R5, #+92]
   1514              StopCondition = 1;
   \   0000011C   0120               MOVS     R0,#+1
   \   0000011E   2866               STR      R0,[R5, #+96]
   1515              SrcBuffer = writebuff;
   \   00000120   C5F864B0           STR      R11,[R5, #+100]
   1516          
   1517              SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
   \   00000124   4E48               LDR.N    R0,??SD_WriteMultiBlocks_3+0x4  ;; 0xfffff
   \   00000126   6860               STR      R0,[R5, #+4]
   1518              SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
   \   00000128   AE60               STR      R6,[R5, #+8]
   1519              SDIO_DataInitStructure.SDIO_DataBlockSize = (u32) power << 4;
   \   0000012A   4FEA0910           LSL      R0,R9,#+4
   \   0000012E   E860               STR      R0,[R5, #+12]
   1520              SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
   \   00000130   2F61               STR      R7,[R5, #+16]
   1521              SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
   \   00000132   6F61               STR      R7,[R5, #+20]
   1522              SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
   \   00000134   ........           BL       ?Subroutine15
   1523              SDIO_DataConfig(&SDIO_DataInitStructure);
   1524          
   1525              if (DeviceMode == SD_POLLING_MODE)
   \                     ??CrossCallReturnLabel_42:
   \   00000138   A86D               LDR      R0,[R5, #+88]
   \   0000013A   0228               CMP      R0,#+2
   \   0000013C   19D0               BEQ.N    ??SD_WriteMultiBlocks_10
   1526              {
   1527                while (!(SDIO->STA & (SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
   1528                {
   1529                  if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
   1530                  {
   1531                    if (!((TotalNumberOfBytes - bytestransferred) < SD_HALFFIFOBYTES))
   1532                    {
   1533                      for (count = 0; count < SD_HALFFIFO; count++)
   1534                      {
   1535                        SDIO_WriteData(*(tempbuff + count));
   1536                      }
   1537                      tempbuff += SD_HALFFIFO;
   1538                      bytestransferred += SD_HALFFIFOBYTES;
   1539                    }
   1540                    else
   1541                    {
   1542                      restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - bytestransferred) / 4) :
   1543                                  ((TotalNumberOfBytes - bytestransferred) / 4 + 1);
   1544          
   1545                      for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
   1546                      {
   1547                        SDIO_WriteData(*tempbuff);
   1548                      }
   1549                    }
   1550                  }
   1551                }
   1552          
   1553                if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
   1554                {
   1555                  SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
   1556                  errorstatus = SD_DATA_TIMEOUT;
   1557                  return(errorstatus);
   1558                }
   1559                else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
   1560                {
   1561                  SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
   1562                  errorstatus = SD_DATA_CRC_FAIL;
   1563                  return(errorstatus);
   1564                }
   1565                else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
   1566                {
   1567                  SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
   1568                  errorstatus = SD_TX_UNDERRUN;
   1569                  return(errorstatus);
   1570                }
   1571                else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
   1572                {
   1573                  SDIO_ClearFlag(SDIO_FLAG_STBITERR);
   1574                  errorstatus = SD_START_BIT_ERR;
   1575                  return(errorstatus);
   1576                }
   1577          
   1578                if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
   1579                {
   1580                 if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
   1581                  {
   1582                    /* Send CMD12 STOP_TRANSMISSION */
   1583                    SDIO_CmdInitStructure.SDIO_Argument = 0x0;
   1584                    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
   1585                    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1586                    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1587                    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1588                    SDIO_SendCommand(&SDIO_CmdInitStructure);
   1589          
   1590          
   1591                    errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);
   1592          
   1593                    if (errorstatus != SD_OK)
   1594                    {
   1595                      return(errorstatus);
   1596                    }
   1597                  }
   1598                }
   1599              }
   1600              else if (DeviceMode == SD_INTERRUPT_MODE)
   \   0000013E   0128               CMP      R0,#+1
   \   00000140   40F07D80           BNE.W    ??SD_WriteMultiBlocks_11
   1601              {
   1602                SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXFIFOHE | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
   \   00000144   ........           BL       ?Subroutine7
   1603                while ((TransferEnd == 0) && (TransferError == SD_OK))
   \                     ??CrossCallReturnLabel_22:
   \   00000148   E86E               LDR      R0,[R5, #+108]
   \   0000014A   10B9               CBNZ     R0,??SD_WriteMultiBlocks_12
   \   0000014C   2878               LDRB     R0,[R5, #+0]
   \   0000014E   2A28               CMP      R0,#+42
   \   00000150   FAD0               BEQ.N    ??CrossCallReturnLabel_22
   1604                {}
   1605                if (TransferError != SD_OK)
   \                     ??SD_WriteMultiBlocks_12:
   \   00000152   2878               LDRB     R0,[R5, #+0]
   \   00000154   2A28               CMP      R0,#+42
   \   00000156   64D0               BEQ.N    ??SD_WriteMultiBlocks_7
   1606                {
   1607                  return(TransferError);
   \   00000158   2878               LDRB     R0,[R5, #+0]
   \   0000015A   7AE7               B.N      ??SD_WriteMultiBlocks_2
   1608                }
   1609              }
   \                     ??SD_WriteMultiBlocks_13:
   \   0000015C   0026               MOVS     R6,#+0
   \                     ??SD_WriteMultiBlocks_14:
   \   0000015E   58F82600           LDR      R0,[R8, R6, LSL #+2]
   \   00000162   ........           BL       SDIO_WriteData
   \   00000166   761C               ADDS     R6,R6,#+1
   \   00000168   082E               CMP      R6,#+8
   \   0000016A   F8D3               BCC.N    ??SD_WriteMultiBlocks_14
   \   0000016C   08F12008           ADD      R8,R8,#+32
   \   00000170   2037               ADDS     R7,R7,#+32
   \                     ??SD_WriteMultiBlocks_10:
   \   00000172   ....               LDR.N    R0,??DataTable20  ;; 0x40018034
   \   00000174   0068               LDR      R0,[R0, #+0]
   \   00000176   40F21A31           MOVW     R1,#+794
   \   0000017A   0842               TST      R0,R1
   \   0000017C   1BD1               BNE.N    ??SD_WriteMultiBlocks_15
   \   0000017E   4FF48040           MOV      R0,#+16384
   \   00000182   ........           BL       SDIO_GetFlagStatus
   \   00000186   0028               CMP      R0,#+0
   \   00000188   F3D0               BEQ.N    ??SD_WriteMultiBlocks_10
   \   0000018A   E86D               LDR      R0,[R5, #+92]
   \   0000018C   C11B               SUBS     R1,R0,R7
   \   0000018E   2029               CMP      R1,#+32
   \   00000190   E4D2               BCS.N    ??SD_WriteMultiBlocks_13
   \   00000192   4FEA910A           LSR      R10,R1,#+2
   \   00000196   C01B               SUBS     R0,R0,R7
   \   00000198   10F0030F           TST      R0,#0x3
   \   0000019C   01D0               BEQ.N    ??SD_WriteMultiBlocks_16
   \   0000019E   0AF1010A           ADD      R10,R10,#+1
   \                     ??SD_WriteMultiBlocks_16:
   \   000001A2   0026               MOVS     R6,#+0
   \                     ??SD_WriteMultiBlocks_17:
   \   000001A4   5645               CMP      R6,R10
   \   000001A6   E4D2               BCS.N    ??SD_WriteMultiBlocks_10
   \   000001A8   58F8040B           LDR      R0,[R8], #+4
   \   000001AC   ........           BL       SDIO_WriteData
   \   000001B0   761C               ADDS     R6,R6,#+1
   \   000001B2   3F1D               ADDS     R7,R7,#+4
   \   000001B4   F6E7               B.N      ??SD_WriteMultiBlocks_17
   \                     ??SD_WriteMultiBlocks_15:
   \   000001B6   ........           BL       ?Subroutine22
   \                     ??CrossCallReturnLabel_72:
   \   000001BA   18B1               CBZ      R0,??SD_WriteMultiBlocks_18
   \   000001BC   ........           BL       ?Subroutine23
   \                     ??CrossCallReturnLabel_78:
   \   000001C0   0420               MOVS     R0,#+4
   \   000001C2   46E7               B.N      ??SD_WriteMultiBlocks_2
   \                     ??SD_WriteMultiBlocks_18:
   \   000001C4   ........           BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_8:
   \   000001C8   18B1               CBZ      R0,??SD_WriteMultiBlocks_19
   \   000001CA   ........           BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_14:
   \   000001CE   0220               MOVS     R0,#+2
   \   000001D0   3FE7               B.N      ??SD_WriteMultiBlocks_2
   \                     ??SD_WriteMultiBlocks_19:
   \   000001D2   1020               MOVS     R0,#+16
   \   000001D4   ........           BL       SDIO_GetFlagStatus
   \   000001D8   20B1               CBZ      R0,??SD_WriteMultiBlocks_20
   \   000001DA   1020               MOVS     R0,#+16
   \   000001DC   ........           BL       SDIO_ClearFlag
   \   000001E0   0520               MOVS     R0,#+5
   \   000001E2   36E7               B.N      ??SD_WriteMultiBlocks_2
   \                     ??SD_WriteMultiBlocks_20:
   \   000001E4   ........           BL       ?Subroutine19
   \                     ??CrossCallReturnLabel_55:
   \   000001E8   18B1               CBZ      R0,??SD_WriteMultiBlocks_21
   \   000001EA   ........           BL       ?Subroutine20
   \                     ??CrossCallReturnLabel_61:
   \   000001EE   0720               MOVS     R0,#+7
   \                     ??SD_WriteMultiBlocks_22:
   \   000001F0   2FE7               B.N      ??SD_WriteMultiBlocks_2
   \                     ??SD_WriteMultiBlocks_21:
   \   000001F2   4FF48070           MOV      R0,#+256
   \   000001F6   ........           BL       SDIO_GetFlagStatus
   \   000001FA   90B1               CBZ      R0,??SD_WriteMultiBlocks_7
   \   000001FC   286D               LDR      R0,[R5, #+80]
   \   000001FE   18B1               CBZ      R0,??SD_WriteMultiBlocks_23
   \   00000200   0128               CMP      R0,#+1
   \   00000202   01D0               BEQ.N    ??SD_WriteMultiBlocks_23
   \   00000204   0228               CMP      R0,#+2
   \   00000206   0CD1               BNE.N    ??SD_WriteMultiBlocks_7
   \                     ??SD_WriteMultiBlocks_23:
   \   00000208   0020               MOVS     R0,#+0
   \   0000020A   E861               STR      R0,[R5, #+28]
   \   0000020C   0C20               MOVS     R0,#+12
   \   0000020E   ........           BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_134:
   \   00000212   EC62               STR      R4,[R5, #+44]
   \   00000214   ........           BL       ??Subroutine54_0
   \                     ??CrossCallReturnLabel_181:
   \   00000218   0C20               MOVS     R0,#+12
   \   0000021A   ........           BL       CmdResp1Error
   \   0000021E   2A28               CMP      R0,#+42
   \   00000220   E6D1               BNE.N    ??SD_WriteMultiBlocks_22
   1610              else if (DeviceMode == SD_DMA_MODE)
   1611              {
   1612                SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
   1613                SDIO_DMACmd(ENABLE);
   1614                DMA_TxConfiguration(writebuff, (NumberOfBlocks * BlockSize));
   1615                while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
   1616                {}
   1617                while ((TransferEnd == 0) && (TransferError == SD_OK))
   1618                {}
   1619                if (TransferError != SD_OK)
   1620                {
   1621                  return(TransferError);
   1622                }
   1623              }
   1624            }
   1625            /* Clear all the static flags */
   1626            SDIO_ClearFlag(SDIO_STATIC_FLAGS);
   \                     ??SD_WriteMultiBlocks_7:
   \   00000222   ........           BL       ?Subroutine18
   1627          
   1628            /* Wait till the card is in programming state */
   1629            errorstatus = IsCardProgramming(&cardstate);
   \                     ??CrossCallReturnLabel_48:
   \   00000226   00A8               ADD      R0,SP,#+0
   \   00000228   ........           BL       IsCardProgramming
   1630          
   1631            while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
   \   0000022C   2A28               CMP      R0,#+42
   \   0000022E   DFD1               BNE.N    ??SD_WriteMultiBlocks_22
   \   00000230   9DF80010           LDRB     R1,[SP, #+0]
   \   00000234   0729               CMP      R1,#+7
   \   00000236   F6D0               BEQ.N    ??CrossCallReturnLabel_48
   \   00000238   0629               CMP      R1,#+6
   \   0000023A   D9D1               BNE.N    ??SD_WriteMultiBlocks_22
   1632            {
   1633              errorstatus = IsCardProgramming(&cardstate);
   \   0000023C   F3E7               B.N      ??CrossCallReturnLabel_48
   1634            }
   \                     ??SD_WriteMultiBlocks_11:
   \   0000023E   0028               CMP      R0,#+0
   \   00000240   EFD1               BNE.N    ??SD_WriteMultiBlocks_7
   \   00000242   ........           BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_24:
   \   00000246   ........           BL       ?Subroutine14
   \                     ??CrossCallReturnLabel_37:
   \   0000024A   3146               MOV      R1,R6
   \   0000024C   5846               MOV      R0,R11
   \   0000024E   ........           BL       DMA_TxConfiguration
   \                     ??SD_WriteMultiBlocks_24:
   \   00000252   ........           BL       ?Subroutine41
   \                     ??CrossCallReturnLabel_149:
   \   00000256   0028               CMP      R0,#+0
   \   00000258   FBD0               BEQ.N    ??SD_WriteMultiBlocks_24
   \   0000025A   75E7               B.N      ??CrossCallReturnLabel_22
   \                     ??SD_WriteMultiBlocks_3:
   \   0000025C   ........           DC32     TransferError
   \   00000260   FFFF0F00           DC32     0xfffff
   1635          
   1636            return(errorstatus);
   1637          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   2862               STR      R0,[R5, #+32]
   \   00000002   4020               MOVS     R0,#+64
   \   00000004   6862               STR      R0,[R5, #+36]
   \   00000006   AF62               STR      R7,[R5, #+40]
   \   00000008   EC62               STR      R4,[R5, #+44]
   \   0000000A   7047               BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine36:
   \   00000000   2862               STR      R0,[R5, #+32]
   \   00000002   4020               MOVS     R0,#+64
   \   00000004   6862               STR      R0,[R5, #+36]
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   A862               STR      R0,[R5, #+40]
   \   0000000A   7047               BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   0120               MOVS     R0,#+1
   \   00000002   A861               STR      R0,[R5, #+24]
   \   00000004   281D               ADDS     R0,R5,#+4
   \   00000006   ........           B.W      SDIO_DataConfig
   1638          
   1639          /*******************************************************************************
   1640          * Function Name  : SD_GetTransferState
   1641          * Description    : Gets the cuurent data transfer state.
   1642          * Input          : None
   1643          * Output         : None
   1644          * Return         : SDTransferState: Data Transfer state.
   1645          *                  This value can be: 
   1646          *                   - SD_NO_TRANSFER: No data transfer is acting
   1647          *                   - SD_TRANSFER_IN_PROGRESS: Data transfer is acting
   1648          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1649          SDTransferState SD_GetTransferState(void)
   1650          {
   1651            if (SDIO->STA & (SDIO_FLAG_TXACT | SDIO_FLAG_RXACT))
   \                     SD_GetTransferState:
   \   00000000   0348               LDR.N    R0,??SD_GetTransferState_0  ;; 0x40018034
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   10F44050           ANDS     R0,R0,#0x3000
   \   00000008   00D0               BEQ.N    ??SD_GetTransferState_1
   \   0000000A   0120               MOVS     R0,#+1
   \                     ??SD_GetTransferState_1:
   \   0000000C   C0B2               UXTB     R0,R0
   1652            {
   1653              return(SD_TRANSFER_IN_PROGRESS);
   1654            }
   1655            else
   1656            {
   1657              return(SD_NO_TRANSFER);
   \   0000000E   7047               BX       LR               ;; return
   \                     ??SD_GetTransferState_0:
   \   00000010   34800140           DC32     0x40018034
   1658            }
   1659          }
   1660          
   1661          /*******************************************************************************
   1662          * Function Name  : SD_StopTransfer
   1663          * Description    : Aborts an ongoing data transfer.
   1664          * Input          : None
   1665          * Output         : None
   1666          * Return         : SD_Error: SD Card Error code.
   1667          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1668          SD_Error SD_StopTransfer(void)
   1669          {
   \                     SD_StopTransfer:
   \   00000000   80B5               PUSH     {R7,LR}
   1670            SD_Error errorstatus = SD_OK;
   1671          
   1672            /* Send CMD12 STOP_TRANSMISSION  */
   1673            SDIO_CmdInitStructure.SDIO_Argument = 0x0;
   \   00000002   0448               LDR.N    R0,??SD_StopTransfer_0  ;; TransferError
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   C161               STR      R1,[R0, #+28]
   1674            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
   \   00000008   0C21               MOVS     R1,#+12
   \   0000000A   ........           BL       ??Subroutine50_0
   1675            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1676            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1677            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1678            SDIO_SendCommand(&SDIO_CmdInitStructure);
   1679          
   1680            errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);
   1681          
   1682            return(errorstatus);
   \                     ??CrossCallReturnLabel_178:
   \   0000000E   0C20               MOVS     R0,#+12
   \   00000010   ........           B.W      ?Subroutine1
   \                     ??SD_StopTransfer_0:
   \   00000014   ........           DC32     TransferError
   1683          }

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine50_0:
   \   00000000   0162               STR      R1,[R0, #+32]
   \   00000002   4021               MOVS     R1,#+64
   \   00000004   4162               STR      R1,[R0, #+36]
   \   00000006   0021               MOVS     R1,#+0
   \   00000008   8162               STR      R1,[R0, #+40]
   \   0000000A   4FF48061           MOV      R1,#+1024
   \   0000000E   C162               STR      R1,[R0, #+44]
   \   00000010   1C30               ADDS     R0,R0,#+28
   \   00000012   ........           B.W      SDIO_SendCommand
   1684          
   1685          /*******************************************************************************
   1686          * Function Name  : SD_Erase
   1687          * Description    : Allows to erase memory area specified for the given card.
   1688          * Input          : - startaddr: the start address.
   1689          *                  - endaddr: the end address.
   1690          * Output         : None
   1691          * Return         : SD_Error: SD Card Error code.
   1692          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1693          SD_Error SD_Erase(u32 startaddr, u32 endaddr)
   1694          {
   \                     SD_Erase:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   83B0               SUB      SP,SP,#+12
   \   00000004   0546               MOV      R5,R0
   \   00000006   0C46               MOV      R4,R1
   1695            SD_Error errorstatus = SD_OK;
   1696            u32 delay = 0;
   1697            vu32 maxdelay = 0;
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   0190               STR      R0,[SP, #+4]
   1698            u8 cardstate = 0;
   \   0000000C   8DF80000           STRB     R0,[SP, #+0]
   1699          
   1700            /* Check if the card coomnd class supports erase command */
   1701            if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
   \   00000010   2A4E               LDR.N    R6,??SD_Erase_0  ;; TransferError
   \   00000012   706B               LDR      R0,[R6, #+52]
   \   00000014   000D               LSRS     R0,R0,#+20
   \   00000016   10F0200F           TST      R0,#0x20
   \   0000001A   01D1               BNE.N    ??SD_Erase_1
   1702            {
   1703              errorstatus = SD_REQUEST_NOT_APPLICABLE;
   1704              return(errorstatus);
   \   0000001C   2520               MOVS     R0,#+37
   \                     ??SD_Erase_2:
   \   0000001E   FEBD               POP      {R1-R7,PC}       ;; return
   1705            }
   1706          
   1707            maxdelay = 72000 / ((SDIO->CLKCR & 0xFF) + 2);
   \                     ??SD_Erase_1:
   \   00000020   2748               LDR.N    R0,??SD_Erase_0+0x4  ;; 0x11940
   \   00000022   2849               LDR.N    R1,??SD_Erase_0+0x8  ;; 0x40018004
   \   00000024   0968               LDR      R1,[R1, #+0]
   \   00000026   C9B2               UXTB     R1,R1
   \   00000028   891C               ADDS     R1,R1,#+2
   \   0000002A   B0FBF1F0           UDIV     R0,R0,R1
   \   0000002E   0190               STR      R0,[SP, #+4]
   1708          
   1709            if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
   \   00000030   ........           BL       ?Subroutine32
   \                     ??CrossCallReturnLabel_114:
   \   00000034   10F0007F           TST      R0,#0x2000000
   \   00000038   01D0               BEQ.N    ??SD_Erase_3
   1710            {
   1711              errorstatus = SD_LOCK_UNLOCK_FAILED;
   1712              return(errorstatus);
   \   0000003A   0E20               MOVS     R0,#+14
   \   0000003C   FEBD               POP      {R1-R7,PC}
   1713            }
   1714          
   1715            if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
   \                     ??SD_Erase_3:
   \   0000003E   306D               LDR      R0,[R6, #+80]
   \   00000040   4FF48067           MOV      R7,#+1024
   \   00000044   0228               CMP      R0,#+2
   \   00000046   02D1               BNE.N    ??SD_Erase_4
   1716            {
   1717              startaddr /= 512;
   \   00000048   6D0A               LSRS     R5,R5,#+9
   1718              endaddr /= 512;
   \   0000004A   640A               LSRS     R4,R4,#+9
   \   0000004C   02E0               B.N      ??SD_Erase_5
   1719            }
   1720            
   1721            /* According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */
   1722            if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
   \                     ??SD_Erase_4:
   \   0000004E   08B1               CBZ      R0,??SD_Erase_5
   \   00000050   0128               CMP      R0,#+1
   \   00000052   15D1               BNE.N    ??SD_Erase_6
   1723            {
   1724              /* Send CMD32 SD_ERASE_GRP_START with argument as addr  */
   1725              SDIO_CmdInitStructure.SDIO_Argument = startaddr;
   \                     ??SD_Erase_5:
   \   00000054   F561               STR      R5,[R6, #+28]
   1726              SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_ERASE_GRP_START;
   \   00000056   2020               MOVS     R0,#+32
   \   00000058   ........           BL       ?Subroutine27
   1727              SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1728              SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1729              SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1730              SDIO_SendCommand(&SDIO_CmdInitStructure);
   \                     ??CrossCallReturnLabel_93:
   \   0000005C   ........           BL       ??Subroutine49_0
   1731          
   1732              errorstatus = CmdResp1Error(SDIO_SD_ERASE_GRP_START);
   \                     ??CrossCallReturnLabel_171:
   \   00000060   2020               MOVS     R0,#+32
   \   00000062   ........           BL       CmdResp1Error
   1733              if (errorstatus != SD_OK)
   \   00000066   2A28               CMP      R0,#+42
   \   00000068   D9D1               BNE.N    ??SD_Erase_2
   1734              {
   1735                return(errorstatus);
   1736              }
   1737          
   1738              /* Send CMD33 SD_ERASE_GRP_END with argument as addr  */
   1739              SDIO_CmdInitStructure.SDIO_Argument = endaddr;
   \   0000006A   F461               STR      R4,[R6, #+28]
   1740              SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_ERASE_GRP_END;
   \   0000006C   2120               MOVS     R0,#+33
   \   0000006E   ........           BL       ?Subroutine27
   1741              SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1742              SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1743              SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1744              SDIO_SendCommand(&SDIO_CmdInitStructure);
   \                     ??CrossCallReturnLabel_94:
   \   00000072   ........           BL       ??Subroutine49_0
   1745          
   1746              errorstatus = CmdResp1Error(SDIO_SD_ERASE_GRP_END);
   \                     ??CrossCallReturnLabel_170:
   \   00000076   2120               MOVS     R0,#+33
   \   00000078   ........           BL       CmdResp1Error
   1747              if (errorstatus != SD_OK)
   \   0000007C   2A28               CMP      R0,#+42
   \   0000007E   CED1               BNE.N    ??SD_Erase_2
   1748              {
   1749                return(errorstatus);
   1750              }
   1751            }
   1752          
   1753            /* Send CMD38 ERASE */
   1754            SDIO_CmdInitStructure.SDIO_Argument = 0;
   \                     ??SD_Erase_6:
   \   00000080   0020               MOVS     R0,#+0
   \   00000082   F061               STR      R0,[R6, #+28]
   1755            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_ERASE;
   \   00000084   2620               MOVS     R0,#+38
   \   00000086   ........           BL       ?Subroutine27
   1756            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1757            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1758            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1759            SDIO_SendCommand(&SDIO_CmdInitStructure);
   \                     ??CrossCallReturnLabel_95:
   \   0000008A   ........           BL       ??Subroutine49_0
   1760          
   1761            errorstatus = CmdResp1Error(SDIO_ERASE);
   \                     ??CrossCallReturnLabel_169:
   \   0000008E   2620               MOVS     R0,#+38
   \   00000090   ........           BL       CmdResp1Error
   1762          
   1763            if (errorstatus != SD_OK)
   \   00000094   2A28               CMP      R0,#+42
   \   00000096   C2D1               BNE.N    ??SD_Erase_2
   1764            {
   1765              return(errorstatus);
   1766            }
   1767          
   1768            for (delay = 0; delay < maxdelay; delay++)
   \   00000098   0020               MOVS     R0,#+0
   \   0000009A   00E0               B.N      ??SD_Erase_7
   \                     ??SD_Erase_8:
   \   0000009C   401C               ADDS     R0,R0,#+1
   \                     ??SD_Erase_7:
   \   0000009E   0199               LDR      R1,[SP, #+4]
   \   000000A0   8842               CMP      R0,R1
   \   000000A2   FBD3               BCC.N    ??SD_Erase_8
   1769            {}
   1770          
   1771            /* Wait till the card is in programming state */
   1772            errorstatus = IsCardProgramming(&cardstate);
   \                     ??SD_Erase_9:
   \   000000A4   00A8               ADD      R0,SP,#+0
   \   000000A6   ........           BL       IsCardProgramming
   1773          
   1774            while ((errorstatus == SD_OK) && ((SD_CARD_PROGRAMMING == cardstate) || (SD_CARD_RECEIVING == cardstate)))
   \   000000AA   2A28               CMP      R0,#+42
   \   000000AC   B7D1               BNE.N    ??SD_Erase_2
   \   000000AE   9DF80010           LDRB     R1,[SP, #+0]
   \   000000B2   0729               CMP      R1,#+7
   \   000000B4   F6D0               BEQ.N    ??SD_Erase_9
   \   000000B6   0629               CMP      R1,#+6
   \   000000B8   B1D1               BNE.N    ??SD_Erase_2
   1775            {
   1776              errorstatus = IsCardProgramming(&cardstate);
   \   000000BA   F3E7               B.N      ??SD_Erase_9
   \                     ??SD_Erase_0:
   \   000000BC   ........           DC32     TransferError
   \   000000C0   40190100           DC32     0x11940
   \   000000C4   04800140           DC32     0x40018004
   1777            }
   1778          
   1779            return(errorstatus);
   1780          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   3062               STR      R0,[R6, #+32]
   \   00000002   4020               MOVS     R0,#+64
   \   00000004   7062               STR      R0,[R6, #+36]
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   B062               STR      R0,[R6, #+40]
   \   0000000A   F762               STR      R7,[R6, #+44]
   \   0000000C   7047               BX       LR
   1781          
   1782          /*******************************************************************************
   1783          * Function Name  : SD_SendStatus
   1784          * Description    : Returns the current card's status.
   1785          * Input          : pcardstatus: pointer to the buffer that will contain the SD 
   1786          *                  card status (Card Status register).
   1787          * Output         : None
   1788          * Return         : SD_Error: SD Card Error code.
   1789          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1790          SD_Error SD_SendStatus(u32 *pcardstatus)
   1791          {
   \                     SD_SendStatus:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
   1792            SD_Error errorstatus = SD_OK;
   1793          
   1794            if (pcardstatus == NULL)
   \   00000004   01D1               BNE.N    ??SD_SendStatus_0
   1795            {
   1796              errorstatus = SD_INVALID_PARAMETER;
   1797              return(errorstatus);
   \   00000006   2620               MOVS     R0,#+38
   \   00000008   10BD               POP      {R4,PC}          ;; return
   1798            }
   1799          
   1800            SDIO_CmdInitStructure.SDIO_Argument = (u32) RCA << 16;
   \                     ??SD_SendStatus_0:
   \   0000000A   ........           BL       ?Subroutine10
   1801            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
   1802            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1803            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1804            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1805            SDIO_SendCommand(&SDIO_CmdInitStructure);
   1806          
   1807          
   1808            errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
   \                     ??CrossCallReturnLabel_180:
   \   0000000E   ........           BL       ?Subroutine35
   1809          
   1810            if (errorstatus != SD_OK)
   \                     ??CrossCallReturnLabel_130:
   \   00000012   2A28               CMP      R0,#+42
   \   00000014   03D1               BNE.N    ??SD_SendStatus_1
   1811            {
   1812              return(errorstatus);
   1813            }
   1814          
   1815            *pcardstatus = SDIO_GetResponse(SDIO_RESP1);
   \   00000016   ........           BL       ?Subroutine32
   \                     ??CrossCallReturnLabel_113:
   \   0000001A   2060               STR      R0,[R4, #+0]
   1816          
   1817            return(errorstatus);
   \   0000001C   2A20               MOVS     R0,#+42
   \                     ??SD_SendStatus_1:
   \   0000001E   10BD               POP      {R4,PC}          ;; return
   1818          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine10:
   \   00000000   ....               LDR.N    R0,??DataTable21  ;; TransferError
   \   00000002   416D               LDR      R1,[R0, #+84]
   \   00000004   0904               LSLS     R1,R1,#+16
   \   00000006   C161               STR      R1,[R0, #+28]
   \   00000008   0D21               MOVS     R1,#+13
   \   0000000A   00BF               Nop      
   \   0000000C                      REQUIRE ??Subroutine50_0
   \   0000000C                      ;; // Fall through to label ??Subroutine50_0
   1819          
   1820          /*******************************************************************************
   1821          * Function Name  : SD_SendSDStatus
   1822          * Description    : Returns the current SD card's status.
   1823          * Input          : psdstatus: pointer to the buffer that will contain the SD 
   1824          *                  card status (SD Status register).
   1825          * Output         : None
   1826          * Return         : SD_Error: SD Card Error code.
   1827          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1828          SD_Error SD_SendSDStatus(u32 *psdstatus)
   1829          {
   \                     SD_SendSDStatus:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0446               MOV      R4,R0
   1830            SD_Error errorstatus = SD_OK;
   1831            u32 count = 0;
   1832          
   1833            if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
   \   00000004   ........           BL       ?Subroutine32
   \                     ??CrossCallReturnLabel_112:
   \   00000008   10F0007F           TST      R0,#0x2000000
   \   0000000C   01D0               BEQ.N    ??SD_SendSDStatus_0
   1834            {
   1835              errorstatus = SD_LOCK_UNLOCK_FAILED;
   1836              return(errorstatus);
   \   0000000E   0E20               MOVS     R0,#+14
   \   00000010   F2BD               POP      {R1,R4-R7,PC}    ;; return
   1837            }
   1838          
   1839            /* Set block size for card if it is not equal to current block size for card. */
   1840            SDIO_CmdInitStructure.SDIO_Argument = 64;
   \                     ??SD_SendSDStatus_0:
   \   00000012   3F4D               LDR.N    R5,??SD_SendSDStatus_1  ;; TransferError
   \   00000014   4020               MOVS     R0,#+64
   \   00000016   E861               STR      R0,[R5, #+28]
   1841            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
   \   00000018   1020               MOVS     R0,#+16
   \   0000001A   ........           BL       ?Subroutine36
   1842            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1843            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1844            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   \                     ??CrossCallReturnLabel_135:
   \   0000001E   4FF48066           MOV      R6,#+1024
   \   00000022   ........           BL       ??Subroutine53_0
   1845            SDIO_SendCommand(&SDIO_CmdInitStructure);
   1846          
   1847            errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
   \                     ??CrossCallReturnLabel_187:
   \   00000026   ........           BL       ?Subroutine34
   \                     ??CrossCallReturnLabel_124:
   \   0000002A   0746               MOV      R7,R0
   1848          
   1849            if (errorstatus != SD_OK)
   \   0000002C   2A28               CMP      R0,#+42
   \   0000002E   01D0               BEQ.N    ??SD_SendSDStatus_2
   1850            {
   1851              return(errorstatus);
   \                     ??SD_SendSDStatus_3:
   \   00000030   3846               MOV      R0,R7
   \   00000032   F2BD               POP      {R1,R4-R7,PC}
   1852            }
   1853          
   1854            /* CMD55 */
   1855            SDIO_CmdInitStructure.SDIO_Argument = (u32) RCA << 16;
   \                     ??SD_SendSDStatus_2:
   \   00000034   686D               LDR      R0,[R5, #+84]
   \   00000036   0004               LSLS     R0,R0,#+16
   \   00000038   ........           BL       ?Subroutine16
   1856            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
   1857            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1858            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1859            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1860            SDIO_SendCommand(&SDIO_CmdInitStructure);
   1861            errorstatus = CmdResp1Error(SDIO_APP_CMD);
   \                     ??CrossCallReturnLabel_195:
   \   0000003C   ........           BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_105:
   \   00000040   0746               MOV      R7,R0
   1862          
   1863            if (errorstatus != SD_OK)
   \   00000042   2A28               CMP      R0,#+42
   \   00000044   F4D1               BNE.N    ??SD_SendSDStatus_3
   1864            {
   1865              return(errorstatus);
   1866            }
   1867          
   1868            SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
   \   00000046   3348               LDR.N    R0,??SD_SendSDStatus_1+0x4  ;; 0xfffff
   \   00000048   6860               STR      R0,[R5, #+4]
   1869            SDIO_DataInitStructure.SDIO_DataLength = 64;
   \   0000004A   4020               MOVS     R0,#+64
   \   0000004C   A860               STR      R0,[R5, #+8]
   1870            SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_64b;
   \   0000004E   6020               MOVS     R0,#+96
   \   00000050   E860               STR      R0,[R5, #+12]
   1871            SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
   \   00000052   0220               MOVS     R0,#+2
   \   00000054   2861               STR      R0,[R5, #+16]
   1872            SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
   \   00000056   0020               MOVS     R0,#+0
   \   00000058   6861               STR      R0,[R5, #+20]
   1873            SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
   \   0000005A   ........           BL       ?Subroutine15
   1874            SDIO_DataConfig(&SDIO_DataInitStructure);
   1875          
   1876          
   1877            /* Send ACMD13 SD_APP_STAUS  with argument as card's RCA.*/
   1878            SDIO_CmdInitStructure.SDIO_Argument = 0;
   \                     ??CrossCallReturnLabel_41:
   \   0000005E   0020               MOVS     R0,#+0
   \   00000060   E861               STR      R0,[R5, #+28]
   1879            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_STAUS;
   \   00000062   0D20               MOVS     R0,#+13
   \   00000064   ........           BL       ??Subroutine51_0
   1880            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   1881            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   1882            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   1883            SDIO_SendCommand(&SDIO_CmdInitStructure);
   1884            errorstatus = CmdResp1Error(SDIO_SD_APP_STAUS);
   \                     ??CrossCallReturnLabel_191:
   \   00000068   ........           BL       ?Subroutine35
   \                     ??CrossCallReturnLabel_129:
   \   0000006C   0746               MOV      R7,R0
   1885          
   1886            if (errorstatus != SD_OK)
   \   0000006E   2A28               CMP      R0,#+42
   \   00000070   DED1               BNE.N    ??SD_SendSDStatus_3
   \   00000072   0BE0               B.N      ??SD_SendSDStatus_4
   1887            {
   1888              return(errorstatus);
   1889            }
   1890          
   1891            while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
   1892            {
   1893              if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
   \                     ??SD_SendSDStatus_5:
   \   00000074   ........           BL       ?Subroutine24
   \                     ??CrossCallReturnLabel_82:
   \   00000078   40B1               CBZ      R0,??SD_SendSDStatus_4
   1894              {
   1895                for (count = 0; count < 8; count++)
   \   0000007A   0025               MOVS     R5,#+0
   1896                {
   1897                  *(psdstatus + count) = SDIO_ReadData();
   \                     ??SD_SendSDStatus_6:
   \   0000007C   ........           BL       SDIO_ReadData
   \   00000080   44F82500           STR      R0,[R4, R5, LSL #+2]
   1898                }
   \   00000084   6D1C               ADDS     R5,R5,#+1
   \   00000086   082D               CMP      R5,#+8
   \   00000088   F8D3               BCC.N    ??SD_SendSDStatus_6
   1899                psdstatus += 8;
   \   0000008A   2034               ADDS     R4,R4,#+32
   1900              }
   1901            }
   \                     ??SD_SendSDStatus_4:
   \   0000008C   ........           BL       ?Subroutine37
   \                     ??CrossCallReturnLabel_137:
   \   00000090   F0D0               BEQ.N    ??SD_SendSDStatus_5
   1902          
   1903            if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
   \   00000092   ........           BL       ?Subroutine22
   \                     ??CrossCallReturnLabel_71:
   \   00000096   18B1               CBZ      R0,??SD_SendSDStatus_7
   1904            {
   1905              SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
   \   00000098   ........           BL       ?Subroutine23
   1906              errorstatus = SD_DATA_TIMEOUT;
   1907              return(errorstatus);
   \                     ??CrossCallReturnLabel_77:
   \   0000009C   0420               MOVS     R0,#+4
   \   0000009E   F2BD               POP      {R1,R4-R7,PC}
   1908            }
   1909            else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
   \                     ??SD_SendSDStatus_7:
   \   000000A0   ........           BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_7:
   \   000000A4   18B1               CBZ      R0,??SD_SendSDStatus_8
   1910            {
   1911              SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
   \   000000A6   ........           BL       ?Subroutine4
   1912              errorstatus = SD_DATA_CRC_FAIL;
   1913              return(errorstatus);
   \                     ??CrossCallReturnLabel_13:
   \   000000AA   0220               MOVS     R0,#+2
   \   000000AC   F2BD               POP      {R1,R4-R7,PC}
   1914            }
   1915            else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
   \                     ??SD_SendSDStatus_8:
   \   000000AE   ........           BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_86:
   \   000000B2   18B1               CBZ      R0,??SD_SendSDStatus_9
   1916            {
   1917              SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
   \   000000B4   ........           BL       ?Subroutine26
   1918              errorstatus = SD_RX_OVERRUN;
   1919              return(errorstatus);
   \                     ??CrossCallReturnLabel_90:
   \   000000B8   0620               MOVS     R0,#+6
   \   000000BA   F2BD               POP      {R1,R4-R7,PC}
   1920            }
   1921            else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
   \                     ??SD_SendSDStatus_9:
   \   000000BC   ........           BL       ?Subroutine19
   \                     ??CrossCallReturnLabel_54:
   \   000000C0   38B1               CBZ      R0,??SD_SendSDStatus_10
   1922            {
   1923              SDIO_ClearFlag(SDIO_FLAG_STBITERR);
   \   000000C2   ........           BL       ?Subroutine20
   1924              errorstatus = SD_START_BIT_ERR;
   1925              return(errorstatus);
   \                     ??CrossCallReturnLabel_60:
   \   000000C6   0720               MOVS     R0,#+7
   \   000000C8   F2BD               POP      {R1,R4-R7,PC}
   1926            }
   1927          
   1928            while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
   1929            {
   1930              *psdstatus = SDIO_ReadData();
   \                     ??SD_SendSDStatus_11:
   \   000000CA   ........           BL       SDIO_ReadData
   \   000000CE   44F8040B           STR      R0,[R4], #+4
   1931              psdstatus++;
   1932            }
   \                     ??SD_SendSDStatus_10:
   \   000000D2   ........           BL       ?Subroutine21
   \                     ??CrossCallReturnLabel_67:
   \   000000D6   0028               CMP      R0,#+0
   \   000000D8   F7D1               BNE.N    ??SD_SendSDStatus_11
   1933          
   1934            /* Clear all the static status flags*/
   1935            SDIO_ClearFlag(SDIO_STATIC_FLAGS);
   \   000000DA   ........           BL       ?Subroutine18
   1936            psdstatus -= 16;
   \                     ??CrossCallReturnLabel_47:
   \   000000DE   403C               SUBS     R4,R4,#+64
   1937            for (count = 0; count < 16; count++)
   \   000000E0   0025               MOVS     R5,#+0
   1938            {
   1939              psdstatus[count] = ((psdstatus[count] & SD_0TO7BITS) << 24) |((psdstatus[count] & SD_8TO15BITS) << 8) |
   1940                                 ((psdstatus[count] & SD_16TO23BITS) >> 8) |((psdstatus[count] & SD_24TO31BITS) >> 24);
   \                     ??SD_SendSDStatus_12:
   \   000000E2   54F82500           LDR      R0,[R4, R5, LSL #+2]
   \   000000E6   00F47F41           AND      R1,R0,#0xFF00
   \   000000EA   0902               LSLS     R1,R1,#+8
   \   000000EC   41EA0060           ORR      R0,R1,R0, LSL #+24
   \   000000F0   54F82510           LDR      R1,[R4, R5, LSL #+2]
   \   000000F4   01F47F01           AND      R1,R1,#0xFF0000
   \   000000F8   40EA1120           ORR      R0,R0,R1, LSR #+8
   \   000000FC   54F82510           LDR      R1,[R4, R5, LSL #+2]
   \   00000100   40EA1160           ORR      R0,R0,R1, LSR #+24
   \   00000104   44F82500           STR      R0,[R4, R5, LSL #+2]
   1941            }
   \   00000108   6D1C               ADDS     R5,R5,#+1
   \   0000010A   102D               CMP      R5,#+16
   \   0000010C   90D2               BCS.N    ??SD_SendSDStatus_3
   \   0000010E   E8E7               B.N      ??SD_SendSDStatus_12
   \                     ??SD_SendSDStatus_1:
   \   00000110   ........           DC32     TransferError
   \   00000114   FFFF0F00           DC32     0xfffff
   1942            return(errorstatus);
   1943          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine16:
   \   00000000   E861               STR      R0,[R5, #+28]
   \   00000002   3720               MOVS     R0,#+55
   \   00000004                      REQUIRE ??Subroutine51_0
   \   00000004                      ;; // Fall through to label ??Subroutine51_0
   1944          
   1945          /*******************************************************************************
   1946          * Function Name  : SD_ProcessIRQSrc
   1947          * Description    : Allows to process all the interrupts that are high.
   1948          * Input          : None
   1949          * Output         : None
   1950          * Return         : SD_Error: SD Card Error code.
   1951          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1952          SD_Error SD_ProcessIRQSrc(void)
   1953          {
   \                     SD_ProcessIRQSrc:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   1954            u32 count = 0, restwords = 0;
   1955          
   1956            if (DeviceMode == SD_INTERRUPT_MODE)
   \   00000002   5F4C               LDR.N    R4,??SD_ProcessIRQSrc_0  ;; TransferError
   \   00000004   A06D               LDR      R0,[R4, #+88]
   \   00000006   0128               CMP      R0,#+1
   \   00000008   45D1               BNE.N    ??SD_ProcessIRQSrc_1
   1957            {
   1958              if (SDIO_GetITStatus(SDIO_IT_RXFIFOHF) != RESET)
   \   0000000A   4FF40040           MOV      R0,#+32768
   \   0000000E   ........           BL       SDIO_GetITStatus
   \   00000012   60B1               CBZ      R0,??SD_ProcessIRQSrc_2
   1959              {
   1960                for (count = 0; count < SD_HALFFIFO; count++)
   \   00000014   0025               MOVS     R5,#+0
   1961                {
   1962                  *(DestBuffer + count) = SDIO_ReadData();
   \                     ??SD_ProcessIRQSrc_3:
   \   00000016   ........           BL       SDIO_ReadData
   \   0000001A   A16E               LDR      R1,[R4, #+104]
   \   0000001C   41F82500           STR      R0,[R1, R5, LSL #+2]
   1963                }
   \   00000020   6D1C               ADDS     R5,R5,#+1
   \   00000022   082D               CMP      R5,#+8
   \   00000024   F7D3               BCC.N    ??SD_ProcessIRQSrc_3
   1964                DestBuffer += SD_HALFFIFO;
   \   00000026   01F12000           ADD      R0,R1,#+32
   \   0000002A   A066               STR      R0,[R4, #+104]
   1965                NumberOfBytes += SD_HALFFIFOBYTES;
   \   0000002C   30E0               B.N      ??SD_ProcessIRQSrc_4
   1966              }
   1967              else if (SDIO_GetITStatus(SDIO_IT_TXFIFOHE) != RESET)
   \                     ??SD_ProcessIRQSrc_2:
   \   0000002E   4FF48040           MOV      R0,#+16384
   \   00000032   ........           BL       SDIO_GetITStatus
   \   00000036   70B3               CBZ      R0,??SD_ProcessIRQSrc_1
   1968              {
   1969                if ((TotalNumberOfBytes - NumberOfBytes) < SD_HALFFIFOBYTES)
   \   00000038   E06D               LDR      R0,[R4, #+92]
   \   0000003A   216F               LDR      R1,[R4, #+112]
   \   0000003C   411A               SUBS     R1,R0,R1
   \   0000003E   2029               CMP      R1,#+32
   \   00000040   1AD2               BCS.N    ??SD_ProcessIRQSrc_5
   1970                {
   1971                  restwords = ((TotalNumberOfBytes - NumberOfBytes) %  4 == 0) ?
   1972                              ((TotalNumberOfBytes - NumberOfBytes) / 4) :
   1973                              ((TotalNumberOfBytes - NumberOfBytes) / 4 + 1);
   \   00000042   216F               LDR      R1,[R4, #+112]
   \   00000044   411A               SUBS     R1,R0,R1
   \   00000046   11F0030F           TST      R1,#0x3
   \   0000004A   216F               LDR      R1,[R4, #+112]
   \   0000004C   02D1               BNE.N    ??SD_ProcessIRQSrc_6
   \   0000004E   401A               SUBS     R0,R0,R1
   \   00000050   8608               LSRS     R6,R0,#+2
   \   00000052   02E0               B.N      ??SD_ProcessIRQSrc_7
   \                     ??SD_ProcessIRQSrc_6:
   \   00000054   401A               SUBS     R0,R0,R1
   \   00000056   8008               LSRS     R0,R0,#+2
   \   00000058   461C               ADDS     R6,R0,#+1
   1974          
   1975                  for (count = 0; count < restwords;  count++, SrcBuffer++, NumberOfBytes += 4)
   \                     ??SD_ProcessIRQSrc_7:
   \   0000005A   0025               MOVS     R5,#+0
   \                     ??SD_ProcessIRQSrc_8:
   \   0000005C   B542               CMP      R5,R6
   \   0000005E   1AD2               BCS.N    ??SD_ProcessIRQSrc_1
   1976                  {
   1977                    SDIO_WriteData(*SrcBuffer);
   \   00000060   606E               LDR      R0,[R4, #+100]
   \   00000062   0068               LDR      R0,[R0, #+0]
   \   00000064   ........           BL       SDIO_WriteData
   1978                  }
   \   00000068   6D1C               ADDS     R5,R5,#+1
   \   0000006A   606E               LDR      R0,[R4, #+100]
   \   0000006C   001D               ADDS     R0,R0,#+4
   \   0000006E   6066               STR      R0,[R4, #+100]
   \   00000070   206F               LDR      R0,[R4, #+112]
   \   00000072   001D               ADDS     R0,R0,#+4
   \   00000074   2067               STR      R0,[R4, #+112]
   \   00000076   F1E7               B.N      ??SD_ProcessIRQSrc_8
   1979                }
   1980                else
   1981                {
   1982                  for (count = 0; count < SD_HALFFIFO; count++)
   \                     ??SD_ProcessIRQSrc_5:
   \   00000078   0025               MOVS     R5,#+0
   1983                  {
   1984                    SDIO_WriteData(*(SrcBuffer + count));
   \                     ??SD_ProcessIRQSrc_9:
   \   0000007A   606E               LDR      R0,[R4, #+100]
   \   0000007C   50F82500           LDR      R0,[R0, R5, LSL #+2]
   \   00000080   ........           BL       SDIO_WriteData
   1985                  }
   \   00000084   6D1C               ADDS     R5,R5,#+1
   \   00000086   082D               CMP      R5,#+8
   \   00000088   F7D3               BCC.N    ??SD_ProcessIRQSrc_9
   1986          
   1987                  SrcBuffer += SD_HALFFIFO;
   \   0000008A   606E               LDR      R0,[R4, #+100]
   \   0000008C   2030               ADDS     R0,R0,#+32
   \   0000008E   6066               STR      R0,[R4, #+100]
   1988                  NumberOfBytes += SD_HALFFIFOBYTES;
   \                     ??SD_ProcessIRQSrc_4:
   \   00000090   206F               LDR      R0,[R4, #+112]
   \   00000092   2030               ADDS     R0,R0,#+32
   \   00000094   2067               STR      R0,[R4, #+112]
   1989                }
   1990              }
   1991            }
   1992          
   1993            if (SDIO_GetITStatus(SDIO_IT_DATAEND) != RESET)
   \                     ??SD_ProcessIRQSrc_1:
   \   00000096   4CF23A35           MOVW     R5,#+49978
   \   0000009A   4FF48070           MOV      R0,#+256
   \   0000009E   ........           BL       SDIO_GetITStatus
   \   000000A2   30B3               CBZ      R0,??SD_ProcessIRQSrc_10
   1994            {
   1995              if (DeviceMode != SD_DMA_MODE)
   \   000000A4   A06D               LDR      R0,[R4, #+88]
   \   000000A6   48B9               CBNZ     R0,??SD_ProcessIRQSrc_11
   \   000000A8   0FE0               B.N      ??SD_ProcessIRQSrc_12
   1996              {
   1997                while ((SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)  &&  (NumberOfBytes < TotalNumberOfBytes))
   1998                {
   1999                  *DestBuffer = SDIO_ReadData();
   \                     ??SD_ProcessIRQSrc_13:
   \   000000AA   ........           BL       SDIO_ReadData
   \   000000AE   A26E               LDR      R2,[R4, #+104]
   \   000000B0   111D               ADDS     R1,R2,#+4
   \   000000B2   A166               STR      R1,[R4, #+104]
   \   000000B4   1060               STR      R0,[R2, #+0]
   2000                  DestBuffer++;
   2001                  NumberOfBytes += 4;
   \   000000B6   206F               LDR      R0,[R4, #+112]
   \   000000B8   001D               ADDS     R0,R0,#+4
   \   000000BA   2067               STR      R0,[R4, #+112]
   2002                }
   \                     ??SD_ProcessIRQSrc_11:
   \   000000BC   ........           BL       ?Subroutine21
   2003              }
   \                     ??CrossCallReturnLabel_66:
   \   000000C0   18B1               CBZ      R0,??SD_ProcessIRQSrc_12
   \   000000C2   206F               LDR      R0,[R4, #+112]
   \   000000C4   E16D               LDR      R1,[R4, #+92]
   \   000000C6   8842               CMP      R0,R1
   \   000000C8   EFD3               BCC.N    ??SD_ProcessIRQSrc_13
   2004          
   2005              if (StopCondition == 1)
   \                     ??SD_ProcessIRQSrc_12:
   \   000000CA   206E               LDR      R0,[R4, #+96]
   \   000000CC   0128               CMP      R0,#+1
   \   000000CE   02D1               BNE.N    ??SD_ProcessIRQSrc_14
   2006              {
   2007                TransferError = SD_StopTransfer();
   \   000000D0   ........           BL       SD_StopTransfer
   \   000000D4   00E0               B.N      ??SD_ProcessIRQSrc_15
   2008              }
   2009              else
   2010              {
   2011                TransferError = SD_OK;
   \                     ??SD_ProcessIRQSrc_14:
   \   000000D6   2A20               MOVS     R0,#+42
   \                     ??SD_ProcessIRQSrc_15:
   \   000000D8   2070               STRB     R0,[R4, #+0]
   2012              }
   2013              SDIO_ClearITPendingBit(SDIO_IT_DATAEND);
   \   000000DA   4FF48070           MOV      R0,#+256
   \   000000DE   ........           BL       SDIO_ClearITPendingBit
   2014              SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
   2015                            SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
   2016                            SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
   \   000000E2   ........           BL       ?Subroutine11
   2017              TransferEnd = 1;
   \                     ??CrossCallReturnLabel_31:
   \   000000E6   0120               MOVS     R0,#+1
   \   000000E8   E066               STR      R0,[R4, #+108]
   2018              NumberOfBytes = 0;
   \   000000EA   0020               MOVS     R0,#+0
   \   000000EC   2067               STR      R0,[R4, #+112]
   2019              return(TransferError);
   \   000000EE   2078               LDRB     R0,[R4, #+0]
   \   000000F0   70BD               POP      {R4-R6,PC}
   2020            }
   2021          
   2022            if (SDIO_GetITStatus(SDIO_IT_DCRCFAIL) != RESET)
   \                     ??SD_ProcessIRQSrc_10:
   \   000000F2   0220               MOVS     R0,#+2
   \   000000F4   ........           BL       SDIO_GetITStatus
   \   000000F8   40B1               CBZ      R0,??SD_ProcessIRQSrc_16
   2023            {
   2024              SDIO_ClearITPendingBit(SDIO_IT_DCRCFAIL);
   \   000000FA   0220               MOVS     R0,#+2
   \   000000FC   ........           BL       SDIO_ClearITPendingBit
   2025              SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
   2026                            SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
   2027                            SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
   \   00000100   ........           BL       ?Subroutine11
   2028              NumberOfBytes = 0;
   \                     ??CrossCallReturnLabel_30:
   \   00000104   0020               MOVS     R0,#+0
   \   00000106   2067               STR      R0,[R4, #+112]
   2029              TransferError = SD_DATA_CRC_FAIL;
   \   00000108   0220               MOVS     R0,#+2
   \   0000010A   18E0               B.N      ??SD_ProcessIRQSrc_17
   2030              return(SD_DATA_CRC_FAIL);
   2031            }
   2032          
   2033            if (SDIO_GetITStatus(SDIO_IT_DTIMEOUT) != RESET)
   \                     ??SD_ProcessIRQSrc_16:
   \   0000010C   0820               MOVS     R0,#+8
   \   0000010E   ........           BL       SDIO_GetITStatus
   \   00000112   40B1               CBZ      R0,??SD_ProcessIRQSrc_18
   2034            {
   2035              SDIO_ClearITPendingBit(SDIO_IT_DTIMEOUT);
   \   00000114   0820               MOVS     R0,#+8
   \   00000116   ........           BL       SDIO_ClearITPendingBit
   2036              SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
   2037                            SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
   2038                            SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
   \   0000011A   ........           BL       ?Subroutine11
   2039              NumberOfBytes = 0;
   \                     ??CrossCallReturnLabel_29:
   \   0000011E   0020               MOVS     R0,#+0
   \   00000120   2067               STR      R0,[R4, #+112]
   2040              TransferError = SD_DATA_TIMEOUT;
   \   00000122   0420               MOVS     R0,#+4
   \   00000124   0BE0               B.N      ??SD_ProcessIRQSrc_17
   2041              return(SD_DATA_TIMEOUT);
   2042            }
   2043          
   2044            if (SDIO_GetITStatus(SDIO_IT_RXOVERR) != RESET)
   \                     ??SD_ProcessIRQSrc_18:
   \   00000126   2020               MOVS     R0,#+32
   \   00000128   ........           BL       SDIO_GetITStatus
   \   0000012C   48B1               CBZ      R0,??SD_ProcessIRQSrc_19
   2045            {
   2046              SDIO_ClearITPendingBit(SDIO_IT_RXOVERR);
   \   0000012E   2020               MOVS     R0,#+32
   \   00000130   ........           BL       SDIO_ClearITPendingBit
   2047              SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
   2048                            SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
   2049                            SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
   \   00000134   ........           BL       ?Subroutine11
   2050              NumberOfBytes = 0;
   \                     ??CrossCallReturnLabel_28:
   \   00000138   0020               MOVS     R0,#+0
   \   0000013A   2067               STR      R0,[R4, #+112]
   2051              TransferError = SD_RX_OVERRUN;
   \   0000013C   0620               MOVS     R0,#+6
   \                     ??SD_ProcessIRQSrc_17:
   \   0000013E   2070               STRB     R0,[R4, #+0]
   2052              return(SD_RX_OVERRUN);
   \   00000140   70BD               POP      {R4-R6,PC}
   2053            }
   2054          
   2055            if (SDIO_GetITStatus(SDIO_IT_TXUNDERR) != RESET)
   \                     ??SD_ProcessIRQSrc_19:
   \   00000142   1020               MOVS     R0,#+16
   \   00000144   ........           BL       SDIO_GetITStatus
   \   00000148   40B1               CBZ      R0,??SD_ProcessIRQSrc_20
   2056            {
   2057              SDIO_ClearITPendingBit(SDIO_IT_TXUNDERR);
   \   0000014A   1020               MOVS     R0,#+16
   \   0000014C   ........           BL       SDIO_ClearITPendingBit
   2058              SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
   2059                            SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
   2060                            SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
   \   00000150   ........           BL       ?Subroutine11
   2061              NumberOfBytes = 0;
   \                     ??CrossCallReturnLabel_27:
   \   00000154   0020               MOVS     R0,#+0
   \   00000156   2067               STR      R0,[R4, #+112]
   2062              TransferError = SD_TX_UNDERRUN;
   \   00000158   0520               MOVS     R0,#+5
   \   0000015A   F0E7               B.N      ??SD_ProcessIRQSrc_17
   2063              return(SD_TX_UNDERRUN);
   2064            }
   2065          
   2066            if (SDIO_GetITStatus(SDIO_IT_STBITERR) != RESET)
   \                     ??SD_ProcessIRQSrc_20:
   \   0000015C   4FF40070           MOV      R0,#+512
   \   00000160   ........           BL       SDIO_GetITStatus
   \   00000164   0028               CMP      R0,#+0
   \   00000166   09D0               BEQ.N    ??SD_ProcessIRQSrc_21
   2067            {
   2068              SDIO_ClearITPendingBit(SDIO_IT_STBITERR);
   \   00000168   4FF40070           MOV      R0,#+512
   \   0000016C   ........           BL       SDIO_ClearITPendingBit
   2069              SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
   2070                            SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
   2071                            SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
   \   00000170   ........           BL       ?Subroutine11
   2072              NumberOfBytes = 0;
   \                     ??CrossCallReturnLabel_26:
   \   00000174   0020               MOVS     R0,#+0
   \   00000176   2067               STR      R0,[R4, #+112]
   2073              TransferError = SD_START_BIT_ERR;
   \   00000178   0720               MOVS     R0,#+7
   \   0000017A   E0E7               B.N      ??SD_ProcessIRQSrc_17
   2074              return(SD_START_BIT_ERR);
   2075            }
   2076          
   2077            return(SD_OK);
   \                     ??SD_ProcessIRQSrc_21:
   \   0000017C   2A20               MOVS     R0,#+42
   \   0000017E   70BD               POP      {R4-R6,PC}       ;; return
   \                     ??SD_ProcessIRQSrc_0:
   \   00000180   ........           DC32     TransferError
   2078          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   0021               MOVS     R1,#+0
   \   00000002   2846               MOV      R0,R5
   \   00000004   ........           B.W      SDIO_ITConfig
   2079          
   2080          /*******************************************************************************
   2081          * Function Name  : CmdError
   2082          * Description    : Checks for error conditions for CMD0.
   2083          * Input          : None
   2084          * Output         : None
   2085          * Return         : SD_Error: SD Card Error code.
   2086          *******************************************************************************/
   2087          static SD_Error CmdError(void)
   2088          {
   2089            SD_Error errorstatus = SD_OK;
   2090            u32 timeout;
   2091          
   2092            timeout = SDIO_CMD0TIMEOUT; /* 10000 */
   2093          
   2094            while ((timeout > 0) && (SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) == RESET))
   2095            {
   2096              timeout--;
   2097            }
   2098          
   2099            if (timeout == 0)
   2100            {
   2101              errorstatus = SD_CMD_RSP_TIMEOUT;
   2102              return(errorstatus);
   2103            }
   2104          
   2105            /* Clear all the static flags */
   2106            SDIO_ClearFlag(SDIO_STATIC_FLAGS);
   2107          
   2108            return(errorstatus);
   2109          }
   2110          
   2111          /*******************************************************************************
   2112          * Function Name  : CmdResp7Error
   2113          * Description    : Checks for error conditions for R7.
   2114          *                  response.
   2115          * Input          : None
   2116          * Output         : None
   2117          * Return         : SD_Error: SD Card Error code.
   2118          *******************************************************************************/
   2119          static SD_Error CmdResp7Error(void)
   2120          {
   2121            SD_Error errorstatus = SD_OK;
   2122            u32 status;
   2123            u32 timeout = SDIO_CMD0TIMEOUT;
   2124          
   2125            status = SDIO->STA;
   2126          
   2127            while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
   2128            {
   2129              timeout--;
   2130              status = SDIO->STA;
   2131            }
   2132          
   2133            if ((timeout == 0) || (status & SDIO_FLAG_CTIMEOUT))
   2134            {
   2135              /* Card is not V2.0 complient or card does not support the set voltage range */
   2136              errorstatus = SD_CMD_RSP_TIMEOUT;
   2137              SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
   2138              return(errorstatus);
   2139            }
   2140          
   2141            if (status & SDIO_FLAG_CMDREND)
   2142            {
   2143              /* Card is SD V2.0 compliant */
   2144              errorstatus = SD_OK;
   2145              SDIO_ClearFlag(SDIO_FLAG_CMDREND);
   2146              return(errorstatus);
   2147            }
   2148            return(errorstatus);
   2149          }
   2150          
   2151          /*******************************************************************************
   2152          * Function Name  : CmdResp1Error
   2153          * Description    : Checks for error conditions for R1.
   2154          *                  response
   2155          * Input          : cmd: The sent command index.
   2156          * Output         : None
   2157          * Return         : SD_Error: SD Card Error code.
   2158          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   2159          static SD_Error CmdResp1Error(u8 cmd)
   2160          {
   \                     CmdResp1Error:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0446               MOV      R4,R0
   2161            SD_Error errorstatus = SD_OK;
   2162            u32 status;
   2163            u32 response_r1;
   2164          
   2165            status = SDIO->STA;
   \   00000004   3D48               LDR.N    R0,??CmdResp1Error_0  ;; 0x40018034
   \   00000006   ........           BL       ?Subroutine33
   2166          
   2167            while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
   2168            {
   2169              status = SDIO->STA;
   2170            }
   2171          
   2172            if (status & SDIO_FLAG_CTIMEOUT)
   \                     ??CrossCallReturnLabel_121:
   \   0000000A   03D0               BEQ.N    ??CmdResp1Error_1
   2173            {
   2174              errorstatus = SD_CMD_RSP_TIMEOUT;
   2175              SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
   \   0000000C   ........           BL       ?Subroutine2
   2176              return(errorstatus);
   \                     ??CrossCallReturnLabel_2:
   \   00000010   0320               MOVS     R0,#+3
   \   00000012   10BD               POP      {R4,PC}
   2177            }
   2178            else if (status & SDIO_FLAG_CCRCFAIL)
   \                     ??CmdResp1Error_1:
   \   00000014   11F0010F           TST      R1,#0x1
   \   00000018   04D0               BEQ.N    ??CmdResp1Error_2
   2179            {
   2180              errorstatus = SD_CMD_CRC_FAIL;
   2181              SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
   \   0000001A   0120               MOVS     R0,#+1
   \   0000001C   ........           BL       SDIO_ClearFlag
   2182              return(errorstatus);
   \   00000020   0120               MOVS     R0,#+1
   \   00000022   10BD               POP      {R4,PC}
   2183            }
   2184          
   2185            /* Check response received is of desired command */
   2186            if (SDIO_GetCommandResponse() != cmd)
   \                     ??CmdResp1Error_2:
   \   00000024   ........           BL       SDIO_GetCommandResponse
   \   00000028   A042               CMP      R0,R4
   \   0000002A   01D0               BEQ.N    ??CmdResp1Error_3
   2187            {
   2188              errorstatus = SD_ILLEGAL_CMD;
   2189              return(errorstatus);
   \                     ??CmdResp1Error_4:
   \   0000002C   1020               MOVS     R0,#+16
   \   0000002E   10BD               POP      {R4,PC}
   2190            }
   2191          
   2192            /* Clear all the static flags */
   2193            SDIO_ClearFlag(SDIO_STATIC_FLAGS);
   \                     ??CmdResp1Error_3:
   \   00000030   ........           BL       ?Subroutine18
   2194          
   2195            /* We have received response, retrieve it for analysis  */
   2196            response_r1 = SDIO_GetResponse(SDIO_RESP1);
   \                     ??CrossCallReturnLabel_46:
   \   00000034   ........           BL       ?Subroutine32
   2197          
   2198            if ((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
   \                     ??CrossCallReturnLabel_111:
   \   00000038   3149               LDR.N    R1,??CmdResp1Error_0+0x4  ;; 0xfdffe008
   \   0000003A   0142               TST      R1,R0
   \   0000003C   5CD0               BEQ.N    ??CmdResp1Error_5
   2199            {
   2200              return(errorstatus);
   2201            }
   2202          
   2203            if (response_r1 & SD_OCR_ADDR_OUT_OF_RANGE)
   \   0000003E   10F0004F           TST      R0,#0x80000000
   \   00000042   01D0               BEQ.N    ??CmdResp1Error_6
   2204            {
   2205              return(SD_ADDR_OUT_OF_RANGE);
   \   00000044   1C20               MOVS     R0,#+28
   \   00000046   10BD               POP      {R4,PC}
   2206            }
   2207          
   2208            if (response_r1 & SD_OCR_ADDR_MISALIGNED)
   \                     ??CmdResp1Error_6:
   \   00000048   10F0804F           TST      R0,#0x40000000
   \   0000004C   01D0               BEQ.N    ??CmdResp1Error_7
   2209            {
   2210              return(SD_ADDR_MISALIGNED);
   \   0000004E   0920               MOVS     R0,#+9
   \   00000050   10BD               POP      {R4,PC}
   2211            }
   2212          
   2213            if (response_r1 & SD_OCR_BLOCK_LEN_ERR)
   \                     ??CmdResp1Error_7:
   \   00000052   10F0005F           TST      R0,#0x20000000
   \   00000056   01D0               BEQ.N    ??CmdResp1Error_8
   2214            {
   2215              return(SD_BLOCK_LEN_ERR);
   \   00000058   0A20               MOVS     R0,#+10
   \   0000005A   10BD               POP      {R4,PC}
   2216            }
   2217          
   2218            if (response_r1 & SD_OCR_ERASE_SEQ_ERR)
   \                     ??CmdResp1Error_8:
   \   0000005C   10F0805F           TST      R0,#0x10000000
   \   00000060   01D0               BEQ.N    ??CmdResp1Error_9
   2219            {
   2220              return(SD_ERASE_SEQ_ERR);
   \   00000062   0B20               MOVS     R0,#+11
   \   00000064   10BD               POP      {R4,PC}
   2221            }
   2222          
   2223            if (response_r1 & SD_OCR_BAD_ERASE_PARAM)
   \                     ??CmdResp1Error_9:
   \   00000066   10F0006F           TST      R0,#0x8000000
   \   0000006A   01D0               BEQ.N    ??CmdResp1Error_10
   2224            {
   2225              return(SD_BAD_ERASE_PARAM);
   \   0000006C   0C20               MOVS     R0,#+12
   \   0000006E   10BD               POP      {R4,PC}
   2226            }
   2227          
   2228            if (response_r1 & SD_OCR_WRITE_PROT_VIOLATION)
   \                     ??CmdResp1Error_10:
   \   00000070   10F0806F           TST      R0,#0x4000000
   \   00000074   01D0               BEQ.N    ??CmdResp1Error_11
   2229            {
   2230              return(SD_WRITE_PROT_VIOLATION);
   \   00000076   0D20               MOVS     R0,#+13
   \   00000078   10BD               POP      {R4,PC}
   2231            }
   2232          
   2233            if (response_r1 & SD_OCR_LOCK_UNLOCK_FAILED)
   \                     ??CmdResp1Error_11:
   \   0000007A   10F0807F           TST      R0,#0x1000000
   \   0000007E   01D0               BEQ.N    ??CmdResp1Error_12
   2234            {
   2235              return(SD_LOCK_UNLOCK_FAILED);
   \   00000080   0E20               MOVS     R0,#+14
   \   00000082   10BD               POP      {R4,PC}
   2236            }
   2237          
   2238            if (response_r1 & SD_OCR_COM_CRC_FAILED)
   \                     ??CmdResp1Error_12:
   \   00000084   10F4000F           TST      R0,#0x800000
   \   00000088   01D0               BEQ.N    ??CmdResp1Error_13
   2239            {
   2240              return(SD_COM_CRC_FAILED);
   \   0000008A   0F20               MOVS     R0,#+15
   \   0000008C   10BD               POP      {R4,PC}
   2241            }
   2242          
   2243            if (response_r1 & SD_OCR_ILLEGAL_CMD)
   \                     ??CmdResp1Error_13:
   \   0000008E   10F4800F           TST      R0,#0x400000
   \   00000092   CBD1               BNE.N    ??CmdResp1Error_4
   2244            {
   2245              return(SD_ILLEGAL_CMD);
   2246            }
   2247          
   2248            if (response_r1 & SD_OCR_CARD_ECC_FAILED)
   \   00000094   10F4001F           TST      R0,#0x200000
   \   00000098   01D0               BEQ.N    ??CmdResp1Error_14
   2249            {
   2250              return(SD_CARD_ECC_FAILED);
   \   0000009A   1120               MOVS     R0,#+17
   \   0000009C   10BD               POP      {R4,PC}
   2251            }
   2252          
   2253            if (response_r1 & SD_OCR_CC_ERROR)
   \                     ??CmdResp1Error_14:
   \   0000009E   10F4801F           TST      R0,#0x100000
   \   000000A2   01D0               BEQ.N    ??CmdResp1Error_15
   2254            {
   2255              return(SD_CC_ERROR);
   \   000000A4   1220               MOVS     R0,#+18
   \   000000A6   10BD               POP      {R4,PC}
   2256            }
   2257          
   2258            if (response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
   \                     ??CmdResp1Error_15:
   \   000000A8   10F4002F           TST      R0,#0x80000
   \   000000AC   01D0               BEQ.N    ??CmdResp1Error_16
   2259            {
   2260              return(SD_GENERAL_UNKNOWN_ERROR);
   \   000000AE   1320               MOVS     R0,#+19
   \   000000B0   10BD               POP      {R4,PC}
   2261            }
   2262          
   2263            if (response_r1 & SD_OCR_STREAM_READ_UNDERRUN)
   \                     ??CmdResp1Error_16:
   \   000000B2   10F4802F           TST      R0,#0x40000
   \   000000B6   01D0               BEQ.N    ??CmdResp1Error_17
   2264            {
   2265              return(SD_STREAM_READ_UNDERRUN);
   \   000000B8   1420               MOVS     R0,#+20
   \   000000BA   10BD               POP      {R4,PC}
   2266            }
   2267          
   2268            if (response_r1 & SD_OCR_STREAM_WRITE_OVERRUN)
   \                     ??CmdResp1Error_17:
   \   000000BC   10F4003F           TST      R0,#0x20000
   \   000000C0   01D0               BEQ.N    ??CmdResp1Error_18
   2269            {
   2270              return(SD_STREAM_WRITE_OVERRUN);
   \   000000C2   1520               MOVS     R0,#+21
   \   000000C4   10BD               POP      {R4,PC}
   2271            }
   2272          
   2273            if (response_r1 & SD_OCR_CID_CSD_OVERWRIETE)
   \                     ??CmdResp1Error_18:
   \   000000C6   10F4803F           TST      R0,#0x10000
   \   000000CA   01D0               BEQ.N    ??CmdResp1Error_19
   2274            {
   2275              return(SD_CID_CSD_OVERWRITE);
   \   000000CC   1620               MOVS     R0,#+22
   \   000000CE   10BD               POP      {R4,PC}
   2276            }
   2277          
   2278            if (response_r1 & SD_OCR_WP_ERASE_SKIP)
   \                     ??CmdResp1Error_19:
   \   000000D0   10F4004F           TST      R0,#0x8000
   \   000000D4   01D0               BEQ.N    ??CmdResp1Error_20
   2279            {
   2280              return(SD_WP_ERASE_SKIP);
   \   000000D6   1720               MOVS     R0,#+23
   \   000000D8   10BD               POP      {R4,PC}
   2281            }
   2282          
   2283            if (response_r1 & SD_OCR_CARD_ECC_DISABLED)
   \                     ??CmdResp1Error_20:
   \   000000DA   10F4804F           TST      R0,#0x4000
   \   000000DE   01D0               BEQ.N    ??CmdResp1Error_21
   2284            {
   2285              return(SD_CARD_ECC_DISABLED);
   \   000000E0   1820               MOVS     R0,#+24
   \   000000E2   10BD               POP      {R4,PC}
   2286            }
   2287          
   2288            if (response_r1 & SD_OCR_ERASE_RESET)
   \                     ??CmdResp1Error_21:
   \   000000E4   10F4005F           TST      R0,#0x2000
   \   000000E8   01D0               BEQ.N    ??CmdResp1Error_22
   2289            {
   2290              return(SD_ERASE_RESET);
   \   000000EA   1920               MOVS     R0,#+25
   \   000000EC   10BD               POP      {R4,PC}
   2291            }
   2292          
   2293            if (response_r1 & SD_OCR_AKE_SEQ_ERROR)
   \                     ??CmdResp1Error_22:
   \   000000EE   10F0080F           TST      R0,#0x8
   \   000000F2   01D0               BEQ.N    ??CmdResp1Error_5
   2294            {
   2295              return(SD_AKE_SEQ_ERROR);
   \   000000F4   1A20               MOVS     R0,#+26
   \   000000F6   10BD               POP      {R4,PC}
   2296            }
   2297            return(errorstatus);
   \                     ??CmdResp1Error_5:
   \   000000F8   2A20               MOVS     R0,#+42
   \   000000FA   10BD               POP      {R4,PC}          ;; return
   \                     ??CmdResp1Error_0:
   \   000000FC   34800140           DC32     0x40018034
   \   00000100   08E0FFFD           DC32     0xfdffe008
   2298          }
   2299          
   2300          /*******************************************************************************
   2301          * Function Name  : CmdResp3Error
   2302          * Description    : Checks for error conditions for R3 (OCR).
   2303          *                  response.
   2304          * Input          : None
   2305          * Output         : None
   2306          * Return         : SD_Error: SD Card Error code.
   2307          *******************************************************************************/
   2308          static SD_Error CmdResp3Error(void)
   2309          {
   2310            SD_Error errorstatus = SD_OK;
   2311            u32 status;
   2312          
   2313            status = SDIO->STA;
   2314          
   2315            while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
   2316            {
   2317              status = SDIO->STA;
   2318            }
   2319          
   2320            if (status & SDIO_FLAG_CTIMEOUT)
   2321            {
   2322              errorstatus = SD_CMD_RSP_TIMEOUT;
   2323              SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
   2324              return(errorstatus);
   2325            }
   2326            /* Clear all the static flags */
   2327            SDIO_ClearFlag(SDIO_STATIC_FLAGS);
   2328            return(errorstatus);
   2329          }
   2330          
   2331          /*******************************************************************************
   2332          * Function Name  : CmdResp2Error
   2333          * Description    : Checks for error conditions for R2 (CID or CSD).
   2334          *                  response.
   2335          * Input          : None
   2336          * Output         : None
   2337          * Return         : SD_Error: SD Card Error code.
   2338          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   2339          static SD_Error CmdResp2Error(void)
   2340          {
   \                     CmdResp2Error:
   \   00000000   80B5               PUSH     {R7,LR}
   2341            SD_Error errorstatus = SD_OK;
   2342            u32 status;
   2343          
   2344            status = SDIO->STA;
   \   00000002   0A48               LDR.N    R0,??CmdResp2Error_0  ;; 0x40018034
   \   00000004   ........           BL       ?Subroutine33
   2345          
   2346            while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
   2347            {
   2348              status = SDIO->STA;
   2349            }
   2350          
   2351            if (status & SDIO_FLAG_CTIMEOUT)
   \                     ??CrossCallReturnLabel_122:
   \   00000008   03D0               BEQ.N    ??CmdResp2Error_1
   2352            {
   2353              errorstatus = SD_CMD_RSP_TIMEOUT;
   2354              SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
   \   0000000A   ........           BL       ?Subroutine2
   2355              return(errorstatus);
   \                     ??CrossCallReturnLabel_1:
   \   0000000E   0320               MOVS     R0,#+3
   \   00000010   02BD               POP      {R1,PC}
   2356            }
   2357            else if (status & SDIO_FLAG_CCRCFAIL)
   \                     ??CmdResp2Error_1:
   \   00000012   11F0010F           TST      R1,#0x1
   \   00000016   04D0               BEQ.N    ??CmdResp2Error_2
   2358            {
   2359              errorstatus = SD_CMD_CRC_FAIL;
   2360              SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
   \   00000018   0120               MOVS     R0,#+1
   \   0000001A   ........           BL       SDIO_ClearFlag
   2361              return(errorstatus);
   \   0000001E   0120               MOVS     R0,#+1
   \   00000020   02BD               POP      {R1,PC}
   2362            }
   2363          
   2364            /* Clear all the static flags */
   2365            SDIO_ClearFlag(SDIO_STATIC_FLAGS);
   \                     ??CmdResp2Error_2:
   \   00000022   ........           BL       ?Subroutine18
   2366          
   2367            return(errorstatus);
   \                     ??CrossCallReturnLabel_45:
   \   00000026   2A20               MOVS     R0,#+42
   \   00000028   02BD               POP      {R1,PC}          ;; return
   \   0000002A   00BF               Nop      
   \                     ??CmdResp2Error_0:
   \   0000002C   34800140           DC32     0x40018034
   2368          }
   2369          
   2370          /*******************************************************************************
   2371          * Function Name  : CmdResp6Error
   2372          * Description    : Checks for error conditions for R6 (RCA).
   2373          *                  response.
   2374          * Input          : - cmd: The sent command index.
   2375          *                  - prca: pointer to the variable that will contain the SD
   2376          *                    card relative address RCA. 
   2377          * Output         : None
   2378          * Return         : SD_Error: SD Card Error code.
   2379          *******************************************************************************/
   2380          static SD_Error CmdResp6Error(u8 cmd, u16 *prca)
   2381          {
   2382            SD_Error errorstatus = SD_OK;
   2383            u32 status;
   2384            u32 response_r1;
   2385          
   2386            status = SDIO->STA;
   2387          
   2388            while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
   2389            {
   2390              status = SDIO->STA;
   2391            }
   2392          
   2393            if (status & SDIO_FLAG_CTIMEOUT)
   2394            {
   2395              errorstatus = SD_CMD_RSP_TIMEOUT;
   2396              SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
   2397              return(errorstatus);
   2398            }
   2399            else if (status & SDIO_FLAG_CCRCFAIL)
   2400            {
   2401              errorstatus = SD_CMD_CRC_FAIL;
   2402              SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
   2403              return(errorstatus);
   2404            }
   2405          
   2406            /* Check response received is of desired command */
   2407            if (SDIO_GetCommandResponse() != cmd)
   2408            {
   2409              errorstatus = SD_ILLEGAL_CMD;
   2410              return(errorstatus);
   2411            }
   2412          
   2413            /* Clear all the static flags */
   2414            SDIO_ClearFlag(SDIO_STATIC_FLAGS);
   2415          
   2416            /* We have received response, retrieve it.  */
   2417            response_r1 = SDIO_GetResponse(SDIO_RESP1);
   2418          
   2419            if (SD_ALLZERO == (response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)))
   2420            {
   2421              *prca = (u16) (response_r1 >> 16);
   2422              return(errorstatus);
   2423            }
   2424          
   2425            if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR)
   2426            {
   2427              return(SD_GENERAL_UNKNOWN_ERROR);
   2428            }
   2429          
   2430            if (response_r1 & SD_R6_ILLEGAL_CMD)
   2431            {
   2432              return(SD_ILLEGAL_CMD);
   2433            }
   2434          
   2435            if (response_r1 & SD_R6_COM_CRC_FAILED)
   2436            {
   2437              return(SD_COM_CRC_FAILED);
   2438            }
   2439          
   2440            return(errorstatus);
   2441          }
   2442          
   2443          /*******************************************************************************
   2444          * Function Name  : SDEnWideBus
   2445          * Description    : Enables or disables the SDIO wide bus mode.
   2446          * Input          : NewState: new state of the SDIO wide bus mode.
   2447          *                  This parameter can be: ENABLE or DISABLE.
   2448          * Output         : None
   2449          * Return         : SD_Error: SD Card Error code.
   2450          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   2451          static SD_Error SDEnWideBus(FunctionalState NewState)
   2452          {
   \                     SDEnWideBus:
   \   00000000   7CB5               PUSH     {R2-R6,LR}
   \   00000002   0446               MOV      R4,R0
   2453            SD_Error errorstatus = SD_OK;
   2454          
   2455            u32 scr[2] = {0, 0};
   \   00000004   00A8               ADD      R0,SP,#+0
   \   00000006   0021               MOVS     R1,#+0
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   06C0               STM      R0!,{R1,R2}
   2456          
   2457            if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
   \   0000000C   0846               MOV      R0,R1
   \   0000000E   ........           BL       SDIO_GetResponse
   \   00000012   10F0007F           TST      R0,#0x2000000
   \   00000016   01D0               BEQ.N    ??SDEnWideBus_0
   2458            {
   2459              errorstatus = SD_LOCK_UNLOCK_FAILED;
   2460              return(errorstatus);
   \   00000018   0E20               MOVS     R0,#+14
   \   0000001A   76BD               POP      {R1,R2,R4-R6,PC}
   2461            }
   2462          
   2463            /* Get SCR Register */
   2464            errorstatus = FindSCR(RCA, scr);
   \                     ??SDEnWideBus_0:
   \   0000001C   174D               LDR.N    R5,??SDEnWideBus_1  ;; TransferError
   \   0000001E   00A9               ADD      R1,SP,#+0
   \   00000020   686D               LDR      R0,[R5, #+84]
   \   00000022   80B2               UXTH     R0,R0
   \   00000024   ........           BL       FindSCR
   2465          
   2466            if (errorstatus != SD_OK)
   \   00000028   2A28               CMP      R0,#+42
   \   0000002A   26D1               BNE.N    ??SDEnWideBus_2
   2467            {
   2468              return(errorstatus);
   2469            }
   2470          
   2471            /* If wide bus operation to be enabled */
   2472            if (NewState == ENABLE)
   \   0000002C   686D               LDR      R0,[R5, #+84]
   \   0000002E   0004               LSLS     R0,R0,#+16
   \   00000030   0199               LDR      R1,[SP, #+4]
   \   00000032   4FF48066           MOV      R6,#+1024
   \   00000036   012C               CMP      R4,#+1
   \   00000038   0DD1               BNE.N    ??SDEnWideBus_3
   2473            {
   2474              /* If requested card supports wide bus operation */
   2475              if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
   \   0000003A   11F4802F           TST      R1,#0x40000
   \   0000003E   08D0               BEQ.N    ??SDEnWideBus_4
   2476              {
   2477                /* Send CMD55 APP_CMD with argument as card's RCA.*/
   2478                SDIO_CmdInitStructure.SDIO_Argument = (u32) RCA << 16;
   \   00000040   ........           BL       ?Subroutine16
   2479                SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
   2480                SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   2481                SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   2482                SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   2483                SDIO_SendCommand(&SDIO_CmdInitStructure);
   2484          
   2485                errorstatus = CmdResp1Error(SDIO_APP_CMD);
   \                     ??CrossCallReturnLabel_194:
   \   00000044   3720               MOVS     R0,#+55
   \   00000046   ........           BL       CmdResp1Error
   2486          
   2487                if (errorstatus != SD_OK)
   \   0000004A   2A28               CMP      R0,#+42
   \   0000004C   15D1               BNE.N    ??SDEnWideBus_2
   2488                {
   2489                  return(errorstatus);
   2490                }
   2491          
   2492                /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
   2493                SDIO_CmdInitStructure.SDIO_Argument = 0x2;
   \   0000004E   0220               MOVS     R0,#+2
   \   00000050   0CE0               B.N      ??SDEnWideBus_5
   2494                SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_SD_SET_BUSWIDTH;
   2495                SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   2496                SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   2497                SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   2498                SDIO_SendCommand(&SDIO_CmdInitStructure);
   2499          
   2500                errorstatus = CmdResp1Error(SDIO_APP_SD_SET_BUSWIDTH);
   2501          
   2502                if (errorstatus != SD_OK)
   2503                {
   2504                  return(errorstatus);
   2505                }
   2506                return(errorstatus);
   2507              }
   2508              else
   2509              {
   2510                errorstatus = SD_REQUEST_NOT_APPLICABLE;
   2511                return(errorstatus);
   \                     ??SDEnWideBus_4:
   \   00000052   2520               MOVS     R0,#+37
   \   00000054   76BD               POP      {R1,R2,R4-R6,PC}
   2512              }
   2513            }   /* If wide bus operation to be disabled */
   2514            else
   2515            {
   2516              /* If requested card supports 1 bit mode operation */
   2517              if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
   \                     ??SDEnWideBus_3:
   \   00000056   11F4803F           TST      R1,#0x10000
   \   0000005A   FAD0               BEQ.N    ??SDEnWideBus_4
   2518              {
   2519                /* Send CMD55 APP_CMD with argument as card's RCA.*/
   2520                SDIO_CmdInitStructure.SDIO_Argument = (u32) RCA << 16;
   \   0000005C   ........           BL       ?Subroutine16
   2521                SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
   2522                SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   2523                SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   2524                SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   2525                SDIO_SendCommand(&SDIO_CmdInitStructure);
   2526          
   2527          
   2528                errorstatus = CmdResp1Error(SDIO_APP_CMD);
   \                     ??CrossCallReturnLabel_193:
   \   00000060   3720               MOVS     R0,#+55
   \   00000062   ........           BL       CmdResp1Error
   2529          
   2530                if (errorstatus != SD_OK)
   \   00000066   2A28               CMP      R0,#+42
   \   00000068   07D1               BNE.N    ??SDEnWideBus_2
   2531                {
   2532                  return(errorstatus);
   2533                }
   2534          
   2535                /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
   2536                SDIO_CmdInitStructure.SDIO_Argument = 0x00;
   \   0000006A   0020               MOVS     R0,#+0
   \                     ??SDEnWideBus_5:
   \   0000006C   E861               STR      R0,[R5, #+28]
   2537                SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_SD_SET_BUSWIDTH;
   \   0000006E   0620               MOVS     R0,#+6
   \   00000070   ........           BL       ??Subroutine51_0
   2538                SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   2539                SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   2540                SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   2541                SDIO_SendCommand(&SDIO_CmdInitStructure);
   2542          
   2543                errorstatus = CmdResp1Error(SDIO_APP_SD_SET_BUSWIDTH);
   \                     ??CrossCallReturnLabel_190:
   \   00000074   0620               MOVS     R0,#+6
   \   00000076   ........           BL       CmdResp1Error
   2544          
   2545                if (errorstatus != SD_OK)
   2546                {
   2547                  return(errorstatus);
   2548                }
   2549          
   2550                return(errorstatus);
   \                     ??SDEnWideBus_2:
   \   0000007A   76BD               POP      {R1,R2,R4-R6,PC}  ;; return
   \                     ??SDEnWideBus_1:
   \   0000007C   ........           DC32     TransferError
   2551              }
   2552              else
   2553              {
   2554                errorstatus = SD_REQUEST_NOT_APPLICABLE;
   2555                return(errorstatus);
   2556              }
   2557            }
   2558          }
   2559          
   2560          /*******************************************************************************
   2561          * Function Name  : IsCardProgramming
   2562          * Description    : Checks if the SD card is in programming state.
   2563          * Input          : pstatus: pointer to the variable that will contain the SD
   2564          *                  card state.
   2565          * Output         : None
   2566          * Return         : SD_Error: SD Card Error code.
   2567          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   2568          static SD_Error IsCardProgramming(u8 *pstatus)
   2569          {
   \                     IsCardProgramming:
   \   00000000   1CB5               PUSH     {R2-R4,LR}
   \   00000002   0446               MOV      R4,R0
   2570            SD_Error errorstatus = SD_OK;
   2571            vu32 respR1 = 0, status = 0;
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   0090               STR      R0,[SP, #+0]
   \   00000008   0190               STR      R0,[SP, #+4]
   2572          
   2573            SDIO_CmdInitStructure.SDIO_Argument = (u32) RCA << 16;
   \   0000000A   ........           BL       ?Subroutine10
   2574            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
   2575            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   2576            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   2577            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   2578            SDIO_SendCommand(&SDIO_CmdInitStructure);
   2579          
   2580            status = SDIO->STA;
   \                     ??CrossCallReturnLabel_179:
   \   0000000E   5048               LDR.N    R0,??IsCardProgramming_0  ;; 0x40018034
   2581            while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
   2582            {
   2583              status = SDIO->STA;
   \                     ??IsCardProgramming_1:
   \   00000010   0168               LDR      R1,[R0, #+0]
   \   00000012   0191               STR      R1,[SP, #+4]
   2584            }
   \   00000014   0199               LDR      R1,[SP, #+4]
   \   00000016   11F0450F           TST      R1,#0x45
   \   0000001A   F9D0               BEQ.N    ??IsCardProgramming_1
   2585          
   2586            if (status & SDIO_FLAG_CTIMEOUT)
   \   0000001C   0198               LDR      R0,[SP, #+4]
   \   0000001E   10F0040F           TST      R0,#0x4
   \   00000022   03D0               BEQ.N    ??IsCardProgramming_2
   2587            {
   2588              errorstatus = SD_CMD_RSP_TIMEOUT;
   2589              SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
   \   00000024   ........           BL       ?Subroutine2
   2590              return(errorstatus);
   \                     ??CrossCallReturnLabel_0:
   \   00000028   0320               MOVS     R0,#+3
   \   0000002A   16BD               POP      {R1,R2,R4,PC}
   2591            }
   2592            else if (status & SDIO_FLAG_CCRCFAIL)
   \                     ??IsCardProgramming_2:
   \   0000002C   0198               LDR      R0,[SP, #+4]
   \   0000002E   10F0010F           TST      R0,#0x1
   \   00000032   04D0               BEQ.N    ??IsCardProgramming_3
   2593            {
   2594              errorstatus = SD_CMD_CRC_FAIL;
   2595              SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
   \   00000034   0120               MOVS     R0,#+1
   \   00000036   ........           BL       SDIO_ClearFlag
   2596              return(errorstatus);
   \   0000003A   0120               MOVS     R0,#+1
   \   0000003C   16BD               POP      {R1,R2,R4,PC}
   2597            }
   2598          
   2599            status = (u32)SDIO_GetCommandResponse();
   \                     ??IsCardProgramming_3:
   \   0000003E   ........           BL       SDIO_GetCommandResponse
   \   00000042   0190               STR      R0,[SP, #+4]
   2600          
   2601            /* Check response received is of desired command */
   2602            if (status != SDIO_SEND_STATUS)
   \   00000044   0198               LDR      R0,[SP, #+4]
   \   00000046   0D28               CMP      R0,#+13
   \   00000048   01D0               BEQ.N    ??IsCardProgramming_4
   2603            {
   2604              errorstatus = SD_ILLEGAL_CMD;
   2605              return(errorstatus);
   \                     ??IsCardProgramming_5:
   \   0000004A   1020               MOVS     R0,#+16
   \   0000004C   16BD               POP      {R1,R2,R4,PC}
   2606            }
   2607          
   2608            /* Clear all the static flags */
   2609            SDIO_ClearFlag(SDIO_STATIC_FLAGS);
   \                     ??IsCardProgramming_4:
   \   0000004E   ........           BL       ?Subroutine18
   2610          
   2611          
   2612            /* We have received response, retrieve it for analysis  */
   2613            respR1 = SDIO_GetResponse(SDIO_RESP1);
   \                     ??CrossCallReturnLabel_44:
   \   00000052   ........           BL       ?Subroutine32
   \                     ??CrossCallReturnLabel_110:
   \   00000056   0090               STR      R0,[SP, #+0]
   2614          
   2615            /* Find out card status */
   2616            *pstatus = (u8) ((respR1 >> 9) & 0x0000000F);
   \   00000058   0098               LDR      R0,[SP, #+0]
   \   0000005A   400A               LSRS     R0,R0,#+9
   \   0000005C   00F00F00           AND      R0,R0,#0xF
   \   00000060   2070               STRB     R0,[R4, #+0]
   2617          
   2618            if ((respR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
   \   00000062   0098               LDR      R0,[SP, #+0]
   \   00000064   3B49               LDR.N    R1,??IsCardProgramming_0+0x4  ;; 0xfdffe008
   \   00000066   0142               TST      R1,R0
   \   00000068   6FD0               BEQ.N    ??IsCardProgramming_6
   2619            {
   2620              return(errorstatus);
   2621            }
   2622          
   2623            if (respR1 & SD_OCR_ADDR_OUT_OF_RANGE)
   \   0000006A   0098               LDR      R0,[SP, #+0]
   \   0000006C   10F0004F           TST      R0,#0x80000000
   \   00000070   01D0               BEQ.N    ??IsCardProgramming_7
   2624            {
   2625              return(SD_ADDR_OUT_OF_RANGE);
   \   00000072   1C20               MOVS     R0,#+28
   \   00000074   16BD               POP      {R1,R2,R4,PC}
   2626            }
   2627          
   2628            if (respR1 & SD_OCR_ADDR_MISALIGNED)
   \                     ??IsCardProgramming_7:
   \   00000076   0098               LDR      R0,[SP, #+0]
   \   00000078   10F0804F           TST      R0,#0x40000000
   \   0000007C   01D0               BEQ.N    ??IsCardProgramming_8
   2629            {
   2630              return(SD_ADDR_MISALIGNED);
   \   0000007E   0920               MOVS     R0,#+9
   \   00000080   16BD               POP      {R1,R2,R4,PC}
   2631            }
   2632          
   2633            if (respR1 & SD_OCR_BLOCK_LEN_ERR)
   \                     ??IsCardProgramming_8:
   \   00000082   0098               LDR      R0,[SP, #+0]
   \   00000084   10F0005F           TST      R0,#0x20000000
   \   00000088   01D0               BEQ.N    ??IsCardProgramming_9
   2634            {
   2635              return(SD_BLOCK_LEN_ERR);
   \   0000008A   0A20               MOVS     R0,#+10
   \   0000008C   16BD               POP      {R1,R2,R4,PC}
   2636            }
   2637          
   2638            if (respR1 & SD_OCR_ERASE_SEQ_ERR)
   \                     ??IsCardProgramming_9:
   \   0000008E   0098               LDR      R0,[SP, #+0]
   \   00000090   10F0805F           TST      R0,#0x10000000
   \   00000094   01D0               BEQ.N    ??IsCardProgramming_10
   2639            {
   2640              return(SD_ERASE_SEQ_ERR);
   \   00000096   0B20               MOVS     R0,#+11
   \   00000098   16BD               POP      {R1,R2,R4,PC}
   2641            }
   2642          
   2643            if (respR1 & SD_OCR_BAD_ERASE_PARAM)
   \                     ??IsCardProgramming_10:
   \   0000009A   0098               LDR      R0,[SP, #+0]
   \   0000009C   10F0006F           TST      R0,#0x8000000
   \   000000A0   01D0               BEQ.N    ??IsCardProgramming_11
   2644            {
   2645              return(SD_BAD_ERASE_PARAM);
   \   000000A2   0C20               MOVS     R0,#+12
   \   000000A4   16BD               POP      {R1,R2,R4,PC}
   2646            }
   2647          
   2648            if (respR1 & SD_OCR_WRITE_PROT_VIOLATION)
   \                     ??IsCardProgramming_11:
   \   000000A6   0098               LDR      R0,[SP, #+0]
   \   000000A8   10F0806F           TST      R0,#0x4000000
   \   000000AC   01D0               BEQ.N    ??IsCardProgramming_12
   2649            {
   2650              return(SD_WRITE_PROT_VIOLATION);
   \   000000AE   0D20               MOVS     R0,#+13
   \   000000B0   16BD               POP      {R1,R2,R4,PC}
   2651            }
   2652          
   2653            if (respR1 & SD_OCR_LOCK_UNLOCK_FAILED)
   \                     ??IsCardProgramming_12:
   \   000000B2   0098               LDR      R0,[SP, #+0]
   \   000000B4   10F0807F           TST      R0,#0x1000000
   \   000000B8   01D0               BEQ.N    ??IsCardProgramming_13
   2654            {
   2655              return(SD_LOCK_UNLOCK_FAILED);
   \   000000BA   0E20               MOVS     R0,#+14
   \   000000BC   16BD               POP      {R1,R2,R4,PC}
   2656            }
   2657          
   2658            if (respR1 & SD_OCR_COM_CRC_FAILED)
   \                     ??IsCardProgramming_13:
   \   000000BE   0098               LDR      R0,[SP, #+0]
   \   000000C0   10F4000F           TST      R0,#0x800000
   \   000000C4   01D0               BEQ.N    ??IsCardProgramming_14
   2659            {
   2660              return(SD_COM_CRC_FAILED);
   \   000000C6   0F20               MOVS     R0,#+15
   \   000000C8   16BD               POP      {R1,R2,R4,PC}
   2661            }
   2662          
   2663            if (respR1 & SD_OCR_ILLEGAL_CMD)
   \                     ??IsCardProgramming_14:
   \   000000CA   0098               LDR      R0,[SP, #+0]
   \   000000CC   10F4800F           TST      R0,#0x400000
   \   000000D0   BBD1               BNE.N    ??IsCardProgramming_5
   2664            {
   2665              return(SD_ILLEGAL_CMD);
   2666            }
   2667          
   2668            if (respR1 & SD_OCR_CARD_ECC_FAILED)
   \   000000D2   0098               LDR      R0,[SP, #+0]
   \   000000D4   10F4001F           TST      R0,#0x200000
   \   000000D8   01D0               BEQ.N    ??IsCardProgramming_15
   2669            {
   2670              return(SD_CARD_ECC_FAILED);
   \   000000DA   1120               MOVS     R0,#+17
   \   000000DC   16BD               POP      {R1,R2,R4,PC}
   2671            }
   2672          
   2673            if (respR1 & SD_OCR_CC_ERROR)
   \                     ??IsCardProgramming_15:
   \   000000DE   0098               LDR      R0,[SP, #+0]
   \   000000E0   10F4801F           TST      R0,#0x100000
   \   000000E4   01D0               BEQ.N    ??IsCardProgramming_16
   2674            {
   2675              return(SD_CC_ERROR);
   \   000000E6   1220               MOVS     R0,#+18
   \   000000E8   16BD               POP      {R1,R2,R4,PC}
   2676            }
   2677          
   2678            if (respR1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
   \                     ??IsCardProgramming_16:
   \   000000EA   0098               LDR      R0,[SP, #+0]
   \   000000EC   10F4002F           TST      R0,#0x80000
   \   000000F0   01D0               BEQ.N    ??IsCardProgramming_17
   2679            {
   2680              return(SD_GENERAL_UNKNOWN_ERROR);
   \   000000F2   1320               MOVS     R0,#+19
   \   000000F4   16BD               POP      {R1,R2,R4,PC}
   2681            }
   2682          
   2683            if (respR1 & SD_OCR_STREAM_READ_UNDERRUN)
   \                     ??IsCardProgramming_17:
   \   000000F6   0098               LDR      R0,[SP, #+0]
   \   000000F8   10F4802F           TST      R0,#0x40000
   \   000000FC   01D0               BEQ.N    ??IsCardProgramming_18
   2684            {
   2685              return(SD_STREAM_READ_UNDERRUN);
   \   000000FE   1420               MOVS     R0,#+20
   \   00000100   16BD               POP      {R1,R2,R4,PC}
   2686            }
   2687          
   2688            if (respR1 & SD_OCR_STREAM_WRITE_OVERRUN)
   \                     ??IsCardProgramming_18:
   \   00000102   0098               LDR      R0,[SP, #+0]
   \   00000104   10F4003F           TST      R0,#0x20000
   \   00000108   01D0               BEQ.N    ??IsCardProgramming_19
   2689            {
   2690              return(SD_STREAM_WRITE_OVERRUN);
   \   0000010A   1520               MOVS     R0,#+21
   \   0000010C   16BD               POP      {R1,R2,R4,PC}
   2691            }
   2692          
   2693            if (respR1 & SD_OCR_CID_CSD_OVERWRIETE)
   \                     ??IsCardProgramming_19:
   \   0000010E   0098               LDR      R0,[SP, #+0]
   \   00000110   10F4803F           TST      R0,#0x10000
   \   00000114   01D0               BEQ.N    ??IsCardProgramming_20
   2694            {
   2695              return(SD_CID_CSD_OVERWRITE);
   \   00000116   1620               MOVS     R0,#+22
   \   00000118   16BD               POP      {R1,R2,R4,PC}
   2696            }
   2697          
   2698            if (respR1 & SD_OCR_WP_ERASE_SKIP)
   \                     ??IsCardProgramming_20:
   \   0000011A   0098               LDR      R0,[SP, #+0]
   \   0000011C   10F4004F           TST      R0,#0x8000
   \   00000120   01D0               BEQ.N    ??IsCardProgramming_21
   2699            {
   2700              return(SD_WP_ERASE_SKIP);
   \   00000122   1720               MOVS     R0,#+23
   \   00000124   16BD               POP      {R1,R2,R4,PC}
   2701            }
   2702          
   2703            if (respR1 & SD_OCR_CARD_ECC_DISABLED)
   \                     ??IsCardProgramming_21:
   \   00000126   0098               LDR      R0,[SP, #+0]
   \   00000128   10F4804F           TST      R0,#0x4000
   \   0000012C   01D0               BEQ.N    ??IsCardProgramming_22
   2704            {
   2705              return(SD_CARD_ECC_DISABLED);
   \   0000012E   1820               MOVS     R0,#+24
   \   00000130   16BD               POP      {R1,R2,R4,PC}
   2706            }
   2707          
   2708            if (respR1 & SD_OCR_ERASE_RESET)
   \                     ??IsCardProgramming_22:
   \   00000132   0098               LDR      R0,[SP, #+0]
   \   00000134   10F4005F           TST      R0,#0x2000
   \   00000138   01D0               BEQ.N    ??IsCardProgramming_23
   2709            {
   2710              return(SD_ERASE_RESET);
   \   0000013A   1920               MOVS     R0,#+25
   \   0000013C   16BD               POP      {R1,R2,R4,PC}
   2711            }
   2712          
   2713            if (respR1 & SD_OCR_AKE_SEQ_ERROR)
   \                     ??IsCardProgramming_23:
   \   0000013E   0098               LDR      R0,[SP, #+0]
   \   00000140   10F0080F           TST      R0,#0x8
   \   00000144   01D0               BEQ.N    ??IsCardProgramming_6
   2714            {
   2715              return(SD_AKE_SEQ_ERROR);
   \   00000146   1A20               MOVS     R0,#+26
   \   00000148   16BD               POP      {R1,R2,R4,PC}
   2716            }
   2717          
   2718            return(errorstatus);
   \                     ??IsCardProgramming_6:
   \   0000014A   2A20               MOVS     R0,#+42
   \   0000014C   16BD               POP      {R1,R2,R4,PC}    ;; return
   \   0000014E   00BF               Nop      
   \                     ??IsCardProgramming_0:
   \   00000150   34800140           DC32     0x40018034
   \   00000154   08E0FFFD           DC32     0xfdffe008
   2719          }
   2720          
   2721          /*******************************************************************************
   2722          * Function Name  : FindSCR
   2723          * Description    : Find the SD card SCR register value.
   2724          * Input          : - rca: selected card address.
   2725          *                  - pscr: pointer to the buffer that will contain the SCR value.
   2726          * Output         : None
   2727          * Return         : SD_Error: SD Card Error code.
   2728          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   2729          static SD_Error FindSCR(u16 rca, u32 *pscr)
   2730          {
   \                     FindSCR:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   83B0               SUB      SP,SP,#+12
   \   00000004   0C46               MOV      R4,R1
   2731            u32 index = 0;
   \   00000006   0025               MOVS     R5,#+0
   2732            SD_Error errorstatus = SD_OK;
   2733            u32 tempscr[2] = {0, 0};
   \   00000008   00A8               ADD      R0,SP,#+0
   \   0000000A   0021               MOVS     R1,#+0
   \   0000000C   0A46               MOV      R2,R1
   \   0000000E   06C0               STM      R0!,{R1,R2}
   2734          
   2735            /* Set Block Size To 8 Bytes */
   2736            /* Send CMD55 APP_CMD with argument as card's RCA */
   2737            SDIO_CmdInitStructure.SDIO_Argument = (u32)8;
   \   00000010   3E4E               LDR.N    R6,??FindSCR_0   ;; TransferError
   \   00000012   0820               MOVS     R0,#+8
   \   00000014   F061               STR      R0,[R6, #+28]
   2738            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
   \   00000016   ........           BL       ?Subroutine39
   2739            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   2740            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   \                     ??CrossCallReturnLabel_146:
   \   0000001A   B162               STR      R1,[R6, #+40]
   2741            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   \   0000001C   4FF48067           MOV      R7,#+1024
   \   00000020   F762               STR      R7,[R6, #+44]
   2742            SDIO_SendCommand(&SDIO_CmdInitStructure);
   \   00000022   ........           BL       ??Subroutine49_0
   2743          
   2744            errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
   \                     ??CrossCallReturnLabel_168:
   \   00000026   1020               MOVS     R0,#+16
   \   00000028   ........           BL       CmdResp1Error
   2745          
   2746            if (errorstatus != SD_OK)
   \   0000002C   2A28               CMP      R0,#+42
   \   0000002E   6BD1               BNE.N    ??FindSCR_1
   2747            {
   2748              return(errorstatus);
   2749            }
   2750          
   2751            /* Send CMD55 APP_CMD with argument as card's RCA */
   2752            SDIO_CmdInitStructure.SDIO_Argument = (u32) RCA << 16;
   \   00000030   706D               LDR      R0,[R6, #+84]
   \   00000032   0004               LSLS     R0,R0,#+16
   \   00000034   F061               STR      R0,[R6, #+28]
   2753            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
   \   00000036   3720               MOVS     R0,#+55
   \   00000038   ........           BL       ?Subroutine40
   2754            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   2755            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   2756            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   2757            SDIO_SendCommand(&SDIO_CmdInitStructure);
   \                     ??CrossCallReturnLabel_147:
   \   0000003C   ........           BL       ??Subroutine49_0
   2758          
   2759            errorstatus = CmdResp1Error(SDIO_APP_CMD);
   \                     ??CrossCallReturnLabel_167:
   \   00000040   3720               MOVS     R0,#+55
   \   00000042   ........           BL       CmdResp1Error
   2760          
   2761            if (errorstatus != SD_OK)
   \   00000046   2A28               CMP      R0,#+42
   \   00000048   5ED1               BNE.N    ??FindSCR_1
   2762            {
   2763              return(errorstatus);
   2764            }
   2765            SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
   \   0000004A   ........           BL       ?Subroutine38
   2766            SDIO_DataInitStructure.SDIO_DataLength = 8;
   \                     ??CrossCallReturnLabel_143:
   \   0000004E   0820               MOVS     R0,#+8
   \   00000050   B060               STR      R0,[R6, #+8]
   2767            SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
   \   00000052   3020               MOVS     R0,#+48
   \   00000054   F060               STR      R0,[R6, #+12]
   2768            SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
   \   00000056   0220               MOVS     R0,#+2
   \   00000058   3061               STR      R0,[R6, #+16]
   2769            SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
   \   0000005A   7561               STR      R5,[R6, #+20]
   2770            SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
   \   0000005C   ........           BL       ?Subroutine12
   2771            SDIO_DataConfig(&SDIO_DataInitStructure);
   2772          
   2773          
   2774            /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
   2775            SDIO_CmdInitStructure.SDIO_Argument = 0x0;
   \                     ??CrossCallReturnLabel_32:
   \   00000060   F561               STR      R5,[R6, #+28]
   2776            SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_SEND_SCR;
   \   00000062   3320               MOVS     R0,#+51
   \   00000064   ........           BL       ?Subroutine40
   2777            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
   2778            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
   2779            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
   2780            SDIO_SendCommand(&SDIO_CmdInitStructure);
   \                     ??CrossCallReturnLabel_148:
   \   00000068   ........           BL       ??Subroutine49_0
   2781          
   2782            errorstatus = CmdResp1Error(SDIO_SD_APP_SEND_SCR);
   \                     ??CrossCallReturnLabel_166:
   \   0000006C   3320               MOVS     R0,#+51
   \   0000006E   ........           BL       CmdResp1Error
   \   00000072   0746               MOV      R7,R0
   2783          
   2784            if (errorstatus != SD_OK)
   \   00000074   2A28               CMP      R0,#+42
   \   00000076   00AE               ADD      R6,SP,#+0
   \   00000078   08D0               BEQ.N    ??FindSCR_2
   2785            {
   2786              return(errorstatus);
   \   0000007A   FEBD               POP      {R1-R7,PC}       ;; return
   2787            }
   2788          
   2789            while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
   2790            {
   2791              if (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
   \                     ??FindSCR_3:
   \   0000007C   ........           BL       ?Subroutine21
   \                     ??CrossCallReturnLabel_65:
   \   00000080   20B1               CBZ      R0,??FindSCR_2
   2792              {
   2793                *(tempscr + index) = SDIO_ReadData();
   \   00000082   ........           BL       SDIO_ReadData
   \   00000086   46F82500           STR      R0,[R6, R5, LSL #+2]
   2794                index++;
   \   0000008A   6D1C               ADDS     R5,R5,#+1
   2795              }
   2796            }
   \                     ??FindSCR_2:
   \   0000008C   ........           BL       ?Subroutine37
   \                     ??CrossCallReturnLabel_138:
   \   00000090   F4D0               BEQ.N    ??FindSCR_3
   2797          
   2798            if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
   \   00000092   ........           BL       ?Subroutine22
   \                     ??CrossCallReturnLabel_70:
   \   00000096   18B1               CBZ      R0,??FindSCR_4
   2799            {
   2800              SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
   \   00000098   ........           BL       ?Subroutine23
   2801              errorstatus = SD_DATA_TIMEOUT;
   2802              return(errorstatus);
   \                     ??CrossCallReturnLabel_76:
   \   0000009C   0420               MOVS     R0,#+4
   \   0000009E   FEBD               POP      {R1-R7,PC}       ;; return
   2803            }
   2804            else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
   \                     ??FindSCR_4:
   \   000000A0   ........           BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_6:
   \   000000A4   18B1               CBZ      R0,??FindSCR_5
   2805            {
   2806              SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
   \   000000A6   ........           BL       ?Subroutine4
   2807              errorstatus = SD_DATA_CRC_FAIL;
   2808              return(errorstatus);
   \                     ??CrossCallReturnLabel_12:
   \   000000AA   0220               MOVS     R0,#+2
   \   000000AC   FEBD               POP      {R1-R7,PC}       ;; return
   2809            }
   2810            else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
   \                     ??FindSCR_5:
   \   000000AE   ........           BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_85:
   \   000000B2   18B1               CBZ      R0,??FindSCR_6
   2811            {
   2812              SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
   \   000000B4   ........           BL       ?Subroutine26
   2813              errorstatus = SD_RX_OVERRUN;
   2814              return(errorstatus);
   \                     ??CrossCallReturnLabel_89:
   \   000000B8   0620               MOVS     R0,#+6
   \   000000BA   FEBD               POP      {R1-R7,PC}       ;; return
   2815            }
   2816            else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
   \                     ??FindSCR_6:
   \   000000BC   ........           BL       ?Subroutine19
   \                     ??CrossCallReturnLabel_53:
   \   000000C0   18B1               CBZ      R0,??FindSCR_7
   2817            {
   2818              SDIO_ClearFlag(SDIO_FLAG_STBITERR);
   \   000000C2   ........           BL       ?Subroutine20
   2819              errorstatus = SD_START_BIT_ERR;
   2820              return(errorstatus);
   \                     ??CrossCallReturnLabel_59:
   \   000000C6   0720               MOVS     R0,#+7
   \   000000C8   FEBD               POP      {R1-R7,PC}       ;; return
   2821            }
   2822          
   2823            /* Clear all the static flags */
   2824            SDIO_ClearFlag(SDIO_STATIC_FLAGS);
   \                     ??FindSCR_7:
   \   000000CA   ........           BL       ?Subroutine18
   2825          
   2826            *(pscr + 1) = ((tempscr[0] & SD_0TO7BITS) << 24) | ((tempscr[0] & SD_8TO15BITS) << 8) | ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
   \                     ??CrossCallReturnLabel_43:
   \   000000CE   0098               LDR      R0,[SP, #+0]
   \   000000D0   00F47F41           AND      R1,R0,#0xFF00
   \   000000D4   0902               LSLS     R1,R1,#+8
   \   000000D6   41EA0060           ORR      R0,R1,R0, LSL #+24
   \   000000DA   0099               LDR      R1,[SP, #+0]
   \   000000DC   01F47F01           AND      R1,R1,#0xFF0000
   \   000000E0   40EA1120           ORR      R0,R0,R1, LSR #+8
   \   000000E4   0099               LDR      R1,[SP, #+0]
   \   000000E6   40EA1160           ORR      R0,R0,R1, LSR #+24
   \   000000EA   6060               STR      R0,[R4, #+4]
   2827          
   2828            *(pscr) = ((tempscr[1] & SD_0TO7BITS) << 24) | ((tempscr[1] & SD_8TO15BITS) << 8) | ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
   \   000000EC   7068               LDR      R0,[R6, #+4]
   \   000000EE   00F47F41           AND      R1,R0,#0xFF00
   \   000000F2   0902               LSLS     R1,R1,#+8
   \   000000F4   41EA0061           ORR      R1,R1,R0, LSL #+24
   \   000000F8   00F47F02           AND      R2,R0,#0xFF0000
   \   000000FC   41EA1221           ORR      R1,R1,R2, LSR #+8
   \   00000100   41EA1060           ORR      R0,R1,R0, LSR #+24
   \   00000104   2060               STR      R0,[R4, #+0]
   2829          
   2830            return(errorstatus);
   \   00000106   3846               MOV      R0,R7
   \                     ??FindSCR_1:
   \   00000108   FEBD               POP      {R1-R7,PC}       ;; return
   \   0000010A   00BF               Nop      
   \                     ??FindSCR_0:
   \   0000010C   ........           DC32     TransferError
   2831          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine40:
   \   00000000   3062               STR      R0,[R6, #+32]
   \   00000002   4020               MOVS     R0,#+64
   \   00000004   7062               STR      R0,[R6, #+36]
   \   00000006   B562               STR      R5,[R6, #+40]
   \   00000008   F762               STR      R7,[R6, #+44]
   \   0000000A   7047               BX       LR
   2832          
   2833          /*******************************************************************************
   2834          * Function Name  : convert_from_bytes_to_power_of_two
   2835          * Description    : Converts the number of bytes in power of two and returns the
   2836          *                  power.
   2837          * Input          : NumberOfBytes: number of bytes.
   2838          * Output         : None
   2839          * Return         : None
   2840          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2841          static u8 convert_from_bytes_to_power_of_two(u16 NumberOfBytes)
   2842          {
   \                     convert_from_bytes_to_power_of_two:
   \   00000000   0146               MOV      R1,R0
   2843            u8 count = 0;
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   02E0               B.N      ??convert_from_bytes_to_power_of_two_0
   2844          
   2845            while (NumberOfBytes != 1)
   2846            {
   2847              NumberOfBytes >>= 1;
   \                     ??convert_from_bytes_to_power_of_two_1:
   \   00000006   4908               LSRS     R1,R1,#+1
   2848              count++;
   \   00000008   401C               ADDS     R0,R0,#+1
   \   0000000A   C0B2               UXTB     R0,R0
   2849            }
   \                     ??convert_from_bytes_to_power_of_two_0:
   \   0000000C   0129               CMP      R1,#+1
   \   0000000E   FAD1               BNE.N    ??convert_from_bytes_to_power_of_two_1
   2850            return(count);
   \   00000010   7047               BX       LR               ;; return
   2851          }
   2852          
   2853          /*******************************************************************************
   2854          * Function Name  : GPIO_Configuration
   2855          * Description    : Configures the SDIO Corresponding GPIO Ports
   2856          * Input          : None
   2857          * Output         : None
   2858          * Return         : None
   2859          *******************************************************************************/
   2860          static void SDIO_GPIO_Configuration(void)
   2861          {
   2862            GPIO_InitTypeDef  GPIO_InitStructure;
   2863          
   2864            /* GPIOC and GPIOD Periph clock enable */
   2865            //RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD, ENABLE);
   2866          
   2867            /* Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
   2868            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;
   2869            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   2870            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   2871            GPIO_Init(GPIOC, &GPIO_InitStructure);
   2872          
   2873            /* Configure PD.02 CMD line */
   2874            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   2875            GPIO_Init(GPIOD, &GPIO_InitStructure);  
   2876          }
   2877          
   2878          /*******************************************************************************
   2879          * Function Name  : DMA_TxConfiguration
   2880          * Description    : Configures the DMA2 Channel4 for SDIO Tx request.
   2881          * Input          : - BufferSRC: pointer to the source buffer
   2882          *                  - BufferSize: buffer size
   2883          * Output         : None
   2884          * Return         : None
   2885          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   2886          static void DMA_TxConfiguration(u32 *BufferSRC, u32 BufferSize)
   2887          {
   \                     DMA_TxConfiguration:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   8CB0               SUB      SP,SP,#+48
   \   00000004   ........           BL       ?Subroutine42
   2888            DMA_InitTypeDef DMA_InitStructure;
   2889          
   2890            DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
   2891          
   2892            /* DMA2 Channel4 disable */
   2893            DMA_Cmd(DMA2_Channel4, DISABLE);
   \                     ??CrossCallReturnLabel_154:
   \   00000008   ........           BL       ?Subroutine43
   2894          
   2895            /* DMA2 Channel4 Config */
   2896            DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)SDIO_FIFO_Address;
   \                     ??CrossCallReturnLabel_156:
   \   0000000C   ....               LDR.N    R0,??DataTable22  ;; 0x40018080
   \   0000000E   0090               STR      R0,[SP, #+0]
   2897            DMA_InitStructure.DMA_MemoryBaseAddr = (u32)BufferSRC;
   \   00000010   0196               STR      R6,[SP, #+4]
   2898            DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
   \   00000012   1020               MOVS     R0,#+16
   \   00000014                      REQUIRE ?Subroutine0
   \   00000014                      ;; // Fall through to label ?Subroutine0
   2899            DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
   2900            DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   2901            DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
   2902            DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
   2903            DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
   2904            DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
   2905            DMA_InitStructure.DMA_Priority = DMA_Priority_High;
   2906            DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
   2907            DMA_Init(DMA2_Channel4, &DMA_InitStructure);
   2908          
   2909            /* DMA2 Channel4 enable */
   2910            DMA_Cmd(DMA2_Channel4, ENABLE);
   2911          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0290               STR      R0,[SP, #+8]
   \   00000002   A808               LSRS     R0,R5,#+2
   \   00000004   0390               STR      R0,[SP, #+12]
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   0490               STR      R0,[SP, #+16]
   \   0000000A   8020               MOVS     R0,#+128
   \   0000000C   0590               STR      R0,[SP, #+20]
   \   0000000E   4FF40070           MOV      R0,#+512
   \   00000012   0690               STR      R0,[SP, #+24]
   \   00000014   4FF40060           MOV      R0,#+2048
   \   00000018   0790               STR      R0,[SP, #+28]
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   0890               STR      R0,[SP, #+32]
   \   0000001E   4FF40050           MOV      R0,#+8192
   \   00000022   0990               STR      R0,[SP, #+36]
   \   00000024   0020               MOVS     R0,#+0
   \   00000026   0A90               STR      R0,[SP, #+40]
   \   00000028   00A9               ADD      R1,SP,#+0
   \   0000002A   2046               MOV      R0,R4
   \   0000002C   ........           BL       DMA_Init
   \   00000030   0121               MOVS     R1,#+1
   \   00000032   2046               MOV      R0,R4
   \   00000034   ........           BL       DMA_Cmd
   \   00000038   0CB0               ADD      SP,SP,#+48
   \   0000003A   70BD               POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine43:
   \   00000000   024C               LDR.N    R4,??Subroutine43_0  ;; 0x40020444
   \   00000002   0021               MOVS     R1,#+0
   \   00000004   2046               MOV      R0,R4
   \   00000006   ........           B.W      DMA_Cmd
   \   0000000A   00BF               Nop      
   \                     ??Subroutine43_0:
   \   0000000C   44040240           DC32     0x40020444

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine42:
   \   00000000   0646               MOV      R6,R0
   \   00000002   0D46               MOV      R5,R1
   \   00000004   0148               LDR.N    R0,??Subroutine42_0  ;; 0x1000f000
   \   00000006   ........           B.W      DMA_ClearFlag
   \   0000000A   00BF               Nop      
   \                     ??Subroutine42_0:
   \   0000000C   00F00010           DC32     0x1000f000
   2912          
   2913          /*******************************************************************************
   2914          * Function Name  : DMA_RxConfiguration
   2915          * Description    : Configures the DMA2 Channel4 for SDIO Rx request.
   2916          * Input          : - BufferDST: pointer to the destination buffer
   2917          *                  - BufferSize: buffer size
   2918          * Output         : None
   2919          * Return         : None
   2920          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   2921          static void DMA_RxConfiguration(u32 *BufferDST, u32 BufferSize)
   2922          {
   \                     DMA_RxConfiguration:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   8CB0               SUB      SP,SP,#+48
   \   00000004   ........           BL       ?Subroutine42
   2923            DMA_InitTypeDef DMA_InitStructure;
   2924          
   2925            DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
   2926          
   2927            /* DMA2 Channel4 disable */
   2928            DMA_Cmd(DMA2_Channel4, DISABLE);
   \                     ??CrossCallReturnLabel_153:
   \   00000008   ........           BL       ?Subroutine43
   2929          
   2930            /* DMA2 Channel4 Config */
   2931            DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)SDIO_FIFO_Address;
   \                     ??CrossCallReturnLabel_155:
   \   0000000C   0248               LDR.N    R0,??DMA_RxConfiguration_0  ;; 0x40018080
   \   0000000E   0090               STR      R0,[SP, #+0]
   2932            DMA_InitStructure.DMA_MemoryBaseAddr = (u32)BufferDST;
   \   00000010   0196               STR      R6,[SP, #+4]
   2933            DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
   \   00000012   0020               MOVS     R0,#+0
   \   00000014   ....               B.N      ?Subroutine0
   \   00000016   00BF               Nop      
   \                     ??DMA_RxConfiguration_0:
   \   00000018   80800140           DC32     0x40018080
   2934            DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
   2935            DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   2936            DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
   2937            DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
   2938            DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
   2939            DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
   2940            DMA_InitStructure.DMA_Priority = DMA_Priority_High;
   2941            DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
   2942            DMA_Init(DMA2_Channel4, &DMA_InitStructure);
   2943          
   2944            /* DMA2 Channel4 enable */
   2945            DMA_Cmd(DMA2_Channel4, ENABLE);
   2946          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     SDIO_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     TransferError

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   34800140           DC32     0x40018034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   FFFF0F00           DC32     0xfffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   34800140           DC32     0x40018034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     TransferError

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   80800140           DC32     0x40018080

   \                                 In section .rodata, align 4
   \   00000000   000000000000       DC32 0, 0
   \              0000        

   \                                 In section .rodata, align 4
   \   00000000   000000000000       DC32 0, 0
   \              0000        
   2947          
   2948          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     CmdResp1Error                       8
     CmdResp2Error                       8
     DMA_RxConfiguration                64
     DMA_TxConfiguration                64
     FindSCR                            32
     IsCardProgramming                  16
     SDEnWideBus                        24
     SD_EnableWideBusOperation          16
     SD_Erase                           32
     SD_GetCardInfo                     24
     SD_GetTransferState                 0
     SD_Init                            16
     SD_InitializeCards                 16
     SD_PowerOFF                         8
     SD_PowerON                         40
     SD_ProcessIRQSrc                   16
     SD_ReadBlock                       40
     SD_ReadMultiBlocks                 40
     SD_SelectDeselect                   8
     SD_SendSDStatus                    24
     SD_SendStatus                      16
     SD_SetDeviceMode                    0
     SD_StopTransfer                     8
     SD_WriteBlock                      48
     SD_WriteMultiBlocks                48
     convert_from_bytes_to_power_of_two
                                         0


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     SDIO_InitStructure               24
     TransferError                   116
     SDIO_DataInitStructure
     SDIO_CmdInitStructure
     CSD_Tab
     CID_Tab
     CardType
     RCA
     DeviceMode
     TotalNumberOfBytes
     StopCondition
     SrcBuffer
     DestBuffer
     TransferEnd
     NumberOfBytes
     SD_Init                         120
     SD_PowerON                      324
     ?Subroutine9                      4
     ??Subroutine44_0                  8
     ??Subroutine45_0                  4
     ??Subroutine46_0                  8
     ?Subroutine30                    12
     ?Subroutine31                     4
     ?Subroutine32                     6
     ?Subroutine2                      6
     SD_PowerOFF                      12
     SD_InitializeCards              266
     ?Subroutine18                     8
     ??Subroutine51_0                  4
     ??Subroutine52_0                  8
     ??Subroutine53_0                  4
     ??Subroutine54_0                  8
     ?Subroutine33                    14
     SD_GetCardInfo                  644
     SD_EnableWideBusOperation        98
     ?Subroutine13                    14
     SD_SetDeviceMode                 28
     SD_SelectDeselect                36
     ?Subroutine1                      8
     SD_ReadBlock                    386
     ??Subroutine48_0                  4
     ??Subroutine49_0                  8
     ?Subroutine24                     8
     ?Subroutine6                     10
     ?Subroutine5                     10
     ?Subroutine41                    12
     ?Subroutine39                    10
     ?Subroutine38                     6
     ?Subroutine34                     4
     ?Subroutine14                     6
     ?Subroutine12                    10
     ?Subroutine23                     6
     ?Subroutine22                     6
     ?Subroutine20                     8
     ?Subroutine19                     8
     ?Subroutine4                      6
     ?Subroutine3                      6
     ?Subroutine37                    16
     ?Subroutine26                     6
     ?Subroutine25                     6
     ?Subroutine21                     8
     SD_ReadMultiBlocks              462
     ?Subroutine29                    14
     ?Subroutine17                     8
     ??Subroutine47_0                  8
     SD_WriteBlock                   500
     ?Subroutine8                     10
     ?Subroutine7                     10
     ?Subroutine35                     4
     SD_WriteMultiBlocks             612
     ?Subroutine28                    12
     ?Subroutine36                    12
     ?Subroutine15                    10
     SD_GetTransferState              20
     SD_StopTransfer                  24
     ??Subroutine50_0                 22
     SD_Erase                        200
     ?Subroutine27                    14
     SD_SendStatus                    32
     ?Subroutine10                    12
     SD_SendSDStatus                 280
     ?Subroutine16                     4
     SD_ProcessIRQSrc                388
     ?Subroutine11                     8
     CmdResp1Error                   260
     CmdResp2Error                    48
     SDEnWideBus                     128
     IsCardProgramming               344
     FindSCR                         272
     ?Subroutine40                    12
     convert_from_bytes_to_power_of_two
                                      18
     DMA_TxConfiguration              20
     ?Subroutine0                     60
     ?Subroutine43                    16
     ?Subroutine42                    16
     DMA_RxConfiguration              28
     ??DataTable8                      4
     ??DataTable16                     4
     ??DataTable18                     4
     ??DataTable19                     4
     ??DataTable20                     4
     ??DataTable21                     4
     ??DataTable22                     4
     ?<Constant {0L, 0L}>              8
     ?<Constant {0L, 0L}>_1            8

 
    24 bytes in section .bss
   116 bytes in section .data
    16 bytes in section .rodata
 6 114 bytes in section .text
 
 6 114 bytes of CODE  memory
    16 bytes of CONST memory
   140 bytes of DATA  memory

Errors: none
Warnings: none
