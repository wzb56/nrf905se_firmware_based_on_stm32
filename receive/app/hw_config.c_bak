/******************** (C) COPYRIGHT 2011 SDUEM ********************
* File Name          : hw_config.c
* Author             : SDUEM
* Version            : V2.2.0
* Date               : 05/13/2011
* Description        : Hardware Configuration & Setup
********************************************************************************
*
*******************************************************************************/


/* Includes ------------------------------------------------------------------*/
#include "hw_config.h"

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/


/* Extern variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
void RCC_Configuration(void);
void SysTick_Configuration(void);
/* Private functions ---------------------------------------------------------*/

/********************************************************************
函数功能：系统初始化
入口参数：无。
返    回：无。
备    注：
            设置系统时钟
			初始化各外设时钟
			打开需要用的外设
			中断设置
			配制IO引脚，定义IO功能
			初始化存储器
			初始化USB
********************************************************************/
void System_Init(void)
{

  /* RCC configuration */
  	RCC_Configuration();		 /*****与时钟相关的寄存器配制*****/
    UART_Configuration();
   	SPI_Configuration();
}
/********************************
  函数功能：USRAT初始配置
  入口参数：无
  返回：   无
  备注：
            将USART挂在APB总线上
            定义USART的TX、RX引脚
            USART中断设置
            USART配置并初始化
            USART中断使能
            USART使能
************************************/
void UART_Configuration(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;
  USART_InitTypeDef USART_InitStructure;

  /*使能USART1时钟，这两个接口的时钟挂在APB2上*/
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART_USING, ENABLE);

  /* 配置 USART1 Rx (PA.10) as input floating */
  GPIO_InitStructure.GPIO_Pin = UART_RX_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIO_FOR_USART, &GPIO_InitStructure);

  /* 配置 USART1 Tx (PA.09) as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = UART_TX_PIN;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIO_FOR_USART, &GPIO_InitStructure);

  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);

  /* Enable USART1 Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = USART_USING_IRQChannel;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
	
  USART_StructInit(& USART_InitStructure);
  USART_InitStructure.USART_BaudRate = 115200;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    /* Configure the USART1 */
  USART_Init(USART_USING, &USART_InitStructure);

  /* Enable the USART Receive interrupt */
  USART_Cmd(USART_USING, ENABLE);/*USART1使能*/

}


/*************************************
函数功能：SPI初始配置
  入口参数：无
  返回：   无
  备注：
            将SPI挂在APB总线上
            定义USART的MOSI、MISO、SCK引脚，NSS引脚并没有按照标准来配置，只是作为一个普通GPIO，具体配置在NRF24L01.c的NRF24L01_GPIO_Config函数中
            SPI中断设置
            SPI配置并初始化
            SPI中断使能
            SPI使能
************************************/
void SPI_Configuration(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;
  SPI_InitTypeDef  SPI_InitStructure;

  /*使能SPI1的时钟，这个接口的时钟挂在APB2上*/
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI_USING, ENABLE);

  /* 配置SPI1的输出引脚: MOSI、SCK引脚 */
  GPIO_InitStructure.GPIO_Pin = SPI_MOSI_PIN | SPI_SCK_PIN ;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;   //push-pull alternate function output mode
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  // the speed mode configer
  GPIO_Init(GPIO_FOR_SPI, &GPIO_InitStructure);

  /* 配置SPI1的输入引脚:SPI1  MISO configuration */
  GPIO_InitStructure.GPIO_Pin = SPI_MISO_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_FOR_SPI, &GPIO_InitStructure);

#if 0
  SPI_I2S_ITConfig(SPI_USING, SPI_I2S_IT_RXNE, DISABLE);  //关闭接收中断，
  SPI_I2S_ITConfig(SPI_USING, SPI_I2S_IT_TXE, DISABLE);   //关闭发送中断
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);

  /* Enable SPI1 Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = SPI_USING_IRQChannel;        /****SPI1_IRQChannel**/
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
#endif
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;/****全双工模式****/
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;                     /****主模式********/
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;                /**数据长度为1字节**/
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;               /**每个字节高位在前**/
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;                       /**空闲时处于低电平**/
  /**SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;  **/              /**从第二个时钟周期开始采样*/
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;                    /***从第一个时钟周期开始采样**/
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
  SPI_InitStructure.SPI_CRCPolynomial = 7;

  SPI_Init(SPI_USING, &SPI_InitStructure);
  /* Enable SPI1 CRC calculation */
  //SPI_CalculateCRC(SPI_USING, DISABLE);  //使能RCC计算

  SPI_Cmd(SPI_USING, ENABLE);           //使能SPI1
}
/*******************************************************************************
* Function Name  : Set_System
* Description    : Configures Main system clocks & power
* Input          : None.
* Return         : None.
*******************************************************************************/
void RCC_Configuration(void)
{
  ErrorStatus HSEStartUpStatus;

  /* RCC system reset(for debug purpose) */
  RCC_DeInit();	   //将RCC寄存器设备缺省值

  /* Enable HSE */
  RCC_HSEConfig(RCC_HSE_ON);  //外部高速振荡器HSE 开启

  /* Wait till HSE is ready */
  HSEStartUpStatus = RCC_WaitForHSEStartUp();	//等待HSE启动

  if (HSEStartUpStatus == SUCCESS)	  //如果HSE晶振稳定且就绪
  {
    /* Enable Prefetch Buffer */
    FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);  //预取指缓存使能

    /* Flash 2 wait state */
    FLASH_SetLatency(FLASH_Latency_2);	//设置FLASH存储器延时时钟周期数为2延时周期

    /* HCLK = SYSCLK */
    RCC_HCLKConfig(RCC_SYSCLK_Div1);  //设置AHB时钟＝系统时钟

    /* PCLK2 = HCLK */
    RCC_PCLK2Config(RCC_HCLK_Div1);	 //设置APB2时钟 ＝ HCLK

    /* PCLK1 = HCLK/2 */
    RCC_PCLK1Config(RCC_HCLK_Div2);	   //设置APB1时钟 ＝ HCLK/2

    /* ADCCLK = PCLK2/6 */
    RCC_ADCCLKConfig(RCC_PCLK2_Div6);	//设置ADC时钟＝PCLK/6

	//PLL设置
	//PLL输入时钟＝HSE时钟频率   输出 9倍频（HSE×9）
    RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);     //72M

    /* Enable PLL */
    RCC_PLLCmd(ENABLE);

    /* Wait till PLL is ready */
    while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)	 //等待PLL就绪
    {}

    /* Select PLL as system clock source */
    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);	//选择PLL作为系统时钟

    /* Wait till PLL is used as system clock source */
	//等待设置系统时钟为PLL成功
	//返回值为	00：HSI  04：HSE  08：PLL
    while (RCC_GetSYSCLKSource() != 0x08)
    {}
     RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB |RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD|RCC_APB2Periph_AFIO , ENABLE);
      /* DMA1 and DMA2 clock enable */
     //RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1 | RCC_AHBPeriph_DMA2, ENABLE);
     // 改变指定管脚的映射 GPIO_Remap_SWJ_JTAGDisable ，JTAG-DP 禁用 + SW-DP 使能
    // GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable , ENABLE);
    SysTick_Configuration();
  }
}



/*******************************************************************************
* Function Name  : SysTick_Configuration
* Description    : Configure a SysTick Base time to 10 ms.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
 void SysTick_Configuration(void)
{
  /* Configure HCLK clock as SysTick clock source */
  SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);	//设置SysTick时钟为AHB时钟

  /* SysTick interrupt each 100 Hz with HCLK equal to 72MHz */
  SysTick_SetReload(720000);   //设置重装值

  /* Enable the SysTick Interrupt */
  SysTick_ITConfig(ENABLE);
}

/*******************************************************************************
* Function Name  : Delay
* Description    : Inserts a delay time.
* Input          : nCount: specifies the delay time length (time base 10 ms).
* Output         : None
* Return         : None
*******************************************************************************/
void Delay(u32 nCount)
{
  u32 TimingDelay = nCount;

  /* Enable the SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Enable);

  while(TimingDelay != 0)
  {
	  TimingDelay--;
  }

  /* Disable the SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Disable);

  /* Clear the SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Clear);
}

/*******************************************************************************
* Function Name  : Decrement_TimingDelay
* Description    : Decrements the TimingDelay variable.
* Input          : None
* Output         : TimingDelay
* Return         : None
*******************************************************************************/
void Decrement_TimingDelay( u32 TimingDelay )
{
	if (TimingDelay != 0x00)
	{
		TimingDelay--;
	}
}

/***********************************************
函数功能：1 毫秒延时函数
入口参数：延时数量
返回：无
备注：
       软延时，并不精准
*****************************************/

void delay_ms(u8 n)
{
       u8 i;
       while(n--)
	{
		for(i=0;i<255;i++);
		for(i=0;i<255;i++);
		for(i=0;i<255;i++);
		for(i=0;i<255;i++);
		for(i=0;i<255;i++);
		for(i=0;i<160;i++);
	}
	
}

/***********************************************
函数功能：10 微秒延时函数
入口参数：延时数量
返回：无
备注：
       软延时，并不精准
*****************************************/

static void delay_10us(u8 n)
{
	u8 i;
       while(n--)
	{
		for(i=0;i<7;i++);
	}
}


/******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/
