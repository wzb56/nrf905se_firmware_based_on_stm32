###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     28/May/2011  10:37:10 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Documents and Settings\253642xvvn\桌面\nrf905se\bigbo #
#                    ard\send6\app\nrf905.c                                   #
#    Command line =  "C:\Documents and Settings\253642xvvn\桌面\nrf905se\bigb #
#                    oard\send6\app\nrf905.c" -lC "C:\Documents and           #
#                    Settings\253642xvvn\桌面\nrf905se\bigboard\send6\Debug\L #
#                    ist\" -lb "C:\Documents and                              #
#                    Settings\253642xvvn\桌面\nrf905se\bigboard\send6\Debug\L #
#                    ist\" -o "C:\Documents and Settings\253642xvvn\桌面\nrf9 #
#                    05se\bigboard\send6\Debug\Obj\" --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.4\arm\INC\DLib_Config_Full. #
#                    h" -I "C:\Documents and Settings\253642xvvn\桌面\nrf905s #
#                    e\bigboard\send6\library\inc\" -I "C:\Documents and      #
#                    Settings\253642xvvn\桌面\nrf905se\bigboard\send6\board\" #
#                     -I "C:\Documents and Settings\253642xvvn\桌面\nrf905se\ #
#                    bigboard\send6\app\" -I "D:\Program Files\IAR            #
#                    Systems\Embedded Workbench 5.4\arm\INC\" -Ol             #
#    List file    =  C:\Documents and Settings\253642xvvn\桌面\nrf905se\bigbo #
#                    ard\send6\Debug\List\nrf905.lst                          #
#    Object file  =  C:\Documents and Settings\253642xvvn\桌面\nrf905se\bigbo #
#                    ard\send6\Debug\Obj\nrf905.o                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\253642xvvn\桌面\nrf905se\bigboard\send6\app\nrf905.c
      1          /******************** (C) COPYRIGHT 2011 sdu emlib ********************
      2          **** 	filename: nrf905.c
      3          ***		description: This file provides  the fuctions implemented in NRF905SE.
      4          ***		author: wzb
      5          ***		date: 2011/5/13
      6          *********************************************************************/
      7          
      8          /***********************include files *******************************/
      9          #include "nrf905.h"
     10          
     11          
     12          /*********************** global variables ***************************/

   \                                 In section .bss, align 4
     13          u8 NRF905SE_RxBuffer[NRF905SE_BufferSize];
   \                     NRF905SE_RxBuffer:
   \   00000000                      DS8 32

   \                                 In section .data, align 4
     14          u8 NRF905SE_TxBuffer[NRF905SE_BufferSize] = {
   \                     NRF905SE_TxBuffer:
   \   00000000   303233414243       DC8 48, 50, 51, 65, 66, 67, 68, 69, 48, 50, 51, 65, 66, 67, 68, 69, 48
   \              444530323341
   \              4243444530  
   \   00000011   323341424344       DC8 50, 51, 65, 66, 67, 68, 69, 48, 50, 51, 65, 66, 67, 68, 69
   \              453032334142
   \              434445      
     15          	  0x30,0x32,0x33,0x41, 0x42,0x43,0x44,0x45,  0x30,0x32,0x33,0x41, 0x42,0x43,0x44,0x45,//16
     16          	   0x30,0x32,0x33,0x41, 0x42,0x43,0x44,0x45,  0x30,0x32,0x33,0x41, 0x42,0x43,0x44,0x45//32												 //54
     17          	};

   \                                 In section .data, align 4
     18          u8 NRF905SE_TxAddress[NRF905SE_AddressSize] = {0x31, 0x32, 0x33, 0x34};
   \                     NRF905SE_TxAddress:
   \   00000000   31323334           DC8 49, 50, 51, 52

   \                                 In section .data, align 4
     19          u8 NRF905SE_RxAddress[NRF905SE_AddressSize] = {0x30, 0x31, 0x32, 0x33};
   \                     NRF905SE_RxAddress:
   \   00000000   30313233           DC8 48, 49, 50, 51
     20          

   \                                 In section .bss, align 4
     21          u8 TxAddress[NRF905SE_AddressSize];
   \                     TxAddress:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     22          u8 RxAddress[NRF905SE_AddressSize];
   \                     RxAddress:
   \   00000000                      DS8 4
     23          

   \                                 In section .bss, align 1
     24          u8 NRF905SE_DR_FLAG = 0;
   \                     NRF905SE_DR_FLAG:
   \   00000000                      DS8 1
     25          
     26          
     27          /************************NRF905SE configer register type**********/
     28          typedef struct __NRFConfig__ {
     29             u8 NRF905SE_Config_Length;  /* the bytes size of the configer */
     30             u8 NRF905SE_Config_Buf[10];
     31          }NRF905SE_InitTypeDef;
     32          

   \                                 In section .data, align 4
     33          u8 NRF905SE_Config_Buf[11] =
   \                     NRF905SE_Config_Buf:
   \   00000000   0A4C0C442020       DC8 10, 76, 12, 68, 32, 32, 204, 204, 204, 204, 88, 0
   \              CCCCCCCC5800
     34          {
     35            10,                               //配置命令 数组的长度
     36            0x4c,                             //CH_NO,配置频段在430MHZ
     37            0x0c,                             //输出功率为10db,不重发，节电为正常模式
     38            0x44,                             //地址宽度设置，为4字节
     39            0x20,0x20,                        //接收发送有效数据长度为32字节
     40            0xCC,0xCC,0xCC,0xCC,              //接收地址
     41            0x58,                            //CRC充许，8位CRC校验，外部时钟信号不使能，16M晶振
     42          };
     43          
     44          
     45          
     46          /*---------------------- NRF905SE biscal read/write  functions ---------------*/
     47          static void NRF905SE_GPIO_Config(void);
     48          static void NRF905SE_NVIC_Config(void);
     49          static void NRF905SE_EXTI_Config(void);
     50          static void NRF905SE_InitWriteCR(void);
     51          
     52          
     53          static void SPI_SendByte(SPI_TypeDef * SPIx, u8 data);
     54          static u8 SPI_ReceiveByte(SPI_TypeDef * SPIx) ;
     55          
     56          static u8 		NRF905SE_ReadReg_u8(u8 op);
     57          static void 	NRF905SE_WriteReg_u8(u8 op, u8 value);
     58          
     59          static u8 		NRF905SE_ReadWriteReg_u8(u8 op, u8 value);
     60          
     61          static void 	NRF905SE_WriteReg_Byte(u8 op,  u8 value) ;
     62          static u8		NRF905SE_ReadReg_Byte(u8 op);
     63          
     64          static u8 * 	NRF905SE_ReadReg_Bytes(u8 op_r, u8* arrayPtr, u8 arraySize);
     65          static void 	NRF905SE_WriteReg_Bytes(u8 op_w, const u8* arrayPtr, u8 arraySize);
     66          
     67          static u8 * NRF905SE_GetTxRxAddress(u8 op_r, u8* addr_array, u8 addr_array_length);
     68          static void NRF905SE_SetTxRxAddress(u8 op_w, const u8 * addr_array, u8 addr_array_length);
     69          
     70          /*------------end of NRF905SE  biscal read/write  functions ------------------*/
     71          
     72          
     73          /*******************************************
     74              函数功能：NRF905SE GPIO配置
     75              入口参数：无
     76              返回：    无
     77              备注：
     78                      配置IRQ、CSN(SPI的NSS引脚)、CE引脚
     79                      CSN引脚的模式为普通的输出，而不是复用
     80          *********************************************/

   \                                 In section .text, align 4, keep-with-next
     81          static void NRF905SE_GPIO_Config(void)
     82          {
   \                     NRF905SE_GPIO_Config:
   \   00000000   80B5               PUSH     {R7,LR}
     83            GPIO_InitTypeDef GPIO_InitStructure;
     84          
     85            /* clock  enable **/
     86            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOC| RCC_APB2Periph_AFIO, ENABLE);
   \   00000002   0121               MOVS     R1,#+1
   \   00000004   1520               MOVS     R0,#+21
   \   00000006   ........           BL       RCC_APB2PeriphClockCmd
     87          
     88            /*  NRF905SE CE pin configuration PA.00 */
     89            GPIO_InitStructure.GPIO_Pin = NRF905SE_CE_PIN;
   \   0000000A   0120               MOVS     R0,#+1
   \   0000000C   ADF80000           STRH     R0,[SP, #+0]
     90            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   00000010   1020               MOVS     R0,#+16
   \   00000012   8DF80300           STRB     R0,[SP, #+3]
     91            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000016   0320               MOVS     R0,#+3
   \   00000018   8DF80200           STRB     R0,[SP, #+2]
     92            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   0000001C   00A9               ADD      R1,SP,#+0
   \   0000001E   2948               LDR.N    R0,??NRF905SE_GPIO_Config_0  ;; 0x40010800
   \   00000020   ........           BL       GPIO_Init
     93          
     94            /*  NRF905SE Tx_EN pin configuration  PA.03*/
     95            GPIO_InitStructure.GPIO_Pin = NRF905SE_TX_EN_PIN;
   \   00000024   0820               MOVS     R0,#+8
   \   00000026   ADF80000           STRH     R0,[SP, #+0]
     96            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   0000002A   1020               MOVS     R0,#+16
   \   0000002C   8DF80300           STRB     R0,[SP, #+3]
     97            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000030   0320               MOVS     R0,#+3
   \   00000032   8DF80200           STRB     R0,[SP, #+2]
     98            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000036   00A9               ADD      R1,SP,#+0
   \   00000038   2248               LDR.N    R0,??NRF905SE_GPIO_Config_0  ;; 0x40010800
   \   0000003A   ........           BL       GPIO_Init
     99          
    100              /*  NRF905SE CSN pin configuration  PA.04 */
    101            GPIO_InitStructure.GPIO_Pin = NRF905SE_CSN_PIN;
   \   0000003E   1020               MOVS     R0,#+16
   \   00000040   ADF80000           STRH     R0,[SP, #+0]
    102            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   00000044   1020               MOVS     R0,#+16
   \   00000046   8DF80300           STRB     R0,[SP, #+3]
    103            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000004A   0320               MOVS     R0,#+3
   \   0000004C   8DF80200           STRB     R0,[SP, #+2]
    104            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000050   00A9               ADD      R1,SP,#+0
   \   00000052   1C48               LDR.N    R0,??NRF905SE_GPIO_Config_0  ;; 0x40010800
   \   00000054   ........           BL       GPIO_Init
    105          
    106          
    107            /* NRF905SE IRQ pin configeration PC.00 */
    108            GPIO_InitStructure.GPIO_Pin = NRF905SE_IRQ_PIN;
   \   00000058   0120               MOVS     R0,#+1
   \   0000005A   ADF80000           STRH     R0,[SP, #+0]
    109            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   \   0000005E   0420               MOVS     R0,#+4
   \   00000060   8DF80300           STRB     R0,[SP, #+3]
    110            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000064   0320               MOVS     R0,#+3
   \   00000066   8DF80200           STRB     R0,[SP, #+2]
    111            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   0000006A   00A9               ADD      R1,SP,#+0
   \   0000006C   1648               LDR.N    R0,??NRF905SE_GPIO_Config_0+0x4  ;; 0x40011000
   \   0000006E   ........           BL       GPIO_Init
    112          
    113             /*  NRF905SE_AM_PIN pin configuration  PC.01*/
    114            GPIO_InitStructure.GPIO_Pin = NRF905SE_AM_PIN;
   \   00000072   0220               MOVS     R0,#+2
   \   00000074   ADF80000           STRH     R0,[SP, #+0]
    115            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   \   00000078   0420               MOVS     R0,#+4
   \   0000007A   8DF80300           STRB     R0,[SP, #+3]
    116            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000007E   0320               MOVS     R0,#+3
   \   00000080   8DF80200           STRB     R0,[SP, #+2]
    117            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   00000084   00A9               ADD      R1,SP,#+0
   \   00000086   1048               LDR.N    R0,??NRF905SE_GPIO_Config_0+0x4  ;; 0x40011000
   \   00000088   ........           BL       GPIO_Init
    118          
    119          
    120             /*  NRF905SE_CD_PIN pin configuration PC.02*/
    121            GPIO_InitStructure.GPIO_Pin = NRF905SE_CD_PIN;
   \   0000008C   0420               MOVS     R0,#+4
   \   0000008E   ADF80000           STRH     R0,[SP, #+0]
    122            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   \   00000092   0420               MOVS     R0,#+4
   \   00000094   8DF80300           STRB     R0,[SP, #+3]
    123            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000098   0320               MOVS     R0,#+3
   \   0000009A   8DF80200           STRB     R0,[SP, #+2]
    124            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   0000009E   00A9               ADD      R1,SP,#+0
   \   000000A0   0948               LDR.N    R0,??NRF905SE_GPIO_Config_0+0x4  ;; 0x40011000
   \   000000A2   ........           BL       GPIO_Init
    125          
    126           /*  NRF905SE_PWR_UP_PIN pin configuration PC.03 */
    127            GPIO_InitStructure.GPIO_Pin = NRF905SE_PWR_UP_PIN;
   \   000000A6   0820               MOVS     R0,#+8
   \   000000A8   ADF80000           STRH     R0,[SP, #+0]
    128            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   000000AC   1020               MOVS     R0,#+16
   \   000000AE   8DF80300           STRB     R0,[SP, #+3]
    129            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   000000B2   0320               MOVS     R0,#+3
   \   000000B4   8DF80200           STRB     R0,[SP, #+2]
    130            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   000000B8   00A9               ADD      R1,SP,#+0
   \   000000BA   0348               LDR.N    R0,??NRF905SE_GPIO_Config_0+0x4  ;; 0x40011000
   \   000000BC   ........           BL       GPIO_Init
    131          
    132          
    133          
    134          
    135          }
   \   000000C0   01BD               POP      {R0,PC}          ;; return
   \   000000C2   00BF               Nop      
   \                     ??NRF905SE_GPIO_Config_0:
   \   000000C4   00080140           DC32     0x40010800
   \   000000C8   00100140           DC32     0x40011000
    136          
    137          /**********************************************
    138              函数功能：NRF905SE NVIC配置
    139              入口参数：无
    140              返回：   无
    141              备注：
    142                      配置中断线优先级
    143          *********************************************/

   \                                 In section .text, align 2, keep-with-next
    144          static void NRF905SE_NVIC_Config(void)
    145          {
   \                     NRF905SE_NVIC_Config:
   \   00000000   80B5               PUSH     {R7,LR}
    146            NVIC_InitTypeDef NVIC_InitStructure;
    147          
    148          #ifdef  VECT_TAB_RAM
    149            /* Set the Vector Table base location at 0x20000000 */
    150            NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
    151          #else  /* VECT_TAB_FLASH  */
    152            /* Set the Vector Table base location at 0x08000000 */
    153            NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);
   \   00000002   0021               MOVS     R1,#+0
   \   00000004   5FF00060           MOVS     R0,#+134217728
   \   00000008   ........           BL       NVIC_SetVectorTable
    154          #endif
    155          
    156            /* Configure one bit for preemption priority */
    157            NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
   \   0000000C   4FF4E060           MOV      R0,#+1792
   \   00000010   ........           BL       NVIC_PriorityGroupConfig
    158          
    159            /* Enable the EXTI3 Interrupt */
    160            NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQChannel;
   \   00000014   0620               MOVS     R0,#+6
   \   00000016   8DF80000           STRB     R0,[SP, #+0]
    161            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   8DF80100           STRB     R0,[SP, #+1]
    162            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \   00000020   0020               MOVS     R0,#+0
   \   00000022   8DF80200           STRB     R0,[SP, #+2]
    163            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000026   0120               MOVS     R0,#+1
   \   00000028   8DF80300           STRB     R0,[SP, #+3]
    164            NVIC_Init(&NVIC_InitStructure);
   \   0000002C   00A8               ADD      R0,SP,#+0
   \   0000002E   ........           BL       NVIC_Init
    165          }
   \   00000032   01BD               POP      {R0,PC}          ;; return
    166          
    167          /****************************************************
    168              函数功能：NRF905SE 外部中断配置
    169              入口参数：无
    170              返回：    无
    171              备注：
    172                      配置中断引脚线、中断模式、高/低使能
    173          ***************************************************/
    174          

   \                                 In section .text, align 2, keep-with-next
    175          static void NRF905SE_EXTI_Config(void)
    176          {
   \                     NRF905SE_EXTI_Config:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   83B0               SUB      SP,SP,#+12
    177            EXTI_InitTypeDef EXTI_InitStructure;
    178            GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource0);
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   0220               MOVS     R0,#+2
   \   00000008   ........           BL       GPIO_EXTILineConfig
    179            EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   \   0000000C   0120               MOVS     R0,#+1
   \   0000000E   0090               STR      R0,[SP, #+0]
    180            EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   8DF80400           STRB     R0,[SP, #+4]
    181            EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   \   00000016   0820               MOVS     R0,#+8
   \   00000018   8DF80500           STRB     R0,[SP, #+5]
    182            EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \   0000001C   0120               MOVS     R0,#+1
   \   0000001E   8DF80600           STRB     R0,[SP, #+6]
    183            EXTI_Init(&EXTI_InitStructure);
   \   00000022   00A8               ADD      R0,SP,#+0
   \   00000024   ........           BL       EXTI_Init
    184          
    185          }
   \   00000028   07BD               POP      {R0-R2,PC}       ;; return
    186          
    187          
    188          /*****************************************************
    189          function name: 			NRF905SE_InitWriteCR;
    190          function description: initialize the configer regester of NRF905SE;
    191          
    192          parameters: none;
    193          return:  none;
    194          author: wzb
    195          time:	2011/5/13/pm
    196          
    197          notes: the internal function provided for the fuction: void NRF905SE_Configuration(void);
    198          ***********************************************/

   \                                 In section .text, align 4, keep-with-next
    199          void NRF905SE_InitWriteCR(void) {
   \                     NRF905SE_InitWriteCR:
   \   00000000   80B5               PUSH     {R7,LR}
    200          	NRF905SE_InitTypeDef *  NRF905SE_InitStructurePtr =
    201          	                 		(NRF905SE_InitTypeDef *) NRF905SE_Config_Buf ;		
   \   00000002   0348               LDR.N    R0,??NRF905SE_InitWriteCR_0  ;; NRF905SE_Config_Buf
    202          	NRF905SE_WriteReg_Bytes(NRF905SE_WC, NRF905SE_InitStructurePtr->NRF905SE_Config_Buf,
    203          							NRF905SE_InitStructurePtr->NRF905SE_Config_Length);	
   \   00000004   0278               LDRB     R2,[R0, #+0]
   \   00000006   411C               ADDS     R1,R0,#+1
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   ........           BL       NRF905SE_WriteReg_Bytes
    204          }
   \   0000000E   01BD               POP      {R0,PC}          ;; return
   \                     ??NRF905SE_InitWriteCR_0:
   \   00000010   ........           DC32     NRF905SE_Config_Buf
    205          
    206          
    207          /******************************************************
    208          function name: 			NRF905SE_Configuraton;
    209          function description: initialization  of NRF905SE;
    210          
    211          parameters: none;
    212          return:  none;
    213          author: wzb
    214          time:	2011/5/13/pm
    215          
    216          notes: none
    217          ***********************************************/

   \                                 In section .text, align 4, keep-with-next
    218          void NRF905SE_Configuration(void) {
   \                     NRF905SE_Configuration:
   \   00000000   80B5               PUSH     {R7,LR}
    219          	
    220          	NRF905SE_GPIO_Config();	
   \   00000002   ........           BL       NRF905SE_GPIO_Config
    221          	NRF905SE_NVIC_Config();
   \   00000006   ........           BL       NRF905SE_NVIC_Config
    222          	NRF905SE_EXTI_Config();	
   \   0000000A   ........           BL       NRF905SE_EXTI_Config
    223          	NRF905SE_InitWriteCR();	// initialize the Configer register of NRF905SE
   \   0000000E   ........           BL       NRF905SE_InitWriteCR
    224          
    225          
    226          
    227              /********设置接收地址和发送地址*****/
    228              NRF905SE_SetRxAddress(NRF905SE_RxAddress, NRF905SE_AddressSize);
   \   00000012   0421               MOVS     R1,#+4
   \   00000014   0748               LDR.N    R0,??NRF905SE_Configuration_0  ;; NRF905SE_RxAddress
   \   00000016   ........           BL       NRF905SE_SetRxAddress
    229              NRF905SE_SetTxAddress(NRF905SE_TxAddress, NRF905SE_AddressSize);	
   \   0000001A   0421               MOVS     R1,#+4
   \   0000001C   0648               LDR.N    R0,??NRF905SE_Configuration_0+0x4  ;; NRF905SE_TxAddress
   \   0000001E   ........           BL       NRF905SE_SetTxAddress
    230          
    231              NRF905SE_POWER_ON();        	
   \   00000022   ....               LDR.N    R0,??DataTable7  ;; 0x40011010
   \   00000024   0821               MOVS     R1,#+8
   \   00000026   0160               STR      R1,[R0, #+0]
    232              NRF905SE_STANDBY();
   \   00000028   ........           LDR.W    R0,??DataTable31  ;; 0x40010814
   \   0000002C   0121               MOVS     R1,#+1
   \   0000002E   0160               STR      R1,[R0, #+0]
    233          }
   \   00000030   01BD               POP      {R0,PC}          ;; return
   \   00000032   00BF               Nop      
   \                     ??NRF905SE_Configuration_0:
   \   00000034   ........           DC32     NRF905SE_RxAddress
   \   00000038   ........           DC32     NRF905SE_TxAddress
    234          	
    235          
    236          
    237          
    238          
    239          /*********** set the mode spi/tx/rx ******************************************/
    240          
    241          /*******************************************************************************
    242          * Function Name  : NRF905SE_SetSPIMode
    243          * Description    : set NRF905SE into SPI mode : means
    244          *				   NRF90RSE Enter to standby mode:	
    245          *                  standby mode enable : NRF905SE_TRX_CE = 0.
    246          *
    247          * Input          : None.
    248          * Output         : None.
    249          * Return         : None.
    250          * Note			 : the change of mode  needs some interval time (>=650us).
    251          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    252          void NRF905SE_SetSPIMode(void) {
    253              NRF905SE_POWER_ON();
   \                     NRF905SE_SetSPIMode:
   \   00000000   ....               LDR.N    R0,??DataTable7  ;; 0x40011010
   \   00000002   0821               MOVS     R1,#+8
   \   00000004   0160               STR      R1,[R0, #+0]
    254          	NRF905SE_STANDBY();
   \   00000006   ........           LDR.W    R0,??DataTable31  ;; 0x40010814
   \   0000000A   0121               MOVS     R1,#+1
   \   0000000C   0160               STR      R1,[R0, #+0]
    255          }
   \   0000000E   7047               BX       LR               ;; return
    256          
    257          
    258          /*******************************************************************************
    259          * Function Name  : NRF905SE_SetTxMode
    260          * Description    : set NRF905SE into Tx mode :
    261          *					Tx enanble				:	NRF905SE_TX_EN = 1;
    262          *                  	ShockBurst Mode enable	:	NRF905SE_TRX_CE = 1.
    263          *				
    264          * Input          : None.
    265          * Output         : None.
    266          * Return         : None.
    267          * Note			 : the change of mode  needs some interval time (>=650us).
    268          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    269          void NRF905SE_SetTxMode(void)
    270          {
    271              NRF905SE_POWER_ON();
   \                     NRF905SE_SetTxMode:
   \   00000000   ....               LDR.N    R0,??DataTable7  ;; 0x40011010
   \   00000002   0821               MOVS     R1,#+8
   \   00000004   0160               STR      R1,[R0, #+0]
    272          	NRF905SE_MODE_TX();	
   \   00000006   ....               LDR.N    R0,??DataTable25  ;; 0x40010810
   \   00000008   0821               MOVS     R1,#+8
   \   0000000A   0160               STR      R1,[R0, #+0]
    273          	NRF905SE_SHOCKBURST_TRX();	
   \   0000000C   ....               LDR.N    R0,??DataTable25  ;; 0x40010810
   \   0000000E   0121               MOVS     R1,#+1
   \   00000010   0160               STR      R1,[R0, #+0]
    274          	//delay_10us(130);   /***CE_ON至少持续650us，650us后NRF905SE开始检测空中信息 此时延为转换时研无需额外时延**/
    275          }
   \   00000012   7047               BX       LR               ;; return
    276          
    277          
    278          
    279          /*******************************************************************************
    280          * Function Name  : NRF905SE_SetRxMode
    281          * Description    : set NRF905SE into Rx mode :
    282          *				  Rx enable    			:		NRF905SE_TX_EN = 0;
    283          *                 ShockBurst Mode enable: 		NRF905SE_TRX_CE = 1.
    284          *
    285          * Input          : None.
    286          * Output         : None.
    287          * Return         : None.
    288          * Note			 : the change of mode  needs some interval time (>=650us).
    289          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    290          void NRF905SE_SetRxMode(void)
    291          {
    292              NRF905SE_POWER_ON();
   \                     NRF905SE_SetRxMode:
   \   00000000   ....               LDR.N    R0,??DataTable7  ;; 0x40011010
   \   00000002   0821               MOVS     R1,#+8
   \   00000004   0160               STR      R1,[R0, #+0]
    293          	NRF905SE_MODE_RX();	
   \   00000006   ........           LDR.W    R0,??DataTable31  ;; 0x40010814
   \   0000000A   0821               MOVS     R1,#+8
   \   0000000C   0160               STR      R1,[R0, #+0]
    294          	NRF905SE_SHOCKBURST_TRX();		
   \   0000000E   ....               LDR.N    R0,??DataTable25  ;; 0x40010810
   \   00000010   0121               MOVS     R1,#+1
   \   00000012   0160               STR      R1,[R0, #+0]
    295          	//delay_10us(10);   /***CE_ON至少持续650us，650us后NRF905SE开始检测空中信息**/
    296          }
   \   00000014   7047               BX       LR               ;; return
    297          /***********end of  set the mode spi/tx/rx ***********************************/
    298          
    299          
    300          
    301          
    302          /*********************Private functions ******************************/
    303          

   \                                 In section .text, align 2, keep-with-next
    304          static void SPI_SendByte(SPI_TypeDef * SPIx, u8 data) {	
   \                     SPI_SendByte:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    305          	SPI_I2S_SendData(SPIx, (u16)data);
   \   00000004   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000008   2000               MOVS     R0,R4
   \   0000000A   ........           BL       SPI_I2S_SendData
    306          	while(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);
   \                     ??SPI_SendByte_0:
   \   0000000E   0221               MOVS     R1,#+2
   \   00000010   2000               MOVS     R0,R4
   \   00000012   ........           BL       SPI_I2S_GetFlagStatus
   \   00000016   0028               CMP      R0,#+0
   \   00000018   F9D0               BEQ.N    ??SPI_SendByte_0
    307          }
   \   0000001A   10BD               POP      {R4,PC}          ;; return
    308          

   \                                 In section .text, align 2, keep-with-next
    309          static u8 SPI_ReceiveByte(SPI_TypeDef * SPIx) {
   \                     SPI_ReceiveByte:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    310          	while(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);
   \                     ??SPI_ReceiveByte_0:
   \   00000004   0121               MOVS     R1,#+1
   \   00000006   2000               MOVS     R0,R4
   \   00000008   ........           BL       SPI_I2S_GetFlagStatus
   \   0000000C   0028               CMP      R0,#+0
   \   0000000E   F9D0               BEQ.N    ??SPI_ReceiveByte_0
    311          	return (u8)SPI_I2S_ReceiveData(SPIx);
   \   00000010   2000               MOVS     R0,R4
   \   00000012   ........           BL       SPI_I2S_ReceiveData
   \   00000016   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   10BD               POP      {R4,PC}          ;; return
    312          
    313          }
    314          
    315          
    316          
    317          
    318          /*******************************************************************************
    319          * Function Name  : NRF905SE_Read_u8
    320          * Description    :  internal fuction,it opterates after spi starts.
    321          *					
    322          *
    323          *				
    324          * Input          : None.
    325          * Output         : valuePtr: u8 * - the pointer of the read value
    326          * Return         : return the read value.
    327          * Note			 : it is an internal private function: scope only in this file (static).
    328          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    329          static u8 NRF905SE_Read_u8(u8 * valuePtr) {	
   \                     NRF905SE_Read_u8:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    330          	SPI_SendByte(SPI_USING, NOP);	
   \   00000004   FF21               MOVS     R1,#+255
   \   00000006   ....               LDR.N    R0,??DataTable20  ;; 0x40013000
   \   00000008   ........           BL       SPI_SendByte
    331          	*valuePtr = SPI_ReceiveByte(SPI_USING);	
   \   0000000C   ....               LDR.N    R0,??DataTable20  ;; 0x40013000
   \   0000000E   ........           BL       SPI_ReceiveByte
   \   00000012   2070               STRB     R0,[R4, #+0]
    332          	return *valuePtr;
   \   00000014   2078               LDRB     R0,[R4, #+0]
   \   00000016   10BD               POP      {R4,PC}          ;; return
    333          }
    334          
    335          /*******************************************************************************
    336          * Function Name  : NRF905SE_Write_u8
    337          * Description    :  internal fuction,it opterates after spi starts.
    338          *					
    339          *
    340          *				
    341          * Input          : None.
    342          * Output         : valuePtr: u8 * - the pointer of the write value
    343          * Return         : void.
    344          * Note			 : it is an internal private function: scope only in this file (static)
    345          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    346          static void NRF905SE_Write_u8(const u8 * valuePtr) {	
   \                     NRF905SE_Write_u8:
   \   00000000   80B5               PUSH     {R7,LR}
    347          	SPI_SendByte(SPI_USING, *valuePtr);
   \   00000002   0178               LDRB     R1,[R0, #+0]
   \   00000004   ....               LDR.N    R0,??DataTable20  ;; 0x40013000
   \   00000006   ........           BL       SPI_SendByte
    348          	SPI_ReceiveByte(SPI_USING);	
   \   0000000A   ....               LDR.N    R0,??DataTable20  ;; 0x40013000
   \   0000000C   ........           BL       SPI_ReceiveByte
    349          }
   \   00000010   01BD               POP      {R0,PC}          ;; return
    350          
    351          
    352          /********************* end of Private functions ******************************/
    353          
    354          
    355          
    356          
    357          
    358          /******** the basical fuctions *************************************************/
    359          
    360          /*******************************************************************************
    361          * Function Name  : NRF905SE_ReadReg_u8
    362          * Description    : the function read  a byte from the register which is decided by op .
    363          *					
    364          *
    365          *				
    366          * Input          : op:- op_r -- to indicate which register to be opterated .
    367          * Output         : none.
    368          * Return         : return the read value of the specifical register.
    369          * Note			 : none.
    370          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    371          u8 NRF905SE_ReadReg_u8(u8 op) {
   \                     NRF905SE_ReadReg_u8:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   82B0               SUB      SP,SP,#+8
    372          	
    373          	u8 retval;	
    374          	NRF905SE_SetSPIMode();
   \   00000004   ........           BL       NRF905SE_SetSPIMode
    375          	NRF905SE_SPI_START();
   \   00000008   ....               LDR.N    R0,??DataTable31  ;; 0x40010814
   \   0000000A   1021               MOVS     R1,#+16
   \   0000000C   0160               STR      R1,[R0, #+0]
    376          
    377          	NRF905SE_Write_u8(&op);	
   \   0000000E   02A8               ADD      R0,SP,#+8
   \   00000010   ........           BL       NRF905SE_Write_u8
    378          	NRF905SE_Read_u8(&retval);	
   \   00000014   00A8               ADD      R0,SP,#+0
   \   00000016   ........           BL       NRF905SE_Read_u8
    379          	
    380          	NRF905SE_SPI_END();	
   \   0000001A   ....               LDR.N    R0,??DataTable25  ;; 0x40010810
   \   0000001C   1021               MOVS     R1,#+16
   \   0000001E   0160               STR      R1,[R0, #+0]
    381          	
    382          	return retval;
   \   00000020   9DF80000           LDRB     R0,[SP, #+0]
   \   00000024   0EBD               POP      {R1-R3,PC}       ;; return
    383          }
    384          
    385          /*******************************************************************************
    386          * Function Name  : NRF905SE_WriteReg_u8
    387          * Description    :   the function writes  a byte to the register which is decided by op .
    388          *					
    389          *
    390          *				
    391          * Input          : op:- op_w -- to indicate which register to be opterated .
    392          *				  value: u8 ---the byte will be written to the resigester.
    393          * Output         : none.
    394          * Return         : none.
    395          * Note			 : none.
    396          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    397          void NRF905SE_WriteReg_u8(u8 op, u8 value) {	
   \                     NRF905SE_WriteReg_u8:
   \   00000000   03B5               PUSH     {R0,R1,LR}
   \   00000002   81B0               SUB      SP,SP,#+4
    398          	NRF905SE_SetSPIMode();
   \   00000004   ........           BL       NRF905SE_SetSPIMode
    399          	NRF905SE_SPI_START();
   \   00000008   ....               LDR.N    R0,??DataTable31  ;; 0x40010814
   \   0000000A   1021               MOVS     R1,#+16
   \   0000000C   0160               STR      R1,[R0, #+0]
    400          	
    401          	NRF905SE_Write_u8(&op);
   \   0000000E   01A8               ADD      R0,SP,#+4
   \   00000010   ........           BL       NRF905SE_Write_u8
    402          	NRF905SE_Write_u8(&value);
   \   00000014   02A8               ADD      R0,SP,#+8
   \   00000016   ........           BL       NRF905SE_Write_u8
    403          	
    404          	NRF905SE_SPI_END();	
   \   0000001A   ....               LDR.N    R0,??DataTable25  ;; 0x40010810
   \   0000001C   1021               MOVS     R1,#+16
   \   0000001E   0160               STR      R1,[R0, #+0]
    405          }
   \   00000020   07BD               POP      {R0-R2,PC}       ;; return
    406          
    407          
    408          
    409          
    410          /*******************************************************************************
    411          * Function Name  : NRF905SE_ReadWrite_u8
    412          * Description    :  internal fuction,it opterates after spi starts.
    413          *					
    414          *
    415          *				
    416          * Input          : op: -op_r/op_w (read/write op code);
    417          *				  when op is a op_r, value = NOP, otherwise, value is a write value.
    418          * Output         :  none.
    419          * Return         : return the read value when op_r , otherwise unvildate data.
    420          * Note			 : expired.
    421          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    422          u8 NRF905SE_ReadWriteReg_u8(u8 op, u8 value) {
   \                     NRF905SE_ReadWriteReg_u8:
   \   00000000   11B5               PUSH     {R0,R4,LR}
   \   00000002   81B0               SUB      SP,SP,#+4
   \   00000004   0C00               MOVS     R4,R1
    423          	u8 retval;
    424          	
    425          	NRF905SE_SetSPIMode();
   \   00000006   ........           BL       NRF905SE_SetSPIMode
    426          	NRF905SE_SPI_START();
   \   0000000A   ....               LDR.N    R0,??DataTable31  ;; 0x40010814
   \   0000000C   1021               MOVS     R1,#+16
   \   0000000E   0160               STR      R1,[R0, #+0]
    427          	
    428          	NRF905SE_Write_u8(&op);
   \   00000010   01A8               ADD      R0,SP,#+4
   \   00000012   ........           BL       NRF905SE_Write_u8
    429          
    430          	SPI_SendByte(SPI_USING, value);	
   \   00000016   2100               MOVS     R1,R4
   \   00000018   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001A   ....               LDR.N    R0,??DataTable20  ;; 0x40013000
   \   0000001C   ........           BL       SPI_SendByte
    431          	retval=SPI_ReceiveByte(SPI_USING);
   \   00000020   ....               LDR.N    R0,??DataTable20  ;; 0x40013000
   \   00000022   ........           BL       SPI_ReceiveByte
    432          	
    433          	NRF905SE_SPI_END();
   \   00000026   ....               LDR.N    R1,??DataTable25  ;; 0x40010810
   \   00000028   1022               MOVS     R2,#+16
   \   0000002A   0A60               STR      R2,[R1, #+0]
    434          	
    435          	return retval;
   \   0000002C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   16BD               POP      {R1,R2,R4,PC}    ;; return
    436          }
    437          
    438          
    439          /*****************************************************
    440          function name: 			NRF905SE_WriteReg_Byte;
    441          function description:  this fuction is  the same as NRF905SE_WriteReg_u8  as alias ;
    442          
    443          parameters:  op: u8- operation code to indicate the register to operate;
    444          			 value : 	the value will be written to the specifical regiseter.
    445          return:  none;
    446          author: wzb
    447          time:	2011/5/13/pm
    448          
    449          notes: reference to the fuction NRF905SE_WriteReg_u8 , also is its alias;
    450          ****************************************************/
    451          static void NRF905SE_WriteReg_Byte(u8 op,  u8 value) {
                             ^
Warning[Pe177]: function "NRF905SE_WriteReg_Byte" was declared but never
          referenced
    452          	NRF905SE_WriteReg_u8(op, value);
    453          
    454          }
    455          
    456          /************************************************
    457          function name: 			NRF905SE_ReadReg_Byte .
    458          function description:  this fuction is  the same as NRF905SE_ReadReg_u8  as alias .
    459          
    460          parameters:  op: u8- operation code to indicate the register to operate.			
    461          return:  none.
    462          author: wzb
    463          time:	2011/5/13/pm
    464          
    465          notes: reference to the fuction NRF905SE_ReadReg_u8 , also is its alias.
    466          
    467          ***************************************************/
    468          static u8  NRF905SE_ReadReg_Byte(u8 op) {
                            ^
Warning[Pe177]: function "NRF905SE_ReadReg_Byte" was declared but never
          referenced
    469          	return NRF905SE_ReadReg_u8(op);	
    470          }
    471          
    472          
    473          
    474          /*******************************************************************************
    475          * Function Name  : NRF905SE_ReadReg_Bytes
    476          * Description    : this fuction can read the register multibyts once.
    477          *					
    478          *
    479          *				
    480          * Input          : op_r:-(read operation code);				
    481          *				   arraySize: the number of bytes will be read.
    482          * Output         : arrayPtr: the pointer of multibytes will be read.
    483          * Return         : return the poiter of the mutibytes.
    484          * Note			 : none.
    485          *******************************************************************************/
    486          

   \                                 In section .text, align 2, keep-with-next
    487          u8 * NRF905SE_ReadReg_Bytes(u8 op_r, u8* arrayPtr, u8 arraySize) {
   \                     NRF905SE_ReadReg_Bytes:
   \   00000000   71B5               PUSH     {R0,R4-R6,LR}
   \   00000002   81B0               SUB      SP,SP,#+4
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   1500               MOVS     R5,R2
    488          	u8 i;
    489          	NRF905SE_SetSPIMode();
   \   00000008   ........           BL       NRF905SE_SetSPIMode
    490          	NRF905SE_SPI_START();
   \   0000000C   ....               LDR.N    R0,??DataTable31  ;; 0x40010814
   \   0000000E   1021               MOVS     R1,#+16
   \   00000010   0160               STR      R1,[R0, #+0]
    491          	
    492          	NRF905SE_Write_u8(&op_r);
   \   00000012   01A8               ADD      R0,SP,#+4
   \   00000014   ........           BL       NRF905SE_Write_u8
    493          
    494          	for(i=0; i<arraySize; i++) {
   \   00000018   0026               MOVS     R6,#+0
   \   0000001A   04E0               B.N      ??NRF905SE_ReadReg_Bytes_0
    495          		NRF905SE_Read_u8(arrayPtr+i);
   \                     ??NRF905SE_ReadReg_Bytes_1:
   \   0000001C   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001E   3019               ADDS     R0,R6,R4
   \   00000020   ........           BL       NRF905SE_Read_u8
    496          	}
   \   00000024   761C               ADDS     R6,R6,#+1
   \                     ??NRF905SE_ReadReg_Bytes_0:
   \   00000026   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000028   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   AE42               CMP      R6,R5
   \   0000002C   F6D3               BCC.N    ??NRF905SE_ReadReg_Bytes_1
    497          	
    498          	NRF905SE_SPI_END();
   \   0000002E   ....               LDR.N    R0,??DataTable25  ;; 0x40010810
   \   00000030   1021               MOVS     R1,#+16
   \   00000032   0160               STR      R1,[R0, #+0]
    499          	
    500          	return arrayPtr;
   \   00000034   2000               MOVS     R0,R4
   \   00000036   76BD               POP      {R1,R2,R4-R6,PC}  ;; return
    501          }
    502          
    503          /*******************************************************************************
    504          * Function Name  : NRF905SE_WriteReg_Bytes
    505          * Description    : this fuction can Write the register multibyts once.
    506          *					
    507          *
    508          *				
    509          * Input          : op_w:-(Write operation code);	
    510          *				   arrayPtr: the pointer of multibytes will be written.
    511          *				   arraySize: the number of bytes will be witten.
    512          * Output         : none.
    513          * Return         : void.
    514          * Note			 : none.
    515          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    516          void NRF905SE_WriteReg_Bytes(u8 op_w, const u8* arrayPtr, u8 arraySize) {
   \                     NRF905SE_WriteReg_Bytes:
   \   00000000   71B5               PUSH     {R0,R4-R6,LR}
   \   00000002   81B0               SUB      SP,SP,#+4
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   1500               MOVS     R5,R2
    517          	u8 i;
    518          	NRF905SE_SetSPIMode();
   \   00000008   ........           BL       NRF905SE_SetSPIMode
    519          	NRF905SE_SPI_START();
   \   0000000C   ....               LDR.N    R0,??DataTable31  ;; 0x40010814
   \   0000000E   1021               MOVS     R1,#+16
   \   00000010   0160               STR      R1,[R0, #+0]
    520          	
    521          	NRF905SE_Write_u8(&op_w);
   \   00000012   01A8               ADD      R0,SP,#+4
   \   00000014   ........           BL       NRF905SE_Write_u8
    522          
    523          	for(i=0; i<arraySize; i++) {
   \   00000018   0026               MOVS     R6,#+0
   \   0000001A   04E0               B.N      ??NRF905SE_WriteReg_Bytes_0
    524          		NRF905SE_Write_u8(arrayPtr+i);
   \                     ??NRF905SE_WriteReg_Bytes_1:
   \   0000001C   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001E   3019               ADDS     R0,R6,R4
   \   00000020   ........           BL       NRF905SE_Write_u8
    525          	}
   \   00000024   761C               ADDS     R6,R6,#+1
   \                     ??NRF905SE_WriteReg_Bytes_0:
   \   00000026   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000028   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   AE42               CMP      R6,R5
   \   0000002C   F6D3               BCC.N    ??NRF905SE_WriteReg_Bytes_1
    526          
    527          	NRF905SE_SPI_END();	
   \   0000002E   ....               LDR.N    R0,??DataTable25  ;; 0x40010810
   \   00000030   1021               MOVS     R1,#+16
   \   00000032   0160               STR      R1,[R0, #+0]
    528          }
   \   00000034   73BD               POP      {R0,R1,R4-R6,PC}  ;; return
    529          
    530          /*************************end of the basical fuctions ************************/
    531          
    532          
    533          
    534          
    535          
    536          /************************* the extend fuctions of NRF905SE *******************/
    537          
    538          /*******************************************************************************
    539          * Function Name  : NRF905SE_IsCRCModeEnable
    540          * Description    : this fuction can get CRC Mode state: enable /disable.
    541          *					
    542          *
    543          *				
    544          * Input          : none.
    545          *				
    546          *				
    547          * Output         : none.
    548          * Return         : bool:- TRUE/FALSE
    549          * Note			 : none.
    550          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    551          bool NRF905SE_IsCRCModeEnable(void) {
   \                     NRF905SE_IsCRCModeEnable:
   \   00000000   80B5               PUSH     {R7,LR}
    552          	u8 op, mode;
    553          	op = NRF905SE_RCRC;
   \   00000002   1920               MOVS     R0,#+25
    554          	mode = NRF905SE_ReadReg_u8(op);
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   ........           BL       NRF905SE_ReadReg_u8
   \   0000000A   0100               MOVS     R1,R0
    555          	mode &= 0x40;	
   \   0000000C   11F04001           ANDS     R1,R1,#0x40
    556          	return  mode ? TRUE : FALSE ;
   \   00000010   0800               MOVS     R0,R1
   \   00000012   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   401E               SUBS     R0,R0,#+1
   \   00000016   8041               SBCS     R0,R0,R0
   \   00000018   C043               MVNS     R0,R0
   \   0000001A   C00F               LSRS     R0,R0,#+31
   \   0000001C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   02BD               POP      {R1,PC}          ;; return
    557          }
    558          
    559          /*******************************************************************************
    560          * Function Name  : NRF905SE_GetCRCMode
    561          * Description    : this fuction can get the mode of CRC : CRCMode_8bit/CRCMode_16bits.
    562          *					
    563          *
    564          *				
    565          * Input          : none.
    566          *				
    567          *				
    568          * Output         : none.
    569          * Return         : the mode of CRC: CRCMode_8bit/CRCMode_16bits.
    570          * Note			 : none.
    571          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    572          u8 NRF905SE_GetCRCMode(void) {
   \                     NRF905SE_GetCRCMode:
   \   00000000   80B5               PUSH     {R7,LR}
    573          	u8 op, mode;
    574          	op = NRF905SE_RCRC;
   \   00000002   1920               MOVS     R0,#+25
    575          	mode = NRF905SE_ReadReg_u8(op);
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   ........           BL       NRF905SE_ReadReg_u8
    576          	mode &= 0x80;
   \   0000000A   10F08000           ANDS     R0,R0,#0x80
    577          	
    578          	return  mode  >> 7;
   \   0000000E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   C009               LSRS     R0,R0,#+7
   \   00000012   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   02BD               POP      {R1,PC}          ;; return
    579          }
    580          
    581          
    582          /*******************************************************************************
    583          * Function Name  : NRF905SE_SetCRCMode
    584          * Description    : this fuction can Set the mode of  CRC.
    585          *					
    586          *
    587          *				
    588          * Input          : CRC_mode : CRCMode --CRCMode_8bits /CRCMode_16bits.
    589          *				
    590          *				
    591          * Output         : none.
    592          * Return         : none.
    593          * Note			 : none.
    594          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    595          void NRF905SE_SetCRCMode(CRCMode CRC_mode) {
   \                     NRF905SE_SetCRCMode:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    596          	u8 op, mode;
    597          	op = NRF905SE_RCRC;
   \   00000004   1920               MOVS     R0,#+25
    598          	
    599          	mode =NRF905SE_ReadReg_u8(op);			
   \   00000006   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   ........           BL       NRF905SE_ReadReg_u8
   \   0000000C   0100               MOVS     R1,R0
    600          	mode &= 0x7F;
   \   0000000E   11F07F01           ANDS     R1,R1,#0x7F
    601          	mode |=  CRC_mode ? 0x80 : 0x00;
   \   00000012   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   002C               CMP      R4,#+0
   \   00000016   01D0               BEQ.N    ??NRF905SE_SetCRCMode_0
   \   00000018   8020               MOVS     R0,#+128
   \   0000001A   00E0               B.N      ??NRF905SE_SetCRCMode_1
   \                     ??NRF905SE_SetCRCMode_0:
   \   0000001C   0020               MOVS     R0,#+0
   \                     ??NRF905SE_SetCRCMode_1:
   \   0000001E   0143               ORRS     R1,R0,R1
    602          	
    603          	op = NRF905SE_WCRC;
   \   00000020   0920               MOVS     R0,#+9
    604          	NRF905SE_WriteReg_u8(op, mode);	
   \   00000022   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   ........           BL       NRF905SE_WriteReg_u8
    605          	
    606          }
   \   0000002A   10BD               POP      {R4,PC}          ;; return
    607          
    608          
    609          
    610          /*******************************************************************************
    611          * Function Name  : NRF905SE_IsAutoRetranEnable
    612          * Description    : this fuction can get the mode of  auto_retransmit.
    613          *					
    614          *
    615          *				
    616          * Input          : none.
    617          *				
    618          *				
    619          * Output         : none.
    620          * Return         : bool:- TRUE/FALSE
    621          * Note			 : none.
    622          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    623          bool NRF905SE_IsAutoRetranEnable(void) {
   \                     NRF905SE_IsAutoRetranEnable:
   \   00000000   80B5               PUSH     {R7,LR}
    624          	u8 op, mode;
    625          	op = NRF905SE_RAR;
   \   00000002   1120               MOVS     R0,#+17
    626          	mode = NRF905SE_ReadReg_u8(op);
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   ........           BL       NRF905SE_ReadReg_u8
   \   0000000A   0100               MOVS     R1,R0
    627          	mode &= 0x20;	
   \   0000000C   11F02001           ANDS     R1,R1,#0x20
    628          	return  mode ? TRUE : FALSE ;
   \   00000010   0800               MOVS     R0,R1
   \   00000012   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   401E               SUBS     R0,R0,#+1
   \   00000016   8041               SBCS     R0,R0,R0
   \   00000018   C043               MVNS     R0,R0
   \   0000001A   C00F               LSRS     R0,R0,#+31
   \   0000001C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   02BD               POP      {R1,PC}          ;; return
    629          }
    630          
    631          /*******************************************************************************
    632          * Function Name  : NRF905SE_GetAutoRetranMode
    633          * Description    : this fuction can get the mode of  auto_retransmit.
    634          *					
    635          *
    636          *				
    637          * Input          : none.
    638          *				
    639          *				
    640          * Output         : none.
    641          * Return         : the mode of auto_retransmit.
    642          * Note			 : none.
    643          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    644          bool NRF905SE_GetAutoRetranMode(void) {
   \                     NRF905SE_GetAutoRetranMode:
   \   00000000   80B5               PUSH     {R7,LR}
    645          	u8 op, mode;
    646          	op = NRF905SE_RAR;
   \   00000002   1120               MOVS     R0,#+17
    647          	mode = NRF905SE_ReadReg_u8(op);
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   ........           BL       NRF905SE_ReadReg_u8
   \   0000000A   0100               MOVS     R1,R0
    648          	mode &= 0x20;
   \   0000000C   11F02001           ANDS     R1,R1,#0x20
    649          	
    650          	return  mode ? TRUE : FALSE ;
   \   00000010   0800               MOVS     R0,R1
   \   00000012   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   401E               SUBS     R0,R0,#+1
   \   00000016   8041               SBCS     R0,R0,R0
   \   00000018   C043               MVNS     R0,R0
   \   0000001A   C00F               LSRS     R0,R0,#+31
   \   0000001C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   02BD               POP      {R1,PC}          ;; return
    651          }
    652          
    653          
    654          /*******************************************************************************
    655          * Function Name  : NRF905SE_SetAutoRetran_Mode
    656          * Description    : this fuction can Set the mode of  auto_retransmit.
    657          *					
    658          *
    659          *				
    660          * Input          : auto_retran_en : bool --TRUE/FALSE.
    661          *				
    662          *				
    663          * Output         : none.
    664          * Return         : none.
    665          * Note			 : none.
    666          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    667          void NRF905SE_SetAutoRetranMode(bool auto_retran_en) {
   \                     NRF905SE_SetAutoRetranMode:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
    668          	u8 op, mode;
    669          	op = NRF905SE_WAR;
   \   00000004   0125               MOVS     R5,#+1
    670          	
    671          	mode =NRF905SE_ReadReg_u8(NRF905SE_RAR);			
   \   00000006   1120               MOVS     R0,#+17
   \   00000008   ........           BL       NRF905SE_ReadReg_u8
    672          	mode &= 0xDF;
   \   0000000C   10F0DF00           ANDS     R0,R0,#0xDF
    673          	mode |=  auto_retran_en ? 0x20 : 0x00;
   \   00000010   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   002C               CMP      R4,#+0
   \   00000014   01D0               BEQ.N    ??NRF905SE_SetAutoRetranMode_0
   \   00000016   2021               MOVS     R1,#+32
   \   00000018   00E0               B.N      ??NRF905SE_SetAutoRetranMode_1
   \                     ??NRF905SE_SetAutoRetranMode_0:
   \   0000001A   0021               MOVS     R1,#+0
   \                     ??NRF905SE_SetAutoRetranMode_1:
   \   0000001C   0843               ORRS     R0,R1,R0
    674          	NRF905SE_WriteReg_u8(op, mode);	
   \   0000001E   0100               MOVS     R1,R0
   \   00000020   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   2800               MOVS     R0,R5
   \   00000024   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   ........           BL       NRF905SE_WriteReg_u8
    675          	
    676          	
    677          }
   \   0000002A   31BD               POP      {R0,R4,R5,PC}    ;; return
    678          
    679          /*******************************************************************************
    680          * Function Name  : NRF905SE_GetRxAddressSize
    681          * Description    : this fuction can get the size of RxAddress in configer register.
    682          *					
    683          *
    684          *				
    685          * Input          : none.
    686          *				
    687          *				
    688          * Output         : none.
    689          * Return         : the size of RxAddress.
    690          * Note			 : none.
    691          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    692          u8 NRF905SE_GetRxAddressSize(void) {
   \                     NRF905SE_GetRxAddressSize:
   \   00000000   80B5               PUSH     {R7,LR}
    693          	u8 op, size;
    694          	op = NRF905SE_RTRX_AFW;
   \   00000002   1220               MOVS     R0,#+18
    695          	size = NRF905SE_ReadReg_u8(op);
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   ........           BL       NRF905SE_ReadReg_u8
    696          	size &= 0x07;
   \   0000000A   10F00700           ANDS     R0,R0,#0x7
    697          	return size;	
   \   0000000E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   02BD               POP      {R1,PC}          ;; return
    698          }
    699          
    700          /*******************************************************************************
    701          * Function Name  : NRF905SE_SetRxAddressSize
    702          * Description    : this fuction can set the size of RxAddress in configer register.
    703          *					
    704          *
    705          *				
    706          * Input          : size : u8 --- available values: 1-4 .
    707          *				
    708          *				
    709          * Output         : none.
    710          * Return         : the size of RxAddress.
    711          * Note			 : none.
    712          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    713          void NRF905SE_SetRxAddressSize(u8 size) {	
   \                     NRF905SE_SetRxAddressSize:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    714          	u8 op, i;
    715          	op = NRF905SE_RTRX_AFW;
   \   00000004   1220               MOVS     R0,#+18
    716          	//i = NRF905SE_GetRxAddressSize();
    717          	i = NRF905SE_ReadReg_u8(op);
   \   00000006   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   ........           BL       NRF905SE_ReadReg_u8
    718          	i &= 0xF8;
   \   0000000C   10F0F800           ANDS     R0,R0,#0xF8
    719          	size &= 0x07;	
   \   00000010   14F00704           ANDS     R4,R4,#0x7
    720          	size |= i;
   \   00000014   0443               ORRS     R4,R0,R4
    721          	op = NRF905SE_WTRX_AFW;
   \   00000016   0220               MOVS     R0,#+2
    722          	NRF905SE_WriteReg_u8(op, size);	
   \   00000018   2100               MOVS     R1,R4
   \   0000001A   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   ........           BL       NRF905SE_WriteReg_u8
    723          }
   \   00000022   10BD               POP      {R4,PC}          ;; return
    724          
    725          
    726          /*******************************************************************************
    727          * Function Name  : NRF905SE_GetTxAddressSize
    728          * Description    : this fuction can get the size of RxAddress in configer register.
    729          *					
    730          *
    731          *				
    732          * Input          : none.
    733          *				
    734          *				
    735          * Output         : none.
    736          * Return         : the size of TxAddress.
    737          * Note			 : none.
    738          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    739          u8 NRF905SE_GetTxAddressSize(void) {
   \                     NRF905SE_GetTxAddressSize:
   \   00000000   80B5               PUSH     {R7,LR}
    740          	u8 op, size;
    741          	op = NRF905SE_RTRX_AFW;
   \   00000002   1220               MOVS     R0,#+18
    742          	size = NRF905SE_ReadReg_u8(op);
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   ........           BL       NRF905SE_ReadReg_u8
    743          	size &= 0x70;
   \   0000000A   10F07000           ANDS     R0,R0,#0x70
    744          	
    745          	return size >> 4;	
   \   0000000E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0009               LSRS     R0,R0,#+4
   \   00000012   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   02BD               POP      {R1,PC}          ;; return
    746          }
    747          
    748          
    749          /*******************************************************************************
    750          * Function Name  : NRF905SE_SetTxAddressSize
    751          * Description    : this fuction can set the size of TxAddress in configer register.
    752          *					
    753          *
    754          *				
    755          * Input          : size: u8--- the size of Tx-Address register to be set, available values: 0-4 .
    756          *				
    757          *				
    758          * Output         : none.
    759          * Return         : the size of TxAddress.
    760          * Note			 : none.
    761          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    762          void NRF905SE_SetTxAddressSize(u8 size) {
   \                     NRF905SE_SetTxAddressSize:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    763          	u8 op, i;
    764          	op = NRF905SE_RTRX_AFW;
   \   00000004   1220               MOVS     R0,#+18
    765          	//i = NRF905SE_GetTxAddressSize();
    766          	i = NRF905SE_ReadReg_u8(op);
   \   00000006   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   ........           BL       NRF905SE_ReadReg_u8
    767          	i &= 0x8F;
   \   0000000C   10F08F00           ANDS     R0,R0,#0x8F
    768          	size &= 0x07;
   \   00000010   14F00704           ANDS     R4,R4,#0x7
    769          	size = size << 4;
   \   00000014   2401               LSLS     R4,R4,#+4
    770          	size |= i;	
   \   00000016   0443               ORRS     R4,R0,R4
    771          	op = NRF905SE_WTRX_AFW;
   \   00000018   0220               MOVS     R0,#+2
    772          	NRF905SE_WriteReg_u8(op, size);	
   \   0000001A   2100               MOVS     R1,R4
   \   0000001C   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   ........           BL       NRF905SE_WriteReg_u8
    773          }
   \   00000024   10BD               POP      {R4,PC}          ;; return
    774          
    775          
    776          
    777          
    778          
    779          
    780          /*******************************************************************************
    781          * Function Name  : NRF905SE_GetRxPayloadSize
    782          * Description    : this fuction can get the size of payload in Rx-Paylaod register.
    783          *					
    784          *
    785          *				
    786          * Input          : none.
    787          *				
    788          *				
    789          * Output         : none.
    790          * Return         : the size of payload in Rx-Payload.
    791          * Note			 : none.
    792          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    793          u8 NRF905SE_GetRxPayloadSize(void) {
   \                     NRF905SE_GetRxPayloadSize:
   \   00000000   80B5               PUSH     {R7,LR}
    794          	u8 op, size;
    795          	op = NRF905SE_RRX_PW ;
   \   00000002   1320               MOVS     R0,#+19
    796          	size = NRF905SE_ReadReg_u8(op);
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   ........           BL       NRF905SE_ReadReg_u8
    797          	size &= 0x3f;	
   \   0000000A   10F03F00           ANDS     R0,R0,#0x3F
    798          	return size;	
   \   0000000E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   02BD               POP      {R1,PC}          ;; return
    799          }
    800          
    801          /*******************************************************************************
    802          * Function Name  : NRF905SE_SetRxPayloadSize
    803          * Description    : this fuction can set the size of payload in Rx-Paylaod register.
    804          *					
    805          *
    806          *				
    807          * Input          : size: u8 --- the size of Rx-Payload register to be set; available values: 0-32.
    808          *				
    809          *				
    810          * Output         : none
    811          * Return         : the size of payload in Rx-Payload register.
    812          * Note			 : none.
    813          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    814          void NRF905SE_SetRxPayloadSize(u8 size) {
   \                     NRF905SE_SetRxPayloadSize:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    815          	u8 i, op;
    816          	op = NRF905SE_RRX_PW ;
   \   00000004   1320               MOVS     R0,#+19
    817          	i = NRF905SE_ReadReg_u8(op);
   \   00000006   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   ........           BL       NRF905SE_ReadReg_u8
    818          	i &= 0xc0;
   \   0000000C   10F0C000           ANDS     R0,R0,#0xC0
    819          	size &= 0x3f;
   \   00000010   14F03F04           ANDS     R4,R4,#0x3F
    820          	size |= i;
   \   00000014   0443               ORRS     R4,R0,R4
    821          	op = NRF905SE_WRX_PW ;
   \   00000016   0320               MOVS     R0,#+3
    822          	NRF905SE_ReadWriteReg_u8(op, size);	
   \   00000018   2100               MOVS     R1,R4
   \   0000001A   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   ........           BL       NRF905SE_ReadWriteReg_u8
    823          }
   \   00000022   10BD               POP      {R4,PC}          ;; return
    824          
    825          
    826          /*******************************************************************************
    827          * Function Name  : NRF905SE_GetTxPayloadSize
    828          * Description    : this fuction can get the size of payload in TxPaylaod register.
    829          *					
    830          *
    831          *				
    832          * Input          :none.
    833          *				
    834          *				
    835          * Output         : none.
    836          * Return         : the size of payload.
    837          * Note			 : none.
    838          *******************************************************************************/
    839          

   \                                 In section .text, align 2, keep-with-next
    840          u8 NRF905SE_GetTxPayloadSize(void) {
   \                     NRF905SE_GetTxPayloadSize:
   \   00000000   80B5               PUSH     {R7,LR}
    841          	u8 op, size;
    842          	op = NRF905SE_RTX_PW ;
   \   00000002   1420               MOVS     R0,#+20
    843          	size = NRF905SE_ReadReg_u8(op);
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   ........           BL       NRF905SE_ReadReg_u8
    844          	size &= 0x3f;	
   \   0000000A   10F03F00           ANDS     R0,R0,#0x3F
    845          	return size;	
   \   0000000E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   02BD               POP      {R1,PC}          ;; return
    846          }
    847          
    848          /*******************************************************************************
    849          * Function Name  : NRF905SE_SetTxPayloadSize
    850          * Description    : this fuction can set the size of payload in Tx-Paylaod register.
    851          *					
    852          *
    853          *				
    854          * Input          : size: u8 --- the size of Tx-Payload register to be set; available values: 0-32.
    855          *				
    856          *				
    857          * Output         : none.
    858          * Return         : the size of payload in Tx-Payload register.
    859          * Note			 : none.
    860          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    861          void NRF905SE_SetTxPayloadSize(u8 size) {
   \                     NRF905SE_SetTxPayloadSize:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    862          	u8 i, op;
    863          	op = NRF905SE_RTX_PW ;
   \   00000004   1420               MOVS     R0,#+20
    864          	i = NRF905SE_ReadReg_u8(op);
   \   00000006   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   ........           BL       NRF905SE_ReadReg_u8
    865          	i &= 0xc0;
   \   0000000C   10F0C000           ANDS     R0,R0,#0xC0
    866          	size &= 0x3f;
   \   00000010   14F03F04           ANDS     R4,R4,#0x3F
    867          	size |= i;
   \   00000014   0443               ORRS     R4,R0,R4
    868          	op = NRF905SE_WTX_PW ;
   \   00000016   0420               MOVS     R0,#+4
    869          	NRF905SE_ReadWriteReg_u8(op, size);
   \   00000018   2100               MOVS     R1,R4
   \   0000001A   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   ........           BL       NRF905SE_ReadWriteReg_u8
    870          }
   \   00000022   10BD               POP      {R4,PC}          ;; return
    871          
    872          
    873          /*****************************************************
    874          function name: 			NRF905SE_Get_TxRxPayload 	;
    875          function description: get Payload  in Tx-Payload/Rx-Payload register  of NRF905SE;
    876          
    877          parameters:	 @1-- op_r: u8 --) indicate which register (tx-payload or rx-payload ) to be operated.
    878          			 @2-- payload_array : u8 * : the array which will contain the payload .
    879          		     @3-- payload_length :  u8 --- will be  indicated by tx-payload or rx-payload  size;
    880          return:  u8 *;
    881          author: wzb
    882          time:	2011/5/13/pm
    883          
    884          notes:  none;
    885          ***********************************************/

   \                                 In section .text, align 2, keep-with-next
    886          static u8 * NRF905SE_GetTxRxPayload(u8 op_r, u8 * payload_array, u8 payload_array_length)
    887          {
   \                     NRF905SE_GetTxRxPayload:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0C00               MOVS     R4,R1
    888              NRF905SE_ReadReg_Bytes(op_r, payload_array, payload_array_length);	
   \   00000004   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   2100               MOVS     R1,R4
   \   00000008   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   ........           BL       NRF905SE_ReadReg_Bytes
    889          	return payload_array;	
   \   0000000E   2000               MOVS     R0,R4
   \   00000010   10BD               POP      {R4,PC}          ;; return
    890          }
    891          
    892          /*****************************************************
    893          function name: 			NRF905SE_SetTxRxPayload 	;
    894          function description: Set Payload  in Tx-Payload/Rx-Payload register  of NRF905SE;
    895          
    896          parameters:	 @1-- op_W: u8 --) indicate which register (Tx-payload or Rx-payload ) to be operated.
    897          			 @2-- payload_array : u8 * : the array which will contain the payload .
    898          		     @3-- payload_length :  u8 --- will be  indicated by tx-payload or rx-payload  size;
    899          return:  none;
    900          author: wzb
    901          time:	2011/5/13/pm
    902          
    903          notes:  none;
    904          ***********************************************/

   \                                 In section .text, align 2, keep-with-next
    905          static void NRF905SE_SetTxRxPayload(u8 op_w, const u8 * payload_array, u8 payload_array_length)
    906          {
   \                     NRF905SE_SetTxRxPayload:
   \   00000000   80B5               PUSH     {R7,LR}
    907              NRF905SE_WriteReg_Bytes(op_w, payload_array, payload_array_length);		
   \   00000002   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   ........           BL       NRF905SE_WriteReg_Bytes
    908          }
   \   0000000A   01BD               POP      {R0,PC}          ;; return
    909          
    910          
    911          
    912          /*****************************************************
    913          function name: 			NRF905SE_GetTxPayload 	;
    914          function description: get Payload  in Tx-Payload register  of NRF905SE;
    915          
    916          parameters:
    917          			 @1-- payload_array : u8 * : the array which will contain the payload .
    918          		     @2-- payload_length :  u8 --- will be  indicated by tx-payload size;
    919          return:  u8 *;
    920          author: wzb
    921          time:	2011/5/13/pm
    922          
    923          notes:  none;
    924          ***********************************************/

   \                                 In section .text, align 2, keep-with-next
    925          u8 * NRF905SE_GetTxPayload(u8 * payload_array, u8 payload_array_length)
    926          {
   \                     NRF905SE_GetTxPayload:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    927              NRF905SE_GetTxRxPayload(NRF905SE_RTP, payload_array, payload_array_length);
   \   00000004   0A00               MOVS     R2,R1
   \   00000006   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000008   2100               MOVS     R1,R4
   \   0000000A   2120               MOVS     R0,#+33
   \   0000000C   ........           BL       NRF905SE_GetTxRxPayload
    928          	
    929          	return payload_array;	
   \   00000010   2000               MOVS     R0,R4
   \   00000012   10BD               POP      {R4,PC}          ;; return
    930          }
    931          
    932          /*****************************************************
    933          function name: 			NRF905SE_SetTxPayload 	;
    934          function description: set payload  in Tx-Payload register  of NRF905SE;
    935          
    936          parameters:
    937          			 @1-- addr_array : u8 * : the array which contains the payload.
    938          		     @2-- payload_length :  u8 --- will be  indicated by Tx-payload size.
    939          return:  u8 *;
    940          author: wzb
    941          time:	2011/5/13/pm
    942          
    943          notes: none.
    944          ***********************************************/

   \                                 In section .text, align 2, keep-with-next
    945          void NRF905SE_SetTxPayload(const u8 * addr_array, u8 addr_array_length)
    946          {
   \                     NRF905SE_SetTxPayload:
   \   00000000   80B5               PUSH     {R7,LR}
    947              NRF905SE_SetTxRxPayload(NRF905SE_WTP, addr_array, addr_array_length);	
   \   00000002   0A00               MOVS     R2,R1
   \   00000004   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   0100               MOVS     R1,R0
   \   00000008   2020               MOVS     R0,#+32
   \   0000000A   ........           BL       NRF905SE_SetTxRxPayload
    948          }
   \   0000000E   01BD               POP      {R0,PC}          ;; return
    949          
    950          
    951          /*****************************************************
    952          function name: 			NRF905SE_GetRxPayload 	;
    953          function description: get Payload  in Rx-Payload register  of NRF905SE;
    954          
    955          parameters:
    956          			 @1-- payload_array : u8 * : the array which will contain the payload .
    957          		     @2-- payload_length :  u8 --- will be  indicated by tx-payload size;
    958          return:  u8 *;
    959          author: wzb
    960          time:	2011/5/13/pm
    961          
    962          notes:  none;
    963          ***********************************************/

   \                                 In section .text, align 2, keep-with-next
    964          u8 * NRF905SE_GetRxPayload(u8 * payload_array, u8 payload_array_length)
    965          {
   \                     NRF905SE_GetRxPayload:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    966              NRF905SE_GetTxRxPayload(NRF905SE_RRP, payload_array, payload_array_length);
   \   00000004   0A00               MOVS     R2,R1
   \   00000006   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000008   2100               MOVS     R1,R4
   \   0000000A   2420               MOVS     R0,#+36
   \   0000000C   ........           BL       NRF905SE_GetTxRxPayload
    967          	
    968          	return payload_array;	
   \   00000010   2000               MOVS     R0,R4
   \   00000012   10BD               POP      {R4,PC}          ;; return
    969          }
    970          
    971          /*****************************************************
    972          function name: 			NRF905SE_Set_RxPayload 	;
    973          function description: set payload  in Rx-Payload register  of NRF905SE;
    974          
    975          parameters:
    976          			 @1-- addr_array : u8 * : the array which contains the payload.
    977          		     @2-- payload_length :  u8 --- will be  indicated by Rx-payload size.
    978          return:  none;
    979          author: wzb
    980          time:	2011/5/13/pm
    981          
    982          notes:  if the Rx-Payload register is read-only, this function will be dropped! But now the instruction NRF905SE_WRP NOT DEFINED!
    983          ***********************************************/

   \                                 In section .text, align 2, keep-with-next
    984          void NRF905SE_SetRxPayload(const u8 * addr_array, u8 addr_array_length)
    985          {
    986              //NRF905SE_Set_TxRxPayload(NRF905SE_WRP=0x25, addr_array, addr_array_length);	
    987          }
   \                     NRF905SE_SetRxPayload:
   \   00000000   7047               BX       LR               ;; return
    988          
    989          
    990          /************* the generous address register operation functions **************/
    991          
    992          /*****************************************************
    993          function name: 			NRF905SE_GetTxRxAddress 	;
    994          function description: get Address  in tx-address/rx-address register  of NRF905SE;
    995          
    996          parameters:  @1-- op_r : u8 * --- the operation code of tx-address or rx-address register.
    997          			 @2-- addr_array : u8 * : the array which contains the address.
    998          		     @3-- addr_array_length :  u8;
    999          return:  u8 *;
   1000          author: wzb
   1001          time:	2011/5/13/pm
   1002          
   1003          notes:  none;
   1004          ***********************************************/

   \                                 In section .text, align 2, keep-with-next
   1005          u8 * NRF905SE_GetTxRxAddress(u8 op_r, u8* addr_array, u8 addr_array_length)
   1006          {
   \                     NRF905SE_GetTxRxAddress:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0C00               MOVS     R4,R1
   1007              NRF905SE_ReadReg_Bytes(op_r, addr_array, addr_array_length);	
   \   00000004   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   2100               MOVS     R1,R4
   \   00000008   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   ........           BL       NRF905SE_ReadReg_Bytes
   1008          	
   1009          	return addr_array;
   \   0000000E   2000               MOVS     R0,R4
   \   00000010   10BD               POP      {R4,PC}          ;; return
   1010          }
   1011          
   1012          
   1013          /*****************************************************
   1014          function name: 			NRF905SE_SetTxRxAddress 	;
   1015          function description: set Address  in tx-address/rx-addess register  of NRF905SE;
   1016          
   1017          parameters:  @1-- op_w : u8 * --- the operation code of tx-address or rx-address register.
   1018          			 @2-- addr_array : u8 * : the array which contains the address.
   1019          		     @3-- addr_array_length :  u8;
   1020          return:  u8 *;
   1021          author: wzb
   1022          time:	2011/5/13/pm
   1023          
   1024          notes:  none;
   1025          ***********************************************/

   \                                 In section .text, align 2, keep-with-next
   1026          void NRF905SE_SetTxRxAddress(u8 op_w, const u8 * addr_array, u8 addr_array_length)
   1027          {
   \                     NRF905SE_SetTxRxAddress:
   \   00000000   80B5               PUSH     {R7,LR}
   1028              NRF905SE_WriteReg_Bytes(op_w, addr_array, addr_array_length);	
   \   00000002   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   ........           BL       NRF905SE_WriteReg_Bytes
   1029          }
   \   0000000A   01BD               POP      {R0,PC}          ;; return
   1030          
   1031          
   1032          
   1033          /*****************************************************
   1034          function name: 			NRF905SE_SetTxAddress 	;
   1035          function description: set Address  in tx-address register  of NRF905SE;
   1036          
   1037          parameters:
   1038          			 @1-- addr_array : u8 * : the array which contains the address.
   1039          		     @2-- addr_array_length :  u8;
   1040          return:  u8 *;
   1041          author: wzb
   1042          time:	2011/5/13/pm
   1043          
   1044          notes:  none;
   1045          ***********************************************/

   \                                 In section .text, align 2, keep-with-next
   1046          void NRF905SE_SetTxAddress( const u8 * addr_array, u8 addr_array_length)
   1047          {
   \                     NRF905SE_SetTxAddress:
   \   00000000   80B5               PUSH     {R7,LR}
   1048              NRF905SE_SetTxRxAddress(NRF905SE_WTA, addr_array, addr_array_length);	
   \   00000002   0A00               MOVS     R2,R1
   \   00000004   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   0100               MOVS     R1,R0
   \   00000008   2220               MOVS     R0,#+34
   \   0000000A   ........           BL       NRF905SE_SetTxRxAddress
   1049          }
   \   0000000E   01BD               POP      {R0,PC}          ;; return
   1050          
   1051          
   1052          /*****************************************************
   1053          function name: 			NRF905SE_GetTxAddress 	;
   1054          function description: get Address  in tx-address register  of NRF905SE;
   1055          
   1056          parameters:
   1057          			 @1-- addr_array : u8 * : the array which contains the address.
   1058          		     @2-- addr_array_length :  u8;
   1059          return:  u8 *;
   1060          author: wzb
   1061          time:	2011/5/13/pm
   1062          
   1063          notes:  none;
   1064          ***********************************************/

   \                                 In section .text, align 2, keep-with-next
   1065          u8 * NRF905SE_GetTxAddress(u8 * addr_array, u8 addr_array_length)
   1066          {
   \                     NRF905SE_GetTxAddress:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
   1067              NRF905SE_GetTxRxAddress(NRF905SE_RTA, addr_array, addr_array_length);
   \   00000004   0A00               MOVS     R2,R1
   \   00000006   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000008   2100               MOVS     R1,R4
   \   0000000A   2320               MOVS     R0,#+35
   \   0000000C   ........           BL       NRF905SE_GetTxRxAddress
   1068          	
   1069          	return addr_array;	
   \   00000010   2000               MOVS     R0,R4
   \   00000012   10BD               POP      {R4,PC}          ;; return
   1070          }
   1071          
   1072          /*****************************************************
   1073          function name: 			NRF905SE_SetRxAddress 	;
   1074          function description: set Address  in Rx-address register  of NRF905SE;
   1075          
   1076          parameters:
   1077          			 @1-- addr_array : u8 * : the array which contains the address.
   1078          		     @2-- addr_array_length :  u8;
   1079          return:  u8 *;
   1080          author: wzb
   1081          time:	2011/5/13/pm
   1082          
   1083          notes:  none;
   1084          ***********************************************/

   \                                 In section .text, align 2, keep-with-next
   1085          void NRF905SE_SetRxAddress(const u8 * addr_array, u8 addr_array_length)
   1086          {
   \                     NRF905SE_SetRxAddress:
   \   00000000   80B5               PUSH     {R7,LR}
   1087              NRF905SE_SetTxRxAddress(NRF905SE_WRA, addr_array, addr_array_length);	
   \   00000002   0A00               MOVS     R2,R1
   \   00000004   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   0100               MOVS     R1,R0
   \   00000008   0520               MOVS     R0,#+5
   \   0000000A   ........           BL       NRF905SE_SetTxRxAddress
   1088          }
   \   0000000E   01BD               POP      {R0,PC}          ;; return
   1089          
   1090          
   1091          /*****************************************************
   1092          function name: 			NRF905SE_GetRxAddress 	;
   1093          function description: get Address  in Rx-address register  of NRF905SE;
   1094          
   1095          parameters:
   1096          			 @1-- addr_array : u8 * : the array which contains the address.
   1097          		     @2-- addr_array_length :  u8;
   1098          return:  u8 *;
   1099          author: wzb
   1100          time:	2011/5/13/pm
   1101          
   1102          notes:  none;
   1103          ***********************************************/

   \                                 In section .text, align 2, keep-with-next
   1104          u8 * NRF905SE_GetRxAddress(u8 * addr_array, u8 addr_array_length)
   1105          {
   \                     NRF905SE_GetRxAddress:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
   1106              NRF905SE_GetTxRxAddress(NRF905SE_RRA, addr_array, addr_array_length);
   \   00000004   0A00               MOVS     R2,R1
   \   00000006   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000008   2100               MOVS     R1,R4
   \   0000000A   1520               MOVS     R0,#+21
   \   0000000C   ........           BL       NRF905SE_GetTxRxAddress
   1107          	
   1108          	return addr_array;	
   \   00000010   2000               MOVS     R0,R4
   \   00000012   10BD               POP      {R4,PC}          ;; return
   1109          }
   1110          
   1111          
   1112          /*******************************************************************************
   1113          * Function Name  :  NRF905SE_SendData
   1114          * Description    : this functions descripts the process of NRF905SE send data.
   1115          *				
   1116          *
   1117          * Input          : None.
   1118          * Output         : None.
   1119          * Return         : None.
   1120          * Note			 : This function will block until data send process  finished,
   1121          *						implemented by the while recycle with the flag variable.
   1122          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1123          void NRF905SE_SendData(void) {
   \                     NRF905SE_SendData:
   \   00000000   80B5               PUSH     {R7,LR}
   1124          	// set the tx mode
   1125          	NRF905SE_SetTxMode();
   \   00000002   ........           BL       NRF905SE_SetTxMode
   1126          	
   1127          	// wait for send finished
   1128          	while(!( NRF905SE_Is_Data_TxFinished())) ;
   \                     ??NRF905SE_SendData_0:
   \   00000006   ....               LDR.N    R0,??DataTable32  ;; NRF905SE_DR_FLAG
   \   00000008   0078               LDRB     R0,[R0, #+0]
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   FBD0               BEQ.N    ??NRF905SE_SendData_0
   1129          	
   1130          	// reset the flag
   1131          	NRF905SE_Reset_Data_TxFinished_Flag();
   \   0000000E   ....               LDR.N    R0,??DataTable32  ;; NRF905SE_DR_FLAG
   \   00000010   0021               MOVS     R1,#+0
   \   00000012   0170               STRB     R1,[R0, #+0]
   1132          	
   1133          	//set NRF905SE to the standby  mode	
   1134          	NRF905SE_STANDBY();
   \   00000014   ....               LDR.N    R0,??DataTable31  ;; 0x40010814
   \   00000016   0121               MOVS     R1,#+1
   \   00000018   0160               STR      R1,[R0, #+0]
   1135          
   1136          
   1137          }
   \   0000001A   01BD               POP      {R0,PC}          ;; return
   1138          
   1139          /*******************************************************************************
   1140          * Function Name  :  NRF905SE_ReceiveData
   1141          * Description    : this functions descripts the process of NRF905SE receive data.
   1142          *				
   1143          *
   1144          * Input          : None.
   1145          * Output         : None.
   1146          * Return         : None.
   1147          * Note			 : This function will block until data receive process  finished,
   1148          *						implemented by the while recycle with the flag variable.
   1149          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1150          void NRF905SE_ReceiveData(void) {
   \                     NRF905SE_ReceiveData:
   \   00000000   80B5               PUSH     {R7,LR}
   1151          	//set rx mode
   1152          	NRF905SE_SetRxMode();
   \   00000002   ........           BL       NRF905SE_SetRxMode
   1153          	
   1154          	//wait for recieve finished
   1155          	while(! ( NRF905SE_Is_Data_RxFinished() ) );
   \                     ??NRF905SE_ReceiveData_0:
   \   00000006   ....               LDR.N    R0,??DataTable32  ;; NRF905SE_DR_FLAG
   \   00000008   0078               LDRB     R0,[R0, #+0]
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   FBD0               BEQ.N    ??NRF905SE_ReceiveData_0
   1156          	
   1157          	//reset the flag	
   1158          	NRF905SE_Reset_Data_RxFinished_Flag();
   \   0000000E   ....               LDR.N    R0,??DataTable32  ;; NRF905SE_DR_FLAG
   \   00000010   0021               MOVS     R1,#+0
   \   00000012   0170               STRB     R1,[R0, #+0]
   1159          	
   1160          	//set NRF905SE to the standby  mode	
   1161          	NRF905SE_STANDBY();
   \   00000014   ....               LDR.N    R0,??DataTable31  ;; 0x40010814
   \   00000016   0121               MOVS     R1,#+1
   \   00000018   0160               STR      R1,[R0, #+0]
   1162          
   1163          }
   \   0000001A   01BD               POP      {R0,PC}          ;; return
   1164          
   1165          
   1166          
   1167          
   1168          
   1169          /******************************packet send /receive **********/
   1170          
   1171          /*******************************************************************************
   1172          * Function Name  :  NRF905SE_SendTxPacket
   1173          * Description    : this functions descripts the process of NRF905SE send  data, and you can set the payload
   1174          					and destination address through payload_array and tx_address_array;
   1175          *				
   1176          *
   1177          * Input          : payload_size: -- u8 ,.
   1178          				  tx_address_length -- u8;		
   1179          * Output         : payload_array:  set the data in the Tx_payload register;
   1180          				   tx_address_array --  the destination address to send 	
   1181          
   1182          * Return         : None.
   1183          * Note			 : This function will block until data send process  finished,
   1184          *						implemented by the while recycle with the flag variable.
   1185          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1186          bool NRF905SE_SendTxPacket(const u8 * payload_array, u8 payload_size, const u8 * tx_address_array, u8 tx_address_length) {
   \                     NRF905SE_SendTxPacket:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   1400               MOVS     R4,R2
   \   00000004   1D00               MOVS     R5,R3
   1187          	
   1188          	// prepare the data to be sent means set the payload to be sent
   1189          	NRF905SE_SetTxPayload(payload_array, payload_size);
   \   00000006   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   ........           BL       NRF905SE_SetTxPayload
   1190          	
   1191          	// set tx-address
   1192          	NRF905SE_SetTxAddress(tx_address_array, tx_address_length);
   \   0000000C   2900               MOVS     R1,R5
   \   0000000E   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   2000               MOVS     R0,R4
   \   00000012   ........           BL       NRF905SE_SetTxAddress
   1193          	
   1194          	// send data
   1195          	NRF905SE_SendData();
   \   00000016   ........           BL       NRF905SE_SendData
   1196          	
   1197          	return TRUE;
   \   0000001A   0120               MOVS     R0,#+1
   \   0000001C   32BD               POP      {R1,R4,R5,PC}    ;; return
   1198          
   1199          }
   1200          
   1201          /*******************************************************************************
   1202          * Function Name  :  NRF905SE_SendTxPacket
   1203          * Description    : this functions descripts the process of NRF905SE receive data, and you can get the payload
   1204          						through payload_array to the default Tx_address;
   1205          *				
   1206          *
   1207          * Input          : payload_size: -- u8 ,.
   1208          				
   1209          * Output         : payload_array: set the data in the Tx_payload register;
   1210          				
   1211          
   1212          * Return         : None.
   1213          * Note			 : This function will block until data send process  finished,
   1214          *						implemented by the while recycle with the flag variable.
   1215          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1216          bool NRF905SE_SendPacket(const u8 * payload_array, u8 payload_size) {
   \                     NRF905SE_SendPacket:
   \   00000000   80B5               PUSH     {R7,LR}
   1217          	
   1218          	// prepare the data to be sent means set the payload to be sent
   1219          	NRF905SE_SetTxPayload(payload_array, payload_size);
   \   00000002   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   ........           BL       NRF905SE_SetTxPayload
   1220          	
   1221          	// set tx-address default
   1222          	//NRF905SE_SetTxAddress(NRF905SE_TxAddress,NRF905SE_AddressSize);
   1223          	
   1224          	// send data
   1225          	NRF905SE_SendData();
   \   00000008   ........           BL       NRF905SE_SendData
   1226          	
   1227          	return TRUE;
   \   0000000C   0120               MOVS     R0,#+1
   \   0000000E   02BD               POP      {R1,PC}          ;; return
   1228          
   1229          }
   1230          /*******************************************************************************
   1231          * Function Name  :  NRF905SE_ReceivePacket
   1232          * Description    : this functions descripts the process of NRF905SE receive data, and you can get the payload
   1233          						through payload_array;
   1234          *				
   1235          *
   1236          * Input          : payload_size: -- u8 ,.
   1237          * Output         : payload_array: the data in the Rx_payload register;
   1238          * Return         : None.
   1239          * Note			 : This function will block until data receive process  finished,
   1240          *						implemented by the while recycle with the flag variable.
   1241          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1242          u8 *  NRF905SE_ReceivePacket(u8 * payload_array, u8 payload_size) {	
   \                     NRF905SE_ReceivePacket:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0C00               MOVS     R4,R1
   1243          	// start receive data
   1244          	NRF905SE_ReceiveData();	
   \   00000006   ........           BL       NRF905SE_ReceiveData
   1245          	
   1246          	// receive data finished
   1247          	NRF905SE_GetRxPayload(payload_array, payload_size);
   \   0000000A   2100               MOVS     R1,R4
   \   0000000C   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   2800               MOVS     R0,R5
   \   00000010   ........           BL       NRF905SE_GetRxPayload
   1248          
   1249          	return payload_array;	
   \   00000014   2800               MOVS     R0,R5
   \   00000016   32BD               POP      {R1,R4,R5,PC}    ;; return
   1250          
   1251          }
   1252          
   1253          
   1254          /*** interrupt process ****/
   1255          

   \                                 In section .text, align 2, keep-with-next
   1256          void NRF905SE_EXTI_DoIt() {
   \                     NRF905SE_EXTI_DoIt:
   \   00000000   80B5               PUSH     {R7,LR}
   1257          	
   1258          		NRF905SE_DR_FLAG = 1;
   \   00000002   ....               LDR.N    R0,??DataTable32  ;; NRF905SE_DR_FLAG
   \   00000004   0121               MOVS     R1,#+1
   \   00000006   0170               STRB     R1,[R0, #+0]
   1259                  EXTI_ClearITPendingBit(EXTI_Line0);
   \   00000008   0120               MOVS     R0,#+1
   \   0000000A   ........           BL       EXTI_ClearITPendingBit
   1260          
   1261          
   1262          }
   \   0000000E   01BD               POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   10100140           DC32     0x40011010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   00300140           DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   10080140           DC32     0x40010810

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   14080140           DC32     0x40010814

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   ........           DC32     NRF905SE_DR_FLAG
   1263          
   1264          
   1265          
   1266          
   1267          
   1268          
   1269          

   Maximum stack usage in bytes:

     Function                    .cstack
     --------                    -------
     NRF905SE_Configuration           8
     NRF905SE_EXTI_Config            16
     NRF905SE_EXTI_DoIt               8
     NRF905SE_GPIO_Config             8
     NRF905SE_GetAutoRetranMode       8
     NRF905SE_GetCRCMode              8
     NRF905SE_GetRxAddress            8
     NRF905SE_GetRxAddressSize        8
     NRF905SE_GetRxPayload            8
     NRF905SE_GetRxPayloadSize        8
     NRF905SE_GetTxAddress            8
     NRF905SE_GetTxAddressSize        8
     NRF905SE_GetTxPayload            8
     NRF905SE_GetTxPayloadSize        8
     NRF905SE_GetTxRxAddress          8
     NRF905SE_GetTxRxPayload          8
     NRF905SE_InitWriteCR             8
     NRF905SE_IsAutoRetranEnable      8
     NRF905SE_IsCRCModeEnable         8
     NRF905SE_NVIC_Config             8
     NRF905SE_ReadReg_Bytes          24
     NRF905SE_ReadReg_u8             16
     NRF905SE_ReadWriteReg_u8        16
     NRF905SE_Read_u8                 8
     NRF905SE_ReceiveData             8
     NRF905SE_ReceivePacket          16
     NRF905SE_SendData                8
     NRF905SE_SendPacket              8
     NRF905SE_SendTxPacket           16
     NRF905SE_SetAutoRetranMode      16
     NRF905SE_SetCRCMode              8
     NRF905SE_SetRxAddress            8
     NRF905SE_SetRxAddressSize        8
     NRF905SE_SetRxMode               0
     NRF905SE_SetRxPayload            0
     NRF905SE_SetRxPayloadSize        8
     NRF905SE_SetSPIMode              0
     NRF905SE_SetTxAddress            8
     NRF905SE_SetTxAddressSize        8
     NRF905SE_SetTxMode               0
     NRF905SE_SetTxPayload            8
     NRF905SE_SetTxPayloadSize        8
     NRF905SE_SetTxRxAddress          8
     NRF905SE_SetTxRxPayload          8
     NRF905SE_WriteReg_Bytes         24
     NRF905SE_WriteReg_u8            16
     NRF905SE_Write_u8                8
     SPI_ReceiveByte                  8
     SPI_SendByte                     8


   Section sizes:

     Function/Label              Bytes
     --------------              -----
     NRF905SE_RxBuffer             32
     NRF905SE_TxBuffer             32
     NRF905SE_TxAddress             4
     NRF905SE_RxAddress             4
     TxAddress                      4
     RxAddress                      4
     NRF905SE_DR_FLAG               1
     NRF905SE_Config_Buf           12
     NRF905SE_GPIO_Config         204
     NRF905SE_NVIC_Config          52
     NRF905SE_EXTI_Config          42
     NRF905SE_InitWriteCR          20
     NRF905SE_Configuration        60
     NRF905SE_SetSPIMode           16
     NRF905SE_SetTxMode            20
     NRF905SE_SetRxMode            22
     SPI_SendByte                  28
     SPI_ReceiveByte               26
     NRF905SE_Read_u8              24
     NRF905SE_Write_u8             18
     NRF905SE_ReadReg_u8           38
     NRF905SE_WriteReg_u8          34
     NRF905SE_ReadWriteReg_u8      48
     NRF905SE_ReadReg_Bytes        56
     NRF905SE_WriteReg_Bytes       54
     NRF905SE_IsCRCModeEnable      32
     NRF905SE_GetCRCMode           22
     NRF905SE_SetCRCMode           44
     NRF905SE_IsAutoRetranEnable   32
     NRF905SE_GetAutoRetranMode    32
     NRF905SE_SetAutoRetranMode    44
     NRF905SE_GetRxAddressSize     18
     NRF905SE_SetRxAddressSize     36
     NRF905SE_GetTxAddressSize     22
     NRF905SE_SetTxAddressSize     38
     NRF905SE_GetRxPayloadSize     18
     NRF905SE_SetRxPayloadSize     36
     NRF905SE_GetTxPayloadSize     18
     NRF905SE_SetTxPayloadSize     36
     NRF905SE_GetTxRxPayload       18
     NRF905SE_SetTxRxPayload       12
     NRF905SE_GetTxPayload         20
     NRF905SE_SetTxPayload         16
     NRF905SE_GetRxPayload         20
     NRF905SE_SetRxPayload          2
     NRF905SE_GetTxRxAddress       18
     NRF905SE_SetTxRxAddress       12
     NRF905SE_SetTxAddress         16
     NRF905SE_GetTxAddress         20
     NRF905SE_SetRxAddress         16
     NRF905SE_GetRxAddress         20
     NRF905SE_SendData             28
     NRF905SE_ReceiveData          28
     NRF905SE_SendTxPacket         30
     NRF905SE_SendPacket           16
     NRF905SE_ReceivePacket        24
     NRF905SE_EXTI_DoIt            16
     ??DataTable7                   4
     ??DataTable20                  4
     ??DataTable25                  4
     ??DataTable31                  4
     ??DataTable32                  4

 
    41 bytes in section .bss
    52 bytes in section .data
 1 542 bytes in section .text
 
 1 542 bytes of CODE memory
    93 bytes of DATA memory

Errors: none
Warnings: 2
