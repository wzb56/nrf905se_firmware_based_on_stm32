###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.40.0.51500/W32 for ARM     15/Apr/2011  14:16:14 #
# Copyright (C) 1999-2009 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Documents and Settings\Administrator\桌面\newest-4.15 #
#                    \Demo\source\at_mu203.c                                  #
#    Command line =  "C:\Documents and Settings\Administrator\桌面\newest-4.1 #
#                    5\Demo\source\at_mu203.c" -lC "C:\Documents and          #
#                    Settings\Administrator\桌面\newest-4.15\Demo\project\EWA #
#                    RMv5\Debug\List\" -lb "C:\Documents and                  #
#                    Settings\Administrator\桌面\newest-4.15\Demo\project\EWA #
#                    RMv5\Debug\List\" -o "C:\Documents and                   #
#                    Settings\Administrator\桌面\newest-4.15\Demo\project\EWA #
#                    RMv5\Debug\Obj\" --debug --endian=little                 #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4_2\arm\INC\DLib_Config_Full.h" -I "C:\Documents and   #
#                    Settings\Administrator\桌面\newest-4.15\Demo\project\EWA #
#                    RMv5\..\..\include\" -I "C:\Documents and                #
#                    Settings\Administrator\桌面\newest-4.15\Demo\project\EWA #
#                    RMv5\..\..\source\" -I "C:\Documents and                 #
#                    Settings\Administrator\桌面\newest-4.15\Demo\project\EWA #
#                    RMv5\..\..\..\FWLib\library\inc\" -I "C:\Documents and   #
#                    Settings\Administrator\桌面\newest-4.15\Demo\project\EWA #
#                    RMv5\..\..\..\USBLib\library\inc\" -I "C:\Documents and  #
#                    Settings\Administrator\桌面\newest-4.15\Demo\project\EWA #
#                    RMv5\..\..\fatfs\" -I "C:\Program Files\IAR              #
#                    Systems\Embedded Workbench 5.4_2\arm\INC\" -Ohz          #
#    List file    =  C:\Documents and Settings\Administrator\桌面\newest-4.15 #
#                    \Demo\project\EWARMv5\Debug\List\at_mu203.lst            #
#    Object file  =  C:\Documents and Settings\Administrator\桌面\newest-4.15 #
#                    \Demo\project\EWARMv5\Debug\Obj\at_mu203.o               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\桌面\newest-4.15\Demo\source\at_mu203.c
      1          #include "at_mu203.h"
      2          #include "stm32f10x_usart.h"
      3          #include "ringbuf.h"
      4          #include "delay.h"
      5          
      6          #define UART_BUF UART2RingBuf   //环形接收缓冲区，接收从串口返回的数据
      7          #define RESULT_CODE_BUF_LENGTH 1000   
      8          #define send_instrution_len_max 1000    //at^ipsend指令最大长度
      9          
     10          typedef u32 (*uart_RD)(u8 *readbuf,u32 readlen); 
     11          uart_RD UART_ReadData=UART2_ReadData;  //函数指针，指向不同的UART_ReadData()
     12          

   \                                 In section .bss, align 4
     13          u32 instr_len;                   //AT指令长度，不包括指令结束符0x0d
   \                     instr_len:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \                     UART_ReadData:
   \   00000000   ........           DC32 UART2_ReadData
     14          u8 result_code_buf[RESULT_CODE_BUF_LENGTH];            //用于读出存储在UARTxRingBuf中的at指令返回结果,供程序分析
   \                     result_code_buf:
   \   00000004   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000024   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000034   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000044   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000054   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000064   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000074   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000084   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000094   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000104   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000114   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000124   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000134   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000144   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000154   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000164   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000174   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000184   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000194   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000204   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000214   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000224   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000234   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000244   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000254   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000264   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000274   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000284   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000294   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000304   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000314   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000324   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000334   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000344   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000354   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000364   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000374   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000384   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000394   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
     15          
     16          

   \                                 In section .bss, align 1
     17          bool send_OK = FALSE;
   \                     send_OK:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     18          bool send_ERROR = FALSE;
   \                     send_ERROR:
   \   00000000                      DS8 1
     19          
     20          
     21          
     22          

   \                                 In section .text, align 2, keep-with-next
     23          void send_at_general(u8 *instr, u32 instr_len)
     24          //通用at指令发送函数，用于将不同的at指令通过UART发送出去
     25          //instr 指令数组名，instr_len指令长度（不含0x0d）
     26          {
   \                     send_at_general:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0446               MOV      R4,R0
   \   00000004   0D46               MOV      R5,R1
     27            for(int i=0;i<instr_len;i++)
   \   00000006   0026               MOVS     R6,#+0
   \   00000008   ....               LDR.N    R7,??DataTable7  ;; 0x40004400
   \   0000000A   0AE0               B.N      ??send_at_general_0
     28            {
     29              USART_SendData(UART_USING, instr[i]);
   \                     ??send_at_general_1:
   \   0000000C   315D               LDRB     R1,[R6, R4]
   \   0000000E   3846               MOV      R0,R7
   \   00000010   ........           BL       USART_SendData
     30              while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
   \                     ??send_at_general_2:
   \   00000014   4021               MOVS     R1,#+64
   \   00000016   3846               MOV      R0,R7
   \   00000018   ........           BL       USART_GetFlagStatus
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   F9D0               BEQ.N    ??send_at_general_2
     31            }
   \   00000020   761C               ADDS     R6,R6,#+1
   \                     ??send_at_general_0:
   \   00000022   AE42               CMP      R6,R5
   \   00000024   F2D3               BCC.N    ??send_at_general_1
     32            USART_SendData(UART_USING, 0x0d);     //at指令结束标志0x0d
   \   00000026   0D21               MOVS     R1,#+13
   \   00000028   3846               MOV      R0,R7
   \   0000002A   ........           BL       USART_SendData
     33            while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
   \                     ??send_at_general_3:
   \   0000002E   4021               MOVS     R1,#+64
   \   00000030   3846               MOV      R0,R7
   \   00000032   ........           BL       USART_GetFlagStatus
   \   00000036   0028               CMP      R0,#+0
   \   00000038   F9D0               BEQ.N    ??send_at_general_3
     34          }
   \   0000003A   F1BD               POP      {R0,R4-R7,PC}    ;; return
     35          

   \                                 In section .text, align 4, keep-with-next
     36          void send_at()
     37          //at
     38          {
   \                     send_at:
   \   00000000   80B5               PUSH     {R7,LR}
     39            instr_len = 2;
   \   00000002   ....               LDR.N    R0,??DataTable6  ;; instr_len
   \   00000004   0221               MOVS     R1,#+2
   \   00000006   0160               STR      R1,[R0, #+0]
     40            u8 at_instr[2]="at";
   \   00000008   00A8               ADD      R0,SP,#+0
   \   0000000A   0349               LDR.N    R1,??send_at_0   ;; `?<Constant "at">`
   \   0000000C   0A88               LDRH     R2,[R1, #0]
   \   0000000E   0280               STRH     R2,[R0, #+0]
     41            send_at_general(at_instr, instr_len);
   \   00000010   0221               MOVS     R1,#+2
   \   00000012   ........           BL       send_at_general
     42          }
   \   00000016   01BD               POP      {R0,PC}          ;; return
   \                     ??send_at_0:
   \   00000018   ........           DC32     `?<Constant "at">`
     43          
     44          

   \                                 In section .text, align 4, keep-with-next
     45          void send_at_ipinit()
     46          //连接到3g网络。
     47          //此指令执行完后，建立与基站的连接，获得从基站分配的ip，开发板上status指示灯常亮
     48          {
   \                     send_at_ipinit:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   85B0               SUB      SP,SP,#+20
     49            instr_len = 17;
   \   00000004   ....               LDR.N    R0,??DataTable6  ;; instr_len
   \   00000006   1121               MOVS     R1,#+17
   \   00000008   0160               STR      R1,[R0, #+0]
     50            u8 at_instr[17] = "at^ipinit=\"3gnet\"";
   \   0000000A   00A8               ADD      R0,SP,#+0
   \   0000000C   0249               LDR.N    R1,??send_at_ipinit_0  ;; `?<Constant "at^ipinit=\\"3gnet\\"">`
   \   0000000E   1122               MOVS     R2,#+17
   \   00000010   ........           BL       __aeabi_memcpy4
     51            send_at_general(at_instr, instr_len);
   \   00000014   1121               MOVS     R1,#+17
   \   00000016   ....               B.N      ?Subroutine0
   \                     ??send_at_ipinit_0:
   \   00000018   ........           DC32     `?<Constant "at^ipinit=\\"3gnet\\"">`
     52          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ........           BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_2:
   \   00000004   05B0               ADD      SP,SP,#+20
   \   00000006   00BD               POP      {PC}             ;; return
   \                     ??Subroutine0_0:
   \   00000008   ........           DC32     `?<Constant "at^ipsend=3,\\"hello\\"">`

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   00A8               ADD      R0,SP,#+0
   \   00000002   ....               B.N      send_at_general
     53          

   \                                 In section .text, align 4, keep-with-next
     54          void send_at_ipopen()
     55          //建立tcp链路。
     56          //此指令执行完后，建立于目标服务器的tcp连接。
     57          {
   \                     send_at_ipopen:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   8DB0               SUB      SP,SP,#+52
     58            instr_len = 45;
   \   00000004   ....               LDR.N    R0,??DataTable6  ;; instr_len
   \   00000006   2D21               MOVS     R1,#+45
   \   00000008   0160               STR      R1,[R0, #+0]
     59            u8 at_instr[45] = "at^ipopen=3,\"tcp\",\"211.87.235.157\",8888,33000";
   \   0000000A   00A8               ADD      R0,SP,#+0
   \   0000000C   0449               LDR.N    R1,??send_at_ipopen_0  ;; `?<Constant "at^ipopen=3,\\"tcp\\",\\"21...">`
   \   0000000E   2D22               MOVS     R2,#+45
   \   00000010   ........           BL       __aeabi_memcpy4
     60            //连接链路3，使用tcp协议，目标服务器地址211.87.235.157,目标服务器端口号8888，本地端口号33000；
     61            send_at_general(at_instr, instr_len);
   \   00000014   2D21               MOVS     R1,#+45
   \   00000016   ........           BL       ?Subroutine1
     62          }
   \                     ??CrossCallReturnLabel_3:
   \   0000001A   0DB0               ADD      SP,SP,#+52
   \   0000001C   00BD               POP      {PC}             ;; return
   \   0000001E   00BF               Nop      
   \                     ??send_at_ipopen_0:
   \   00000020   ........           DC32     `?<Constant "at^ipopen=3,\\"tcp\\",\\"21...">`
     63          
     64          

   \                                 In section .text, align 4, keep-with-next
     65          void send_at_send()
     66          {//测试用
   \                     send_at_send:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   85B0               SUB      SP,SP,#+20
     67            instr_len = 19;
   \   00000004   ....               LDR.N    R0,??DataTable6  ;; instr_len
   \   00000006   1321               MOVS     R1,#+19
   \   00000008   0160               STR      R1,[R0, #+0]
     68            u8 at_instr[19] = "at^ipsend=3,\"hello\"";
   \   0000000A   00A8               ADD      R0,SP,#+0
   \   0000000C   ....               LDR.N    R1,??Subroutine0_0  ;; `?<Constant "at^ipsend=3,\\"hello\\"">`
   \   0000000E   1322               MOVS     R2,#+19
   \   00000010   ........           BL       __aeabi_memcpy4
     69            send_at_general(at_instr, instr_len);
   \   00000014   1321               MOVS     R1,#+19
   \   00000016   00BF               Nop      
   \   00000018                      REQUIRE ?Subroutine0
   \   00000018                      ;; // Fall through to label ?Subroutine0
     70          }
     71          

   \                                 In section .text, align 4, keep-with-next
     72          void send_at_reset()
     73          //1秒后重启3g模块
     74          {
   \                     send_at_reset:
   \   00000000   E0B5               PUSH     {R5-R7,LR}
     75            instr_len = 10;
   \   00000002   ....               LDR.N    R0,??DataTable6  ;; instr_len
   \   00000004   0A21               MOVS     R1,#+10
   \   00000006   0160               STR      R1,[R0, #+0]
     76            u8 at_instr[10] = "at^reset=1";
   \   00000008   00A8               ADD      R0,SP,#+0
   \   0000000A   0449               LDR.N    R1,??send_at_reset_0  ;; `?<Constant "at^reset=1">`
   \   0000000C   0A22               MOVS     R2,#+10
   \   0000000E   ........           BL       __aeabi_memcpy4
     77            send_at_general(at_instr, instr_len);
   \   00000012   0A21               MOVS     R1,#+10
   \   00000014   ........           BL       ?Subroutine1
     78          }
   \                     ??CrossCallReturnLabel_1:
   \   00000018   07BD               POP      {R0-R2,PC}       ;; return
   \   0000001A   00BF               Nop      
   \                     ??send_at_reset_0:
   \   0000001C   ........           DC32     `?<Constant "at^reset=1">`
     79          

   \                                 In section .text, align 4, keep-with-next
     80          void at_initial_sequence()
     81          // 完成3g模块与基站和服务器的连接
     82          {
   \                     at_initial_sequence:
   \   00000000   38B5               PUSH     {R3-R5,LR}
     83            //USART_SendData(UART_USING, 0x00);
     84            //while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
     85            u32 received_len = get_received_len() ;
   \   00000002   ........           BL       get_received_len
   \   00000006   0446               MOV      R4,R0
     86            
     87            send_at();
   \   00000008   ........           BL       send_at
   \   0000000C   02E0               B.N      ??at_initial_sequence_0
     88            while(received_len<9)
     89            {
     90              received_len = get_received_len();
   \                     ??at_initial_sequence_1:
   \   0000000E   ........           BL       get_received_len
   \   00000012   0446               MOV      R4,R0
     91            }
   \                     ??at_initial_sequence_0:
   \   00000014   092C               CMP      R4,#+9
   \   00000016   FAD3               BCC.N    ??at_initial_sequence_1
     92            (*UART_ReadData)(result_code_buf,9);
   \   00000018   124D               LDR.N    R5,??at_initial_sequence_2  ;; UART_ReadData
   \   0000001A   0921               MOVS     R1,#+9
   \   0000001C   281D               ADDS     R0,R5,#+4
   \   0000001E   2A68               LDR      R2,[R5, #+0]
   \   00000020   9047               BLX      R2
     93            
     94            send_at_ipinit();                 //连接基站
   \   00000022   ........           BL       send_at_ipinit
   \   00000026   02E0               B.N      ??at_initial_sequence_3
     95            while(received_len<24)
     96            {
     97              received_len = get_received_len();
   \                     ??at_initial_sequence_4:
   \   00000028   ........           BL       get_received_len
   \   0000002C   0446               MOV      R4,R0
     98            }
   \                     ??at_initial_sequence_3:
   \   0000002E   182C               CMP      R4,#+24
   \   00000030   FAD3               BCC.N    ??at_initial_sequence_4
     99            (*UART_ReadData)(result_code_buf,24);
   \   00000032   1821               MOVS     R1,#+24
   \   00000034   281D               ADDS     R0,R5,#+4
   \   00000036   2A68               LDR      R2,[R5, #+0]
   \   00000038   9047               BLX      R2
    100            
    101            send_at_ipopen();               //连接服务器
   \   0000003A   ........           BL       send_at_ipopen
   \   0000003E   02E0               B.N      ??at_initial_sequence_5
    102            while(received_len<52)
    103            {
    104              received_len = get_received_len();
   \                     ??at_initial_sequence_6:
   \   00000040   ........           BL       get_received_len
   \   00000044   0446               MOV      R4,R0
    105            }
   \                     ??at_initial_sequence_5:
   \   00000046   342C               CMP      R4,#+52
   \   00000048   FAD3               BCC.N    ??at_initial_sequence_6
    106            (*UART_ReadData)(result_code_buf,52);
   \   0000004A   3421               MOVS     R1,#+52
   \   0000004C   281D               ADDS     R0,R5,#+4
   \   0000004E   2A68               LDR      R2,[R5, #+0]
   \   00000050   9047               BLX      R2
    107            
    108            enable_transparent_transfer(3);   //开启透传模式
   \   00000052   0320               MOVS     R0,#+3
   \   00000054   ........           BL       enable_transparent_transfer
    109            while(received_len<21)
    110            {
    111              received_len = get_received_len();
    112            }
    113            (*UART_ReadData)(result_code_buf,21);
   \   00000058   1521               MOVS     R1,#+21
   \   0000005A   281D               ADDS     R0,R5,#+4
   \   0000005C   2A68               LDR      R2,[R5, #+0]
   \   0000005E   BDE83840           POP      {R3-R5,LR}
   \   00000062   1047               BX       R2
   \                     ??at_initial_sequence_2:
   \   00000064   ........           DC32     UART_ReadData
    114          }
    115          
    116          

   \                                 In section .text, align 4, keep-with-next
    117          void enable_transparent_transfer(int link_id)
    118          //开启透传模式。开启后，所有通过串口发给3g模块的内容都被认为是数据透明地传输出去
    119          {
   \                     enable_transparent_transfer:
   \   00000000   1FB5               PUSH     {R0-R4,LR}
   \   00000002   0446               MOV      R4,R0
    120            instr_len = 14;
   \   00000004   ....               LDR.N    R0,??DataTable6  ;; instr_len
   \   00000006   0E21               MOVS     R1,#+14
   \   00000008   0160               STR      R1,[R0, #+0]
    121            u8 at_instr[14] = "at^ipentrans=1";
   \   0000000A   00A8               ADD      R0,SP,#+0
   \   0000000C   0549               LDR.N    R1,??enable_transparent_transfer_0  ;; `?<Constant "at^ipentrans=1">`
   \   0000000E   0E22               MOVS     R2,#+14
   \   00000010   ........           BL       __aeabi_memcpy4
    122            at_instr[13] = link_id + 0x30;
   \   00000014   04F13000           ADD      R0,R4,#+48
   \   00000018   8DF80D00           STRB     R0,[SP, #+13]
    123            send_at_general(at_instr, instr_len);
   \   0000001C   0E21               MOVS     R1,#+14
   \   0000001E   ........           BL       ?Subroutine1
    124          }
   \                     ??CrossCallReturnLabel_0:
   \   00000022   1FBD               POP      {R0-R4,PC}       ;; return
   \                     ??enable_transparent_transfer_0:
   \   00000024   ........           DC32     `?<Constant "at^ipentrans=1">`
    125          

   \                                 In section .text, align 4, keep-with-next
    126          void disable_transparent_transfer()
    127          //关闭透传模式
    128          {
   \                     disable_transparent_transfer:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    129            u8 at_instr[3]="+++";
   \   00000002   00A8               ADD      R0,SP,#+0
   \   00000004   0A49               LDR.N    R1,??disable_transparent_transfer_0  ;; `?<Constant "+++">`
   \   00000006   0322               MOVS     R2,#+3
   \   00000008   ........           BL       __aeabi_memcpy4
    130            for(int i=0;i<3;i++)
   \   0000000C   0024               MOVS     R4,#+0
   \   0000000E   ....               LDR.N    R5,??DataTable7  ;; 0x40004400
    131            {
    132              USART_SendData(UART_USING, at_instr[i]);
   \                     ??disable_transparent_transfer_1:
   \   00000010   00A8               ADD      R0,SP,#+0
   \   00000012   215C               LDRB     R1,[R4, R0]
   \   00000014   2846               MOV      R0,R5
   \   00000016   ........           BL       USART_SendData
    133              while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
   \                     ??disable_transparent_transfer_2:
   \   0000001A   4021               MOVS     R1,#+64
   \   0000001C   2846               MOV      R0,R5
   \   0000001E   ........           BL       USART_GetFlagStatus
   \   00000022   0028               CMP      R0,#+0
   \   00000024   F9D0               BEQ.N    ??disable_transparent_transfer_2
    134            }
   \   00000026   641C               ADDS     R4,R4,#+1
   \   00000028   032C               CMP      R4,#+3
   \   0000002A   F1DB               BLT.N    ??disable_transparent_transfer_1
    135          }
   \   0000002C   31BD               POP      {R0,R4,R5,PC}    ;; return
   \   0000002E   00BF               Nop      
   \                     ??disable_transparent_transfer_0:
   \   00000030   ........           DC32     `?<Constant "+++">`
    136          

   \                                 In section .text, align 4, keep-with-next
    137          u32 get_received_len()
    138          {
    139            u32 received_len;
    140            if(UART_BUF.RingBufStartPointer <= UART_BUF.RingBufEndPointer)
   \                     get_received_len:
   \   00000000   0548               LDR.N    R0,??get_received_len_0  ;; UART2RingBuf
   \   00000002   8168               LDR      R1,[R0, #+8]
   \   00000004   C268               LDR      R2,[R0, #+12]
   \   00000006   8A42               CMP      R2,R1
   \   00000008   01D3               BCC.N    ??get_received_len_1
    141            {
    142              received_len = UART_BUF.RingBufEndPointer - UART_BUF.RingBufStartPointer;
   \   0000000A   501A               SUBS     R0,R2,R1
   \   0000000C   7047               BX       LR
    143            }
    144            else
    145            {
    146              received_len = UART2RingBuf.RingBufSize - UART_BUF.RingBufStartPointer + UART_BUF.RingBufEndPointer;
   \                     ??get_received_len_1:
   \   0000000E   4068               LDR      R0,[R0, #+4]
   \   00000010   401A               SUBS     R0,R0,R1
   \   00000012   1018               ADDS     R0,R2,R0
    147            }
    148            return received_len;
   \   00000014   7047               BX       LR               ;; return
   \   00000016   00BF               Nop      
   \                     ??get_received_len_0:
   \   00000018   ........           DC32     UART2RingBuf
    149          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     instr_len

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   00440040           DC32     0x40004400

   \                                 In section .rodata, align 2
   \                     `?<Constant "at">`:
   \   00000000   6174               DC8 61H, 74H

   \                                 In section .rodata, align 4
   \                     `?<Constant "at^ipinit=\\"3gnet\\"">`:
   \   00000000   61745E697069       DC8 61H, 74H, 5EH, 69H, 70H, 69H, 6EH, 69H
   \              6E69        
   \   00000008   743D2233676E       DC8 74H, 3DH, 22H, 33H, 67H, 6EH, 65H, 74H
   \              6574        
   \   00000010   22                 DC8 22H
   \   00000011   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "at^ipopen=3,\\"tcp\\",\\"21...">`:
   \   00000000   61745E69706F       DC8 61H, 74H, 5EH, 69H, 70H, 6FH, 70H, 65H
   \              7065        
   \   00000008   6E3D332C2274       DC8 6EH, 3DH, 33H, 2CH, 22H, 74H, 63H, 70H
   \              6370        
   \   00000010   222C22323131       DC8 22H, 2CH, 22H, 32H, 31H, 31H, 2EH, 38H
   \              2E38        
   \   00000018   372E3233352E       DC8 37H, 2EH, 32H, 33H, 35H, 2EH, 31H, 35H
   \              3135        
   \   00000020   37222C383838       DC8 37H, 22H, 2CH, 38H, 38H, 38H, 38H, 2CH
   \              382C        
   \   00000028   3333303030         DC8 33H, 33H, 30H, 30H, 30H
   \   0000002D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "at^ipsend=3,\\"hello\\"">`:
   \   00000000   61745E697073       DC8 61H, 74H, 5EH, 69H, 70H, 73H, 65H, 6EH
   \              656E        
   \   00000008   643D332C2268       DC8 64H, 3DH, 33H, 2CH, 22H, 68H, 65H, 6CH
   \              656C        
   \   00000010   6C6F22             DC8 6CH, 6FH, 22H
   \   00000013   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "at^reset=1">`:
   \   00000000   61745E726573       DC8 61H, 74H, 5EH, 72H, 65H, 73H, 65H, 74H
   \              6574        
   \   00000008   3D31               DC8 3DH, 31H
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "at^ipentrans=1">`:
   \   00000000   61745E697065       DC8 61H, 74H, 5EH, 69H, 70H, 65H, 6EH, 74H
   \              6E74        
   \   00000008   72616E733D31       DC8 72H, 61H, 6EH, 73H, 3DH, 31H
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "+++">`:
   \   00000000   2B2B2B             DC8 2BH, 2BH, 2BH
   \   00000003   00                 DC8 0
    150          

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     at_initial_sequence              16
     disable_transparent_transfer     16
     enable_transparent_transfer      24
     get_received_len                  0
     send_at                           8
     send_at_general                  24
     send_at_ipinit                   24
     send_at_ipopen                   56
     send_at_reset                    16
     send_at_send                     24


   Section sizes:

     Function/Label                            Bytes
     --------------                            -----
     instr_len                                    4
     UART_ReadData                             1004
     result_code_buf
     send_OK                                      1
     send_ERROR                                   1
     send_at_general                             60
     send_at                                     28
     send_at_ipinit                              28
     ?Subroutine0                                12
     ?Subroutine1                                 4
     send_at_ipopen                              36
     send_at_send                                24
     send_at_reset                               32
     at_initial_sequence                        104
     enable_transparent_transfer                 40
     disable_transparent_transfer                52
     get_received_len                            28
     ??DataTable6                                 4
     ??DataTable7                                 4
     ?<Constant "at">                             2
     ?<Constant "at^ipinit=\"3gnet\"">           20
     ?<Constant "at^ipopen=3,\"tcp\",\"21...">   48
     ?<Constant "at^ipsend=3,\"hello\"">         20
     ?<Constant "at^reset=1">                    12
     ?<Constant "at^ipentrans=1">                16
     ?<Constant "+++">                            4

 
     6 bytes in section .bss
 1 004 bytes in section .data
   122 bytes in section .rodata
   456 bytes in section .text
 
   456 bytes of CODE  memory
   122 bytes of CONST memory
 1 010 bytes of DATA  memory

Errors: none
Warnings: none
