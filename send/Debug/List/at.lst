###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.2.51295/W32 for ARM     11/Apr/2011  15:18:00 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\LiYang\Desktop\newest\Demo\source\at.c          #
#    Command line =  C:\Users\LiYang\Desktop\newest\Demo\source\at.c -lC      #
#                    C:\Users\LiYang\Desktop\newest\Demo\project\EWARMv5\Debu #
#                    g\List\ -lb C:\Users\LiYang\Desktop\newest\Demo\project\ #
#                    EWARMv5\Debug\List\ -o C:\Users\LiYang\Desktop\newest\De #
#                    mo\project\EWARMv5\Debug\Obj\ --debug --endian=little    #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "E:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    C:\Users\LiYang\Desktop\newest\Demo\project\EWARMv5\..\. #
#                    .\include\ -I C:\Users\LiYang\Desktop\newest\Demo\projec #
#                    t\EWARMv5\..\..\source\ -I C:\Users\LiYang\Desktop\newes #
#                    t\Demo\project\EWARMv5\..\..\..\FWLib\library\inc\ -I    #
#                    C:\Users\LiYang\Desktop\newest\Demo\project\EWARMv5\..\. #
#                    .\..\USBLib\library\inc\ -I                              #
#                    C:\Users\LiYang\Desktop\newest\Demo\project\EWARMv5\..\. #
#                    .\fatfs\ -I "E:\Program Files\IAR Systems\Embedded       #
#                    Workbench 5.4\arm\INC\" -Ohz                             #
#    List file    =  C:\Users\LiYang\Desktop\newest\Demo\project\EWARMv5\Debu #
#                    g\List\at.lst                                            #
#    Object file  =  C:\Users\LiYang\Desktop\newest\Demo\project\EWARMv5\Debu #
#                    g\Obj\at.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\LiYang\Desktop\newest\Demo\source\at.c
      1          #include "at.h"
      2          #include "stm32f10x_usart.h"
      3          #include "ringbuf.h"
      4          #include "delay.h"
      5          
      6          #define UART_USING USART2       //选择uart
      7          #define RESULT_CODE_BUF_LENGTH 1000   
      8          #define UART_BUF UART2RingBuf   //环形接收缓冲区，接收从串口返回的数据
      9          
     10          #define send_buf_len 1000               //发送数据缓冲区长度
     11          #define send_instrution_len_max 1000    //at^ipsend指令最大长度
     12          
     13          typedef u32 (*uart_RD)(u8 *readbuf,u32 readlen); 
     14          uart_RD UART_ReadData=UART2_ReadData;  //函数指针，指向不同的UART_ReadData()
     15          

   \                                 In section .bss, align 4
     16          u32 instr_len;                   //AT指令长度，不包括指令结束符0x0d
   \                     instr_len:
   \   00000000                      DS8 4
     17          u8 result_code_buf[RESULT_CODE_BUF_LENGTH];            //用于读出存储在UARTxRingBuf中的at指令返回结果,供程序分析

   \                                 In section .bss, align 4
     18          u8 sendBuf[send_buf_len];       //缓存发送数据的条形缓冲区
   \                     sendBuf:
   \   00000000                      DS8 1000

   \                                 In section .data, align 4
     19          bool send_OK = FALSE;
   \                     send_OK:
   \   00000000   00                 DC8 0
     20          bool send_ERROR = FALSE;
   \                     send_ERROR:
   \   00000001   00                 DC8 0
   \   00000002   0000               DC8 0, 0
   \                     UART_ReadData:
   \   00000004   ........           DC32 UART2_ReadData
   \                     result_code_buf:
   \   00000008   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000038   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000048   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000058   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000068   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000078   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000088   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000098   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000108   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000118   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000128   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000138   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000148   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000158   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000168   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000178   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000188   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000198   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000208   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000218   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000228   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000238   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000248   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000258   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000268   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000278   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000288   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000298   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000308   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000318   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000328   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000338   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000348   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000358   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000368   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000378   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000388   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000398   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
     21          

   \                                 In section .bss, align 4
     22          u32 num_of_tri_plus;
   \                     num_of_tri_plus:
   \   00000000                      DS8 4
     23          
     24          
     25          

   \                                 In section .text, align 4, keep-with-next
     26          void send_at0()
     27          {
   \                     send_at0:
   \   00000000   10B5               PUSH     {R4,LR}
     28            u8 data;
     29            
     30            data = 0x61; //a
     31            USART_SendData(UART_USING, data);
   \   00000002   ........           LDR.W    R4,??DataTable25  ;; 0x40004400
   \   00000006   6121               MOVS     R1,#+97
   \   00000008   2046               MOV      R0,R4
   \   0000000A   ........           BL       USART_SendData
     32            //while(USART_GetFlagStatus(UART_USING, USART_FLAG_TXE) == RESET);
     33            while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
   \                     ??send_at0_0:
   \   0000000E   ........           BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_2:
   \   00000012   0028               CMP      R0,#+0
   \   00000014   FBD0               BEQ.N    ??send_at0_0
     34            data = 0x74; //t
     35            USART_SendData(UART_USING, data);
   \   00000016   7421               MOVS     R1,#+116
   \   00000018   2046               MOV      R0,R4
   \   0000001A   ........           BL       USART_SendData
     36            //while(USART_GetFlagStatus(UART_USING, USART_FLAG_TXE) == RESET);
     37            while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
   \                     ??send_at0_1:
   \   0000001E   ........           BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_1:
   \   00000022   0028               CMP      R0,#+0
   \   00000024   FBD0               BEQ.N    ??send_at0_1
     38            data = 0x0d; //
     39            USART_SendData(UART_USING, data);
   \   00000026   0D21               MOVS     R1,#+13
   \   00000028                      REQUIRE ?Subroutine0
   \   00000028                      ;; // Fall through to label ?Subroutine0
     40            while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
     41          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   2046               MOV      R0,R4
   \   00000002   ........           BL       USART_SendData
   \                     ??Subroutine0_0:
   \   00000006   ........           BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_0:
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   FBD0               BEQ.N    ??Subroutine0_0
   \   0000000E   10BD               POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   4021               MOVS     R1,#+64
   \   00000002   2046               MOV      R0,R4
   \   00000004   ........           B.W      USART_GetFlagStatus
     42          

   \                                 In section .text, align 4, keep-with-next
     43          void send_at1()
     44          {
   \                     send_at1:
   \   00000000   80B5               PUSH     {R7,LR}
     45            instr_len = 3;
   \   00000002   ........           LDR.W    R0,??DataTable20  ;; instr_len
   \   00000006   0321               MOVS     R1,#+3
   \   00000008   0160               STR      R1,[R0, #+0]
     46            u8 at_instr[3] = {0x61,0x74,0x0d}; //at
   \   0000000A   00A8               ADD      R0,SP,#+0
   \   0000000C   0349               LDR.N    R1,??send_at1_0  ;; `?<Constant {97, 116, 13}>`
   \   0000000E   0A68               LDR      R2,[R1, #0]
   \   00000010   0260               STR      R2,[R0, #+0]
     47            send_at_general(at_instr, instr_len);
   \   00000012   0321               MOVS     R1,#+3
   \   00000014   ........           BL       send_at_general
     48          }
   \   00000018   01BD               POP      {R0,PC}          ;; return
   \   0000001A   00BF               Nop      
   \                     ??send_at1_0:
   \   0000001C   ........           DC32     `?<Constant {97, 116, 13}>`
     49          

   \                                 In section .text, align 2, keep-with-next
     50          void send_at_general(u8 *instr, u32 instr_len)
     51          //通用at指令发送函数，用于将不同的at指令通过UART发送出去
     52          //instr 指令数组名，instr_len指令长度（不含0x0d）
     53          {
   \                     send_at_general:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0446               MOV      R4,R0
   \   00000004   0D46               MOV      R5,R1
     54            for(int i=0;i<instr_len;i++)
   \   00000006   0026               MOVS     R6,#+0
   \   00000008   ........           LDR.W    R7,??DataTable25  ;; 0x40004400
   \   0000000C   08E0               B.N      ??send_at_general_0
     55            {
     56              USART_SendData(UART_USING, instr[i]);
   \                     ??send_at_general_1:
   \   0000000E   315D               LDRB     R1,[R6, R4]
   \   00000010   3846               MOV      R0,R7
   \   00000012   ........           BL       USART_SendData
     57              while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
   \                     ??send_at_general_2:
   \   00000016   ........           BL       ?Subroutine3
     58            }
   \                     ??CrossCallReturnLabel_5:
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   FBD0               BEQ.N    ??send_at_general_2
   \   0000001E   761C               ADDS     R6,R6,#+1
   \                     ??send_at_general_0:
   \   00000020   AE42               CMP      R6,R5
   \   00000022   F4D3               BCC.N    ??send_at_general_1
     59            USART_SendData(UART_USING, 0x0d);     //at指令结束标志0x0d
   \   00000024   0D21               MOVS     R1,#+13
   \   00000026   3846               MOV      R0,R7
   \   00000028   ........           BL       USART_SendData
     60            while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
   \                     ??send_at_general_3:
   \   0000002C   ........           BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_4:
   \   00000030   0028               CMP      R0,#+0
   \   00000032   FBD0               BEQ.N    ??send_at_general_3
     61            
     62          }
   \   00000034   F1BD               POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   4021               MOVS     R1,#+64
   \   00000002   3846               MOV      R0,R7
   \   00000004   ........           B.W      USART_GetFlagStatus
     63          

   \                                 In section .text, align 4, keep-with-next
     64          void send_at()
     65          {
   \                     send_at:
   \   00000000   80B5               PUSH     {R7,LR}
     66            instr_len = 2;
   \   00000002   ........           LDR.W    R0,??DataTable20  ;; instr_len
   \   00000006   0221               MOVS     R1,#+2
   \   00000008   0160               STR      R1,[R0, #+0]
     67            u8 at_instr[2]="at";
   \   0000000A   00A8               ADD      R0,SP,#+0
   \   0000000C   0449               LDR.N    R1,??send_at_0   ;; `?<Constant "at">`
   \   0000000E   0A78               LDRB     R2,[R1, #0]
   \   00000010   0270               STRB     R2,[R0, #+0]
   \   00000012   4A78               LDRB     R2,[R1, #+1]
   \   00000014   4270               STRB     R2,[R0, #+1]
     68            send_at_general(at_instr, instr_len);
   \   00000016   0221               MOVS     R1,#+2
   \   00000018   ........           BL       send_at_general
     69          }
   \   0000001C   01BD               POP      {R0,PC}          ;; return
   \   0000001E   00BF               Nop      
   \                     ??send_at_0:
   \   00000020   ........           DC32     `?<Constant "at">`
     70          
     71          

   \                                 In section .text, align 4, keep-with-next
     72          void send_at_ipinit()
     73          //连接到3g网络。
     74          //此指令执行完后，建立与基站的连接，获得从基站分配的ip，开发板上status指示灯常亮
     75          {
   \                     send_at_ipinit:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   85B0               SUB      SP,SP,#+20
     76            instr_len = 17;
   \   00000004   ........           LDR.W    R0,??DataTable20  ;; instr_len
   \   00000008   1121               MOVS     R1,#+17
   \   0000000A   0160               STR      R1,[R0, #+0]
     77            u8 at_instr[17] = "at^ipinit=\"3gnet\"";
   \   0000000C   00A8               ADD      R0,SP,#+0
   \   0000000E   ....               LDR.N    R1,??Subroutine1_0  ;; `?<Constant "at^ipinit=\\"3gnet\\"">`
   \   00000010   1122               MOVS     R2,#+17
   \   00000012   ........           BL       __aeabi_memcpy
     78            send_at_general(at_instr, instr_len);
   \   00000016   1121               MOVS     R1,#+17
   \   00000018                      REQUIRE ?Subroutine1
   \   00000018                      ;; // Fall through to label ?Subroutine1
     79          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ........           BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_9:
   \   00000004   05B0               ADD      SP,SP,#+20
   \   00000006   00BD               POP      {PC}             ;; return
   \                     ??Subroutine1_0:
   \   00000008   ........           DC32     `?<Constant "at^ipinit=\\"3gnet\\"">`

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   00A8               ADD      R0,SP,#+0
   \   00000002   ....               B.N      send_at_general
     80          

   \                                 In section .text, align 4, keep-with-next
     81          void send_at_ipopen()
     82          //建立tcp链路。
     83          //此指令执行完后，建立于目标服务器的tcp连接。
     84          {
   \                     send_at_ipopen:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   8DB0               SUB      SP,SP,#+52
     85            instr_len = 45;
   \   00000004   ........           LDR.W    R0,??DataTable20  ;; instr_len
   \   00000008   2D21               MOVS     R1,#+45
   \   0000000A   0160               STR      R1,[R0, #+0]
     86            u8 at_instr[45] = "at^ipopen=3,\"tcp\",\"211.87.235.157\",8888,33000";
   \   0000000C   00A8               ADD      R0,SP,#+0
   \   0000000E   0449               LDR.N    R1,??send_at_ipopen_0  ;; `?<Constant "at^ipopen=3,\\"tcp\\",\\"21...">`
   \   00000010   2D22               MOVS     R2,#+45
   \   00000012   ........           BL       __aeabi_memcpy
     87            send_at_general(at_instr, instr_len);
   \   00000016   2D21               MOVS     R1,#+45
   \   00000018   ........           BL       ?Subroutine5
     88          }
   \                     ??CrossCallReturnLabel_8:
   \   0000001C   0DB0               ADD      SP,SP,#+52
   \   0000001E   00BD               POP      {PC}             ;; return
   \                     ??send_at_ipopen_0:
   \   00000020   ........           DC32     `?<Constant "at^ipopen=3,\\"tcp\\",\\"21...">`
     89          
     90          

   \                                 In section .text, align 4, keep-with-next
     91          void send_at_send()
     92          {//测试用
   \                     send_at_send:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   85B0               SUB      SP,SP,#+20
     93            instr_len = 19;
   \   00000004   ....               LDR.N    R0,??DataTable20  ;; instr_len
   \   00000006   1321               MOVS     R1,#+19
   \   00000008   0160               STR      R1,[R0, #+0]
     94            u8 at_instr[19] = "at^ipsend=3,\"hello\"";
   \   0000000A   00A8               ADD      R0,SP,#+0
   \   0000000C   0249               LDR.N    R1,??send_at_send_0  ;; `?<Constant "at^ipsend=3,\\"hello\\"">`
   \   0000000E   1322               MOVS     R2,#+19
   \   00000010   ........           BL       __aeabi_memcpy
     95            send_at_general(at_instr, instr_len);
   \   00000014   1321               MOVS     R1,#+19
   \   00000016   ....               B.N      ?Subroutine1
   \                     ??send_at_send_0:
   \   00000018   ........           DC32     `?<Constant "at^ipsend=3,\\"hello\\"">`
     96          }
     97          

   \                                 In section .text, align 4, keep-with-next
     98          void send_at_reset()
     99          //1秒后重启3g模块
    100          {
   \                     send_at_reset:
   \   00000000   E0B5               PUSH     {R5-R7,LR}
    101            instr_len = 10;
   \   00000002   ....               LDR.N    R0,??DataTable20  ;; instr_len
   \   00000004   0A21               MOVS     R1,#+10
   \   00000006   0160               STR      R1,[R0, #+0]
    102            u8 at_instr[10] = "at^reset=1";
   \   00000008   00A8               ADD      R0,SP,#+0
   \   0000000A   0449               LDR.N    R1,??send_at_reset_0  ;; `?<Constant "at^reset=1">`
   \   0000000C   0A22               MOVS     R2,#+10
   \   0000000E   ........           BL       __aeabi_memcpy
    103            send_at_general(at_instr, instr_len);
   \   00000012   0A21               MOVS     R1,#+10
   \   00000014   ........           BL       ?Subroutine5
    104          }
   \                     ??CrossCallReturnLabel_7:
   \   00000018   07BD               POP      {R0-R2,PC}       ;; return
   \   0000001A   00BF               Nop      
   \                     ??send_at_reset_0:
   \   0000001C   ........           DC32     `?<Constant "at^reset=1">`
    105          

   \                                 In section .text, align 4, keep-with-next
    106          void send_at_sendFromBuf(u8 link_id,u8 *buf, u32 bufStartPoint, u32 bufEndPoint)
    107          //从条形缓冲区中读取数据并发送。
    108          //link_id：发送用的链路号，buf：指向条形缓冲区的指针，
    109          //bufStartPoint: 缓冲区中数据的起始位置，bufEndPoint：缓冲区中数据的结束位置的下一个位置
    110          //最大数据量1000-14=9986，14为发送指令中除用户数据外所需长度（不包括0x0d）
    111          {
   \                     send_at_sendFromBuf:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   ADF57E7D           SUB      SP,SP,#+1016
   \   00000008   8046               MOV      R8,R0
   \   0000000A   0C46               MOV      R4,R1
   \   0000000C   1546               MOV      R5,R2
    112            u32 dataLen = bufEndPoint - bufStartPoint;  //用户数据长度
   \   0000000E   5E1B               SUBS     R6,R3,R5
    113            instr_len = 14 + dataLen;                   //指令长度（不包括0x0d）
   \   00000010   ....               LDR.N    R7,??DataTable20  ;; instr_len
   \   00000012   06F10E00           ADD      R0,R6,#+14
   \   00000016   3860               STR      R0,[R7, #+0]
    114            u32 count0d = 0;
    115            u8 at_instr[send_instrution_len_max];     //发送指令最大长度
    116            u8 at_i1[13] = "at^ipsend=1,\"";
   \   00000018   00A8               ADD      R0,SP,#+0
   \   0000001A   1449               LDR.N    R1,??send_at_sendFromBuf_0  ;; `?<Constant "at^ipsend=1,\\"">`
   \   0000001C   0D22               MOVS     R2,#+13
   \   0000001E   ........           BL       __aeabi_memcpy
    117            for(int i=0;i<13;i++)
    118            {
    119              at_instr[i] = at_i1[i];
   \   00000022   0D22               MOVS     R2,#+13
   \   00000024   00A9               ADD      R1,SP,#+0
   \   00000026   04A8               ADD      R0,SP,#+16
   \   00000028   ........           BL       __aeabi_memcpy4
    120            }
    121            at_instr[10] = link_id+0x30; //把链路号转化为十六进制(0x31, 0x32 ,0x33, 0x34, 0x35)并存到指令数组中
   \   0000002C   08F13000           ADD      R0,R8,#+48
   \   00000030   8DF81A00           STRB     R0,[SP, #+26]
    122            for(int i=0;i<dataLen;i++)
   \   00000034   0020               MOVS     R0,#+0
   \   00000036   01E0               B.N      ??send_at_sendFromBuf_1
    123            {
    124              if(buf[bufStartPoint+i]==0x0d)  //用户数据中如果有0x0d，会被3g模块误认为是指令结束符
    125              {
    126                at_instr[i+13] = 0x0c;
    127                count0d ++ ;
    128              }
    129              else
    130              {
    131                at_instr[i+13] = buf[bufStartPoint+i];
   \                     ??send_at_sendFromBuf_2:
   \   00000038   4B73               STRB     R3,[R1, #+13]
    132              }
   \                     ??send_at_sendFromBuf_3:
   \   0000003A   401C               ADDS     R0,R0,#+1
   \                     ??send_at_sendFromBuf_1:
   \   0000003C   B042               CMP      R0,R6
   \   0000003E   08D2               BCS.N    ??send_at_sendFromBuf_4
   \   00000040   4219               ADDS     R2,R0,R5
   \   00000042   04A9               ADD      R1,SP,#+16
   \   00000044   4118               ADDS     R1,R0,R1
   \   00000046   135D               LDRB     R3,[R2, R4]
   \   00000048   0D2B               CMP      R3,#+13
   \   0000004A   F5D1               BNE.N    ??send_at_sendFromBuf_2
   \   0000004C   0C22               MOVS     R2,#+12
   \   0000004E   4A73               STRB     R2,[R1, #+13]
   \   00000050   F3E7               B.N      ??send_at_sendFromBuf_3
    133            }
    134            at_instr[13+dataLen] = '\"';
   \                     ??send_at_sendFromBuf_4:
   \   00000052   04A8               ADD      R0,SP,#+16
   \   00000054   3018               ADDS     R0,R6,R0
   \   00000056   2221               MOVS     R1,#+34
   \   00000058   4173               STRB     R1,[R0, #+13]
    135            send_at_general(at_instr, instr_len);
   \   0000005A   3968               LDR      R1,[R7, #+0]
   \   0000005C   04A8               ADD      R0,SP,#+16
   \   0000005E   ........           BL       send_at_general
    136          }
   \   00000062   0DF57E7D           ADD      SP,SP,#+1016
   \   00000066   BDE8F081           POP      {R4-R8,PC}       ;; return
   \   0000006A   00BF               Nop      
   \                     ??send_at_sendFromBuf_0:
   \   0000006C   ........           DC32     `?<Constant "at^ipsend=1,\\"">`
    137          
    138          

   \                                 In section .text, align 2, keep-with-next
    139          void at_initial_sequence()
    140          // 完成3g模块与基站和服务器的连接
    141          {
   \                     at_initial_sequence:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    142            //USART_SendData(UART_USING, 0x00);
    143            //while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
    144            u32 received_len = get_received_len() ;
   \   00000002   ........           BL       get_received_len
   \   00000006   0446               MOV      R4,R0
    145            send_at();
   \   00000008   ........           BL       send_at
   \   0000000C   02E0               B.N      ??at_initial_sequence_0
    146            while(received_len<9)
    147            {
    148              received_len = get_received_len();
   \                     ??at_initial_sequence_1:
   \   0000000E   ........           BL       get_received_len
   \   00000012   0446               MOV      R4,R0
    149            }
   \                     ??at_initial_sequence_0:
   \   00000014   092C               CMP      R4,#+9
   \   00000016   FAD3               BCC.N    ??at_initial_sequence_1
    150            (*UART_ReadData)(result_code_buf,9);
   \   00000018   ....               LDR.N    R5,??DataTable17  ;; send_OK
   \   0000001A   0921               MOVS     R1,#+9
   \   0000001C   ........           BL       ?Subroutine7
    151            send_at_ipinit();
   \                     ??CrossCallReturnLabel_12:
   \   00000020   ........           BL       send_at_ipinit
   \   00000024   02E0               B.N      ??at_initial_sequence_2
    152            while(received_len<24)
    153            {
    154              received_len = get_received_len();
   \                     ??at_initial_sequence_3:
   \   00000026   ........           BL       get_received_len
   \   0000002A   0446               MOV      R4,R0
    155            }
   \                     ??at_initial_sequence_2:
   \   0000002C   182C               CMP      R4,#+24
   \   0000002E   FAD3               BCC.N    ??at_initial_sequence_3
    156            (*UART_ReadData)(result_code_buf,24);
   \   00000030   1821               MOVS     R1,#+24
   \   00000032   ........           BL       ?Subroutine7
    157            send_at_ipopen();
   \                     ??CrossCallReturnLabel_11:
   \   00000036   ........           BL       send_at_ipopen
   \   0000003A   02E0               B.N      ??at_initial_sequence_4
    158            while(received_len<52)
    159            {
    160              received_len = get_received_len();
   \                     ??at_initial_sequence_5:
   \   0000003C   ........           BL       get_received_len
   \   00000040   0446               MOV      R4,R0
    161            }
   \                     ??at_initial_sequence_4:
   \   00000042   342C               CMP      R4,#+52
   \   00000044   FAD3               BCC.N    ??at_initial_sequence_5
    162            (*UART_ReadData)(result_code_buf,52);
   \   00000046   3421               MOVS     R1,#+52
   \   00000048   ........           BL       ?Subroutine7
    163            enable_transparent_transfer(3);
   \                     ??CrossCallReturnLabel_10:
   \   0000004C   0320               MOVS     R0,#+3
   \   0000004E   ........           BL       enable_transparent_transfer
    164            while(received_len<21)
    165            {
    166              received_len = get_received_len();
    167            }
    168            (*UART_ReadData)(result_code_buf,21);
   \   00000052   1521               MOVS     R1,#+21
   \   00000054   05F10800           ADD      R0,R5,#+8
   \   00000058   6A68               LDR      R2,[R5, #+4]
   \   0000005A   BDE83840           POP      {R3-R5,LR}
   \   0000005E   1047               BX       R2
    169          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   05F10800           ADD      R0,R5,#+8
   \   00000004   6A68               LDR      R2,[R5, #+4]
   \   00000006   1047               BX       R2
    170          

   \                                 In section .text, align 2, keep-with-next
    171          void _3g_send(u8 link_id,RING_BUFFER *ringbuf, u32 ringBufStartPoint, u32 ringBufEndPoint)
    172          //
    173          {
   \                     _3g_send:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0646               MOV      R6,R0
   \   00000004   0846               MOV      R0,R1
    174            u32 len;
    175            if(ringBufEndPoint >= ringBufStartPoint)
   \   00000006   9342               CMP      R3,R2
   \   00000008   2EBF               ITEE     CS 
   \   0000000A   9D1A               SUBCS    R5,R3,R2
   \   0000000C   C2F57A71           RSBCC    R1,R2,#+1000
   \   00000010   5D18               ADDCC    R5,R3,R1
    176              len = ringBufEndPoint - ringBufStartPoint;
    177            else
    178              len = ( RINGBUFFERSIZE-ringBufStartPoint)+ringBufEndPoint;
    179            Ring_ReadData(ringbuf, sendBuf, len);
   \   00000012   ........           BL       ?Subroutine8
    180            u32 s = 0;
    181            send_at_sendFromBuf(link_id, sendBuf,s, len);
   \                     ??CrossCallReturnLabel_14:
   \   00000016   2B46               MOV      R3,R5
   \   00000018   0022               MOVS     R2,#+0
   \   0000001A   2146               MOV      R1,R4
   \   0000001C   3046               MOV      R0,R6
   \   0000001E   ........           BL       send_at_sendFromBuf
   \   00000022   05F12201           ADD      R1,R5,#+34
   \   00000026   ....               LDR.N    R0,??DataTable26  ;; UART2RingBuf
    182            while(UART_BUF.RingBufEndPointer-UART_BUF.RingBufStartPointer<(34+len))
   \                     ??_3g_send_0:
   \   00000028   C268               LDR      R2,[R0, #+12]
   \   0000002A   8368               LDR      R3,[R0, #+8]
   \   0000002C   D21A               SUBS     R2,R2,R3
   \   0000002E   8A42               CMP      R2,R1
   \   00000030   FAD3               BCC.N    ??_3g_send_0
    183            {}
    184            (*UART_ReadData)(result_code_buf,(34+len));
   \   00000032   ....               LDR.N    R2,??DataTable17  ;; send_OK
   \   00000034   02F10800           ADD      R0,R2,#+8
   \   00000038   5268               LDR      R2,[R2, #+4]
   \   0000003A   BDE87040           POP      {R4-R6,LR}
   \   0000003E   1047               BX       R2
    185          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   ....               LDR.N    R4,??DataTable23  ;; sendBuf
   \   00000002   2A46               MOV      R2,R5
   \   00000004   2146               MOV      R1,R4
   \   00000006   ........           B.W      Ring_ReadData
    186          
    187          

   \                                 In section .text, align 2, keep-with-next
    188          void _3g_send_by_group(u8 link_id,RING_BUFFER *ringbuf, u32 bufStartPoint, u32 bufEndPoint,u32 groupLen)
    189          //
    190          {
   \                     _3g_send_by_group:
   \   00000000   2DE9F84F           PUSH     {R3-R11,LR}
   \   00000004   8246               MOV      R10,R0
   \   00000006   0846               MOV      R0,R1
   \   00000008   0A9C               LDR      R4,[SP, #+40]
    191            u32 len;
    192            if(bufEndPoint >= bufStartPoint)
   \   0000000A   9342               CMP      R3,R2
   \   0000000C   2EBF               ITEE     CS 
   \   0000000E   9F1A               SUBCS    R7,R3,R2
   \   00000010   C2F57A71           RSBCC    R1,R2,#+1000
   \   00000014   5F18               ADDCC    R7,R3,R1
    193              len = bufEndPoint - bufStartPoint;
    194            else
    195              len = (send_buf_len - bufStartPoint) + bufEndPoint;
    196            Ring_ReadData(ringbuf, sendBuf, len);
   \   00000016   ........           LDR.W    R8,??DataTable23  ;; sendBuf
   \   0000001A   3A46               MOV      R2,R7
   \   0000001C   4146               MOV      R1,R8
   \   0000001E   ........           BL       Ring_ReadData
    197            u32 start = 0;
   \   00000022   0025               MOVS     R5,#+0
    198            u32 end = len;
   \   00000024   0097               STR      R7,[SP, #+0]
   \   00000026   04F1180B           ADD      R11,R4,#+24
   \   0000002A   ....               LDR.N    R6,??DataTable17  ;; send_OK
   \   0000002C   1AE0               B.N      ??_3g_send_by_group_0
    199            while(len>groupLen)
    200            {
    201              send_at_sendFromBuf(link_id, sendBuf, start, start+groupLen);
    202              delay_us(2000000);
    203              while((send_OK == FALSE) && (send_ERROR) == FALSE)
    204              {
    205               // check_send_ERROR(groupLen);
    206                 // if(send_ERROR == FALSE)
    207                check_send_OK(groupLen);
    208                if(send_OK == FALSE)
    209                {
    210                 (*UART_ReadData)(result_code_buf,(24+groupLen));
   \                     ??_3g_send_by_group_1:
   \   0000002E   5946               MOV      R1,R11
   \   00000030   ........           BL       ??Subroutine10_0
    211                  send_ERROR = FALSE;
   \                     ??CrossCallReturnLabel_16:
   \   00000034   0020               MOVS     R0,#+0
   \   00000036   7070               STRB     R0,[R6, #+1]
    212                  send_at_sendFromBuf(link_id, sendBuf, start, start+groupLen); //重发
   \   00000038   ........           BL       ?Subroutine6
    213                }
   \                     ??CrossCallReturnLabel_21:
   \   0000003C   3078               LDRB     R0,[R6, #+0]
   \   0000003E   7178               LDRB     R1,[R6, #+1]
   \   00000040   0843               ORRS     R0,R1,R0
   \   00000042   0CD1               BNE.N    ??_3g_send_by_group_2
   \   00000044   2046               MOV      R0,R4
   \   00000046   ........           BL       check_send_OK
   \   0000004A   7268               LDR      R2,[R6, #+4]
   \   0000004C   3078               LDRB     R0,[R6, #+0]
   \   0000004E   0028               CMP      R0,#+0
   \   00000050   EDD0               BEQ.N    ??_3g_send_by_group_1
    214                else if(send_OK == TRUE)
   \   00000052   0128               CMP      R0,#+1
   \   00000054   F2D1               BNE.N    ??CrossCallReturnLabel_21
    215                {
    216                  (*UART_ReadData)(result_code_buf,(34+groupLen));
   \   00000056   ........           BL       ?Subroutine9
    217                  send_OK = FALSE;
   \                     ??CrossCallReturnLabel_18:
   \   0000005A   0020               MOVS     R0,#+0
   \   0000005C   3070               STRB     R0,[R6, #+0]
    218                  break;
    219                }
    220              }
    221              
    222              start = start+groupLen;
   \                     ??_3g_send_by_group_2:
   \   0000005E   4D46               MOV      R5,R9
    223              len = end-start;
   \   00000060   0098               LDR      R0,[SP, #+0]
   \   00000062   471B               SUBS     R7,R0,R5
   \                     ??_3g_send_by_group_0:
   \   00000064   04EB0509           ADD      R9,R4,R5
   \   00000068   BC42               CMP      R4,R7
   \   0000006A   05D2               BCS.N    ??_3g_send_by_group_3
   \   0000006C   ........           BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_20:
   \   00000070   ....               LDR.N    R0,??DataTable19  ;; 0x1e8480
   \   00000072   ........           BL       delay_us
   \   00000076   E1E7               B.N      ??CrossCallReturnLabel_21
    224              
    225            }
    226            send_at_sendFromBuf(link_id, sendBuf, start, end);
   \                     ??_3g_send_by_group_3:
   \   00000078   009B               LDR      R3,[SP, #+0]
   \   0000007A   05E0               B.N      ??_3g_send_by_group_4
    227            while((send_OK == FALSE) && (send_ERROR) == FALSE)
    228            { 
    229              //check_send_ERROR(groupLen);
    230                 // if(send_ERROR == FALSE)
    231                    check_send_OK(groupLen);
    232              if(send_ERROR == TRUE)
    233                {
    234                  (*UART_ReadData)(result_code_buf,(24+groupLen));
   \                     ??_3g_send_by_group_5:
   \   0000007C   5946               MOV      R1,R11
   \   0000007E   ........           BL       ??Subroutine10_0
    235                  send_ERROR = FALSE;
   \                     ??CrossCallReturnLabel_15:
   \   00000082   0020               MOVS     R0,#+0
   \   00000084   7070               STRB     R0,[R6, #+1]
    236                  send_at_sendFromBuf(link_id, sendBuf, start, start+groupLen); //重发
   \   00000086   4B46               MOV      R3,R9
    237                }
   \                     ??_3g_send_by_group_4:
   \   00000088   ........           BL       ??Subroutine11_0
   \                     ??CrossCallReturnLabel_19:
   \   0000008C   3078               LDRB     R0,[R6, #+0]
   \   0000008E   7178               LDRB     R1,[R6, #+1]
   \   00000090   0843               ORRS     R0,R1,R0
   \   00000092   0DD1               BNE.N    ??_3g_send_by_group_6
   \   00000094   2046               MOV      R0,R4
   \   00000096   ........           BL       check_send_OK
   \   0000009A   7268               LDR      R2,[R6, #+4]
   \   0000009C   7078               LDRB     R0,[R6, #+1]
   \   0000009E   0128               CMP      R0,#+1
   \   000000A0   ECD0               BEQ.N    ??_3g_send_by_group_5
    238                else if(send_OK == TRUE)
   \   000000A2   3078               LDRB     R0,[R6, #+0]
   \   000000A4   0128               CMP      R0,#+1
   \   000000A6   F1D1               BNE.N    ??CrossCallReturnLabel_19
    239                {
    240                  (*UART_ReadData)(result_code_buf,(34+groupLen));
   \   000000A8   ........           BL       ?Subroutine9
    241                  send_OK = FALSE;
   \                     ??CrossCallReturnLabel_17:
   \   000000AC   0020               MOVS     R0,#+0
   \   000000AE   3070               STRB     R0,[R6, #+0]
    242                  break;
    243                }
    244                else 
    245                {
    246                 
    247                }
    248            }
    249            delay_us(10000);
   \                     ??_3g_send_by_group_6:
   \   000000B0   42F21070           MOVW     R0,#+10000
   \   000000B4   BDE8F24F           POP      {R1,R4-R11,LR}
   \   000000B8   ........           B.W      delay_us
    250          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine9:
   \   00000000   04F12201           ADD      R1,R4,#+34
   \   00000004                      REQUIRE ??Subroutine10_0
   \   00000004                      ;; // Fall through to label ??Subroutine10_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine10_0:
   \   00000000   06F10800           ADD      R0,R6,#+8
   \   00000004   1047               BX       R2

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine6:
   \   00000000   4B46               MOV      R3,R9
   \   00000002   00BF               Nop      
   \   00000004                      REQUIRE ??Subroutine11_0
   \   00000004                      ;; // Fall through to label ??Subroutine11_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine11_0:
   \   00000000   2A46               MOV      R2,R5
   \   00000002   4146               MOV      R1,R8
   \   00000004   5046               MOV      R0,R10
   \   00000006   ....               B.N      send_at_sendFromBuf
    251          

   \                                 In section .text, align 2, keep-with-next
    252          void send_to_pc(RING_BUFFER *ringbuf, u32 bufStartPoint, u32 bufEndPoint)
    253          {
   \                     send_to_pc:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   ADF57A7D           SUB      SP,SP,#+1000
    254            u8 send_buf[send_buf_len];
    255            u32 len;
    256            if(bufEndPoint>bufStartPoint)
   \   00000006   9142               CMP      R1,R2
   \   00000008   32BF               ITEE     CC 
   \   0000000A   541A               SUBCC    R4,R2,R1
   \   0000000C   C1F57A71           RSBCS    R1,R1,#+1000
   \   00000010   5418               ADDCS    R4,R2,R1
    257              len = bufEndPoint-bufStartPoint;
    258            else
    259              len = (send_buf_len - bufStartPoint) + bufEndPoint;
    260            Ring_ReadData(ringbuf, send_buf, len);
   \   00000012   2246               MOV      R2,R4
   \   00000014   00A9               ADD      R1,SP,#+0
   \   00000016   ........           BL       Ring_ReadData
    261            for(int i=0;i<len;i++)
   \   0000001A   0025               MOVS     R5,#+0
   \   0000001C   ....               LDR.N    R6,??DataTable25  ;; 0x40004400
   \   0000001E   0BE0               B.N      ??send_to_pc_0
    262            {
    263              USART_SendData(UART_USING, send_buf[i]);
   \                     ??send_to_pc_1:
   \   00000020   00A8               ADD      R0,SP,#+0
   \   00000022   295C               LDRB     R1,[R5, R0]
   \   00000024   3046               MOV      R0,R6
   \   00000026   ........           BL       USART_SendData
    264              while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
   \                     ??send_to_pc_2:
   \   0000002A   4021               MOVS     R1,#+64
   \   0000002C   3046               MOV      R0,R6
   \   0000002E   ........           BL       USART_GetFlagStatus
   \   00000032   0028               CMP      R0,#+0
   \   00000034   F9D0               BEQ.N    ??send_to_pc_2
    265            }
   \   00000036   6D1C               ADDS     R5,R5,#+1
   \                     ??send_to_pc_0:
   \   00000038   A542               CMP      R5,R4
   \   0000003A   F1D3               BCC.N    ??send_to_pc_1
    266          }
   \   0000003C   0DF57A7D           ADD      SP,SP,#+1000
   \   00000040   70BD               POP      {R4-R6,PC}       ;; return
    267          /*
    268          void check_send_OK(u32 dataLen)
    269          {
    270            u32 start = UART_BUF.RingBufStartPointer;
    271            u32 end = UART_BUF.RingBufEndPointer;
    272            u32 received_len;
    273            if(end > start)
    274              received_len = end - start;
    275            else 
    276              received_len = RINGBUFFERSIZE-start+end;
    277            while(received_len < (34+dataLen))
    278            {
    279              start = UART_BUF.RingBufStartPointer;
    280              end = UART_BUF.RingBufEndPointer;
    281              if(end > start)
    282                received_len = end - start;
    283              else 
    284                received_len = RINGBUFFERSIZE - start + end;
    285            }
    286            
    287            //if(received_len == (34+dataLen))
    288            if((UART_BUF.RingBuf[UART_BUF.RingBufEndPointer-4] == 'O') && (UART_BUF.RingBuf[UART_BUF.RingBufEndPointer-3] == 'K'))
    289              send_OK = TRUE;
    290          }
    291          */
    292          
    293          

   \                                 In section .text, align 2, keep-with-next
    294          void check_send_ERROR(u32 dataLen)
    295          {
   \                     check_send_ERROR:
   \   00000000   10B5               PUSH     {R4,LR}
    296            u32 start = UART_BUF.RingBufStartPointer;
    297            u32 end = UART_BUF.RingBufEndPointer;
    298            u32 received_len= 0;
   \   00000002   0021               MOVS     R1,#+0
   \   00000004   ....               LDR.N    R2,??DataTable26  ;; UART2RingBuf
   \   00000006   D368               LDR      R3,[R2, #+12]
   \   00000008   00E0               B.N      ??check_send_ERROR_0
    299            while(received_len < (24+dataLen))
    300            {
    301              start = UART_BUF.RingBufStartPointer;
    302              end = UART_BUF.RingBufEndPointer;
    303              if(end > start)
    304                received_len = end - start;
   \                     ??check_send_ERROR_1:
   \   0000000A   191B               SUBS     R1,R3,R4
   \                     ??check_send_ERROR_0:
   \   0000000C   00F11804           ADD      R4,R0,#+24
   \   00000010   A142               CMP      R1,R4
   \   00000012   06D2               BCS.N    ??check_send_ERROR_2
   \   00000014   9468               LDR      R4,[R2, #+8]
   \   00000016   9C42               CMP      R4,R3
   \   00000018   F7D3               BCC.N    ??check_send_ERROR_1
    305              else 
    306                received_len = RINGBUFFERSIZE - start + end;
   \   0000001A   C4F57A74           RSB      R4,R4,#+1000
   \   0000001E   1919               ADDS     R1,R3,R4
   \   00000020   F4E7               B.N      ??check_send_ERROR_0
    307            }
    308            if((UART_BUF.RingBuf[UART_BUF.RingBufEndPointer-4] == 'O') && (UART_BUF.RingBuf[UART_BUF.RingBufEndPointer-3] == 'R'))
   \                     ??check_send_ERROR_2:
   \   00000022   1068               LDR      R0,[R2, #+0]
   \   00000024   1818               ADDS     R0,R3,R0
   \   00000026   10F8041C           LDRB     R1,[R0, #-4]
   \   0000002A   4F29               CMP      R1,#+79
   \   0000002C   06D1               BNE.N    ??check_send_ERROR_3
   \   0000002E   001F               SUBS     R0,R0,#+4
   \   00000030   4078               LDRB     R0,[R0, #+1]
   \   00000032   5228               CMP      R0,#+82
   \   00000034   02D1               BNE.N    ??check_send_ERROR_3
    309              send_ERROR = TRUE;
   \   00000036   ....               LDR.N    R0,??DataTable17  ;; send_OK
   \   00000038   0121               MOVS     R1,#+1
   \   0000003A   4170               STRB     R1,[R0, #+1]
    310          }
   \                     ??check_send_ERROR_3:
   \   0000003C   10BD               POP      {R4,PC}          ;; return
    311          
    312          

   \                                 In section .text, align 2, keep-with-next
    313          void send_without_check(u8 link_id,RING_BUFFER *ringbuf, u32 bufStartPoint, u32 bufEndPoint)
    314          {
   \                     send_without_check:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0846               MOV      R0,R1
    315            u32 len;
    316            if(bufEndPoint>bufStartPoint)
   \   00000004   9A42               CMP      R2,R3
   \   00000006   32BF               ITEE     CC 
   \   00000008   9D1A               SUBCC    R5,R3,R2
   \   0000000A   C2F57A71           RSBCS    R1,R2,#+1000
   \   0000000E   5D18               ADDCS    R5,R3,R1
    317              len = bufEndPoint-bufStartPoint;
    318            else
    319              len = (send_buf_len - bufStartPoint) + bufEndPoint;
    320            Ring_ReadData(ringbuf, sendBuf, len);
   \   00000010   ........           BL       ?Subroutine8
    321            send_at_sendFromBuf(3, sendBuf, 0, len);
   \                     ??CrossCallReturnLabel_13:
   \   00000014   2B46               MOV      R3,R5
   \   00000016   0022               MOVS     R2,#+0
   \   00000018   2146               MOV      R1,R4
   \   0000001A   0320               MOVS     R0,#+3
   \   0000001C   01B0               ADD      SP,SP,#+4
   \   0000001E   BDE83040           POP      {R4,R5,LR}
   \   00000022   ....               B.N      send_at_sendFromBuf
    322          }
    323          
    324          

   \                                 In section .text, align 2, keep-with-next
    325          void send_ascii()
    326          //测试用
    327          {
   \                     send_ascii:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   C0B0               SUB      SP,SP,#+256
    328            u8 ascii[256];
    329            ascii[0] = 0x00;
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   8DF80000           STRB     R0,[SP, #+0]
    330            for(int i=1; i<256; i++)
   \   0000000A   0120               MOVS     R0,#+1
   \   0000000C   00AA               ADD      R2,SP,#+0
    331            {
    332              ascii[i] = ascii[0] + i;
   \                     ??send_ascii_0:
   \   0000000E   9DF80010           LDRB     R1,[SP, #+0]
   \   00000012   4118               ADDS     R1,R0,R1
   \   00000014   8154               STRB     R1,[R0, R2]
    333            }
   \   00000016   401C               ADDS     R0,R0,#+1
   \   00000018   FF28               CMP      R0,#+255
   \   0000001A   F8DD               BLE.N    ??send_ascii_0
    334            //send_at_sendFromBuf(3, ascii, 0, 16);
    335            //delay_us(2000000);
    336            //send_at_sendFromBuf(3, ascii, 16, 32);
    337            //delay_us(2000000);
    338            send_at_sendFromBuf(3, ascii, 32, 48);
   \   0000001C   3023               MOVS     R3,#+48
   \   0000001E   ........           BL       ?Subroutine4
    339            delay_us(2000000);
   \                     ??CrossCallReturnLabel_24:
   \   00000022   ....               LDR.N    R4,??DataTable19  ;; 0x1e8480
   \   00000024   2046               MOV      R0,R4
   \   00000026   ........           BL       delay_us
    340             send_at_sendFromBuf(3, ascii, 32, 35);
   \   0000002A   2323               MOVS     R3,#+35
   \   0000002C   ........           BL       ?Subroutine4
    341            delay_us(2000000);
   \                     ??CrossCallReturnLabel_23:
   \   00000030   2046               MOV      R0,R4
   \   00000032   ........           BL       delay_us
    342             send_at_sendFromBuf(3, ascii, 35, 48);
   \   00000036   3023               MOVS     R3,#+48
   \   00000038   2322               MOVS     R2,#+35
   \   0000003A   ........           BL       ??Subroutine12_0
    343            delay_us(2000000);
   \                     ??CrossCallReturnLabel_22:
   \   0000003E   2046               MOV      R0,R4
   \   00000040   ........           BL       delay_us
    344            /*
    345            send_at_sendFromBuf(3, ascii, 48, 64);
    346            delay_us(2000000);
    347            send_at_sendFromBuf(3, ascii, 64, 80);
    348            delay_us(2000000);
    349            send_at_sendFromBuf(3, ascii, 80, 96);
    350            */
    351          }
   \   00000044   40B0               ADD      SP,SP,#+256
   \   00000046   10BD               POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine4:
   \   00000000   2022               MOVS     R2,#+32
   \   00000002   00BF               Nop      
   \   00000004                      REQUIRE ??Subroutine12_0
   \   00000004                      ;; // Fall through to label ??Subroutine12_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine12_0:
   \   00000000   00A9               ADD      R1,SP,#+0
   \   00000002   0320               MOVS     R0,#+3
   \   00000004   ....               B.N      send_at_sendFromBuf
    352          

   \                                 In section .text, align 4, keep-with-next
    353          void enable_transparent_transfer(int link_id)
    354          {
   \                     enable_transparent_transfer:
   \   00000000   1FB5               PUSH     {R0-R4,LR}
   \   00000002   0446               MOV      R4,R0
    355            instr_len = 14;
   \   00000004   ....               LDR.N    R0,??DataTable20  ;; instr_len
   \   00000006   0E21               MOVS     R1,#+14
   \   00000008   0160               STR      R1,[R0, #+0]
    356            u8 at_instr[14] = "at^ipentrans=1";
   \   0000000A   00A8               ADD      R0,SP,#+0
   \   0000000C   0549               LDR.N    R1,??enable_transparent_transfer_0  ;; `?<Constant "at^ipentrans=1">`
   \   0000000E   0E22               MOVS     R2,#+14
   \   00000010   ........           BL       __aeabi_memcpy
    357            at_instr[13] = link_id + 0x30;
   \   00000014   04F13000           ADD      R0,R4,#+48
   \   00000018   8DF80D00           STRB     R0,[SP, #+13]
    358            send_at_general(at_instr, instr_len);
   \   0000001C   0E21               MOVS     R1,#+14
   \   0000001E   ........           BL       ?Subroutine5
    359          }
   \                     ??CrossCallReturnLabel_6:
   \   00000022   1FBD               POP      {R0-R4,PC}       ;; return
   \                     ??enable_transparent_transfer_0:
   \   00000024   ........           DC32     `?<Constant "at^ipentrans=1">`
    360          

   \                                 In section .text, align 4, keep-with-next
    361          void disable_transparent_transfer()
    362          {
   \                     disable_transparent_transfer:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    363            u8 at_instr[3]="+++";
   \   00000002   00A8               ADD      R0,SP,#+0
   \   00000004   0A49               LDR.N    R1,??disable_transparent_transfer_0  ;; `?<Constant "+++">`
   \   00000006   0322               MOVS     R2,#+3
   \   00000008   ........           BL       __aeabi_memcpy
    364            for(int i=0;i<3;i++)
   \   0000000C   0024               MOVS     R4,#+0
   \   0000000E   ....               LDR.N    R5,??DataTable25  ;; 0x40004400
    365            {
    366              USART_SendData(UART_USING, at_instr[i]);
   \                     ??disable_transparent_transfer_1:
   \   00000010   00A8               ADD      R0,SP,#+0
   \   00000012   215C               LDRB     R1,[R4, R0]
   \   00000014   2846               MOV      R0,R5
   \   00000016   ........           BL       USART_SendData
    367              while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
   \                     ??disable_transparent_transfer_2:
   \   0000001A   4021               MOVS     R1,#+64
   \   0000001C   2846               MOV      R0,R5
   \   0000001E   ........           BL       USART_GetFlagStatus
   \   00000022   0028               CMP      R0,#+0
   \   00000024   F9D0               BEQ.N    ??disable_transparent_transfer_2
    368            }
   \   00000026   641C               ADDS     R4,R4,#+1
   \   00000028   032C               CMP      R4,#+3
   \   0000002A   F1DB               BLT.N    ??disable_transparent_transfer_1
    369          }
   \   0000002C   31BD               POP      {R0,R4,R5,PC}    ;; return
   \   0000002E   00BF               Nop      
   \                     ??disable_transparent_transfer_0:
   \   00000030   ........           DC32     `?<Constant "+++">`
    370          

   \                                 In section .text, align 2, keep-with-next
    371          u32 read_to_sendBuf(RING_BUFFER *ringbuf, u32 bufStartPoint, u32 bufEndPoint)
    372          {
   \                     read_to_sendBuf:
   \   00000000   10B5               PUSH     {R4,LR}
    373            u32 len;
    374            if(bufEndPoint >= bufStartPoint)
   \   00000002   8A42               CMP      R2,R1
   \   00000004   2EBF               ITEE     CS 
   \   00000006   541A               SUBCS    R4,R2,R1
   \   00000008   C1F57A71           RSBCC    R1,R1,#+1000
   \   0000000C   5418               ADDCC    R4,R2,R1
    375              len = bufEndPoint - bufStartPoint;
    376            else
    377              len = (send_buf_len - bufStartPoint) + bufEndPoint;
    378            Ring_ReadData(ringbuf, sendBuf, len);
   \   0000000E   2246               MOV      R2,R4
   \   00000010   ....               LDR.N    R1,??DataTable23  ;; sendBuf
   \   00000012   ........           BL       Ring_ReadData
    379            return len; 
   \   00000016   2046               MOV      R0,R4
   \   00000018   10BD               POP      {R4,PC}          ;; return
    380          }
    381          

   \                                 In section .text, align 4, keep-with-next
    382          void send_transparent_transfer( u32 len )
    383          {
   \                     send_transparent_transfer:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0446               MOV      R4,R0
    384            for(int i=0;i<len-2;i++)
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   1349               LDR.N    R1,??send_transparent_transfer_0  ;; num_of_tri_plus
   \   00000008   0A68               LDR      R2,[R1, #+0]
   \   0000000A   ....               LDR.N    R5,??DataTable23  ;; sendBuf
   \   0000000C   0EE0               B.N      ??send_transparent_transfer_1
    385            {
    386              if(sendBuf[i]=='+' && sendBuf[i+1]=='+' && sendBuf[i+2]=='+' )
   \                     ??send_transparent_transfer_2:
   \   0000000E   435D               LDRB     R3,[R0, R5]
   \   00000010   2B2B               CMP      R3,#+43
   \   00000012   0AD1               BNE.N    ??send_transparent_transfer_3
   \   00000014   4319               ADDS     R3,R0,R5
   \   00000016   5B78               LDRB     R3,[R3, #+1]
   \   00000018   2B2B               CMP      R3,#+43
   \   0000001A   06D1               BNE.N    ??send_transparent_transfer_3
   \   0000001C   4319               ADDS     R3,R0,R5
   \   0000001E   9B78               LDRB     R3,[R3, #+2]
   \   00000020   2B2B               CMP      R3,#+43
   \   00000022   02D1               BNE.N    ??send_transparent_transfer_3
    387              { 
    388                sendBuf[i]='*';
   \   00000024   2A23               MOVS     R3,#+42
   \   00000026   4355               STRB     R3,[R0, R5]
    389                num_of_tri_plus ++;
   \   00000028   521C               ADDS     R2,R2,#+1
    390              }
    391            }
   \                     ??send_transparent_transfer_3:
   \   0000002A   401C               ADDS     R0,R0,#+1
   \                     ??send_transparent_transfer_1:
   \   0000002C   A31E               SUBS     R3,R4,#+2
   \   0000002E   9842               CMP      R0,R3
   \   00000030   EDD3               BCC.N    ??send_transparent_transfer_2
   \   00000032   0A60               STR      R2,[R1, #+0]
    392            for(int i=0;i<len;i++)
   \   00000034   0026               MOVS     R6,#+0
   \   00000036   ....               LDR.N    R7,??DataTable25  ;; 0x40004400
   \   00000038   08E0               B.N      ??send_transparent_transfer_4
    393            {
    394              USART_SendData(UART_USING, sendBuf[i]);
   \                     ??send_transparent_transfer_5:
   \   0000003A   715D               LDRB     R1,[R6, R5]
   \   0000003C   3846               MOV      R0,R7
   \   0000003E   ........           BL       USART_SendData
    395              while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
   \                     ??send_transparent_transfer_6:
   \   00000042   ........           BL       ?Subroutine3
    396            }
   \                     ??CrossCallReturnLabel_3:
   \   00000046   0028               CMP      R0,#+0
   \   00000048   FBD0               BEQ.N    ??send_transparent_transfer_6
   \   0000004A   761C               ADDS     R6,R6,#+1
   \                     ??send_transparent_transfer_4:
   \   0000004C   A642               CMP      R6,R4
   \   0000004E   F4D3               BCC.N    ??send_transparent_transfer_5
    397          }
   \   00000050   F1BD               POP      {R0,R4-R7,PC}    ;; return
   \   00000052   00BF               Nop      
   \                     ??send_transparent_transfer_0:
   \   00000054   ........           DC32     num_of_tri_plus
    398          

   \                                 In section .text, align 2, keep-with-next
    399          void send_line_id(int x)
    400          {
   \                     send_line_id:
   \   00000000   10B5               PUSH     {R4,LR}
    401            u8 data = x ;
    402            USART_SendData(UART_USING, data);
   \   00000002   ....               LDR.N    R4,??DataTable25  ;; 0x40004400
   \   00000004   C1B2               UXTB     R1,R0
   \   00000006   ....               B.N      ?Subroutine0
    403            while(USART_GetFlagStatus(UART_USING, USART_FLAG_TC) == RESET);
    404          }
    405          

   \                                 In section .text, align 2, keep-with-next
    406          u32 get_received_len()
    407          {
    408            u32 received_len;
    409            if(UART_BUF.RingBufStartPointer <= UART_BUF.RingBufEndPointer)
   \                     get_received_len:
   \   00000000   ....               LDR.N    R0,??DataTable26  ;; UART2RingBuf
   \   00000002   8168               LDR      R1,[R0, #+8]
   \   00000004   C268               LDR      R2,[R0, #+12]
   \   00000006   8A42               CMP      R2,R1
   \   00000008   01D3               BCC.N    ??get_received_len_0
    410            {
    411              received_len = UART_BUF.RingBufEndPointer - UART_BUF.RingBufStartPointer;
   \   0000000A   501A               SUBS     R0,R2,R1
   \   0000000C   7047               BX       LR
    412            }
    413            else
    414            {
    415              received_len = UART2RingBuf.RingBufSize - UART_BUF.RingBufStartPointer + UART_BUF.RingBufEndPointer;
   \                     ??get_received_len_0:
   \   0000000E   4068               LDR      R0,[R0, #+4]
   \   00000010   401A               SUBS     R0,R0,R1
   \   00000012   1018               ADDS     R0,R2,R0
    416            }
    417            return received_len;
   \   00000014   7047               BX       LR               ;; return
    418          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     send_OK

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   80841E00           DC32     0x1e8480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     instr_len

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   ........           DC32     sendBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   00440040           DC32     0x40004400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   ........           DC32     UART2RingBuf

   \                                 In section .rodata, align 4
   \                     `?<Constant {97, 116, 13}>`:
   \   00000000   61740D00           DC8 97, 116, 13, 0

   \                                 In section .rodata, align 2
   \                     `?<Constant "at">`:
   \   00000000   6174               DC8 61H, 74H

   \                                 In section .rodata, align 4
   \                     `?<Constant "at^ipinit=\\"3gnet\\"">`:
   \   00000000   61745E697069       DC8 61H, 74H, 5EH, 69H, 70H, 69H, 6EH, 69H
   \              6E69        
   \   00000008   743D2233676E       DC8 74H, 3DH, 22H, 33H, 67H, 6EH, 65H, 74H
   \              6574        
   \   00000010   22                 DC8 22H
   \   00000011   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "at^ipopen=3,\\"tcp\\",\\"21...">`:
   \   00000000   61745E69706F       DC8 61H, 74H, 5EH, 69H, 70H, 6FH, 70H, 65H
   \              7065        
   \   00000008   6E3D332C2274       DC8 6EH, 3DH, 33H, 2CH, 22H, 74H, 63H, 70H
   \              6370        
   \   00000010   222C22323131       DC8 22H, 2CH, 22H, 32H, 31H, 31H, 2EH, 38H
   \              2E38        
   \   00000018   372E3233352E       DC8 37H, 2EH, 32H, 33H, 35H, 2EH, 31H, 35H
   \              3135        
   \   00000020   37222C383838       DC8 37H, 22H, 2CH, 38H, 38H, 38H, 38H, 2CH
   \              382C        
   \   00000028   3333303030         DC8 33H, 33H, 30H, 30H, 30H
   \   0000002D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "at^ipsend=3,\\"hello\\"">`:
   \   00000000   61745E697073       DC8 61H, 74H, 5EH, 69H, 70H, 73H, 65H, 6EH
   \              656E        
   \   00000008   643D332C2268       DC8 64H, 3DH, 33H, 2CH, 22H, 68H, 65H, 6CH
   \              656C        
   \   00000010   6C6F22             DC8 6CH, 6FH, 22H
   \   00000013   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "at^reset=1">`:
   \   00000000   61745E726573       DC8 61H, 74H, 5EH, 72H, 65H, 73H, 65H, 74H
   \              6574        
   \   00000008   3D31               DC8 3DH, 31H
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "at^ipsend=1,\\"">`:
   \   00000000   61745E697073       DC8 61H, 74H, 5EH, 69H, 70H, 73H, 65H, 6EH
   \              656E        
   \   00000008   643D312C22         DC8 64H, 3DH, 31H, 2CH, 22H
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "at^ipentrans=1">`:
   \   00000000   61745E697065       DC8 61H, 74H, 5EH, 69H, 70H, 65H, 6EH, 74H
   \              6E74        
   \   00000008   72616E733D31       DC8 72H, 61H, 6EH, 73H, 3DH, 31H
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "+++">`:
   \   00000000   2B2B2B             DC8 2BH, 2BH, 2BH
   \   00000003   00                 DC8 0

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     _3g_send                         16
     _3g_send_by_group                40
     at_initial_sequence              16
     check_send_ERROR                  8
     disable_transparent_transfer     16
     enable_transparent_transfer      24
     get_received_len                  0
     read_to_sendBuf                   8
     send_ascii                      264
     send_at                           8
     send_at0                          8
     send_at1                          8
     send_at_general                  24
     send_at_ipinit                   24
     send_at_ipopen                   56
     send_at_reset                    16
     send_at_send                     24
     send_at_sendFromBuf            1040
     send_line_id                      8
     send_to_pc                     1016
     send_transparent_transfer        24
     send_without_check               16


   Section sizes:

     Function/Label                            Bytes
     --------------                            -----
     instr_len                                    4
     sendBuf                                   1000
     send_OK                                   1008
     send_ERROR
     UART_ReadData
     result_code_buf
     num_of_tri_plus                              4
     send_at0                                    40
     ?Subroutine0                                16
     ?Subroutine2                                 8
     send_at1                                    32
     send_at_general                             54
     ?Subroutine3                                 8
     send_at                                     36
     send_at_ipinit                              24
     ?Subroutine1                                12
     ?Subroutine5                                 4
     send_at_ipopen                              36
     send_at_send                                28
     send_at_reset                               32
     send_at_sendFromBuf                        112
     at_initial_sequence                         96
     ?Subroutine7                                 8
     _3g_send                                    64
     ?Subroutine8                                10
     _3g_send_by_group                          188
     ?Subroutine9                                 4
     ??Subroutine10_0                             6
     ?Subroutine6                                 4
     ??Subroutine11_0                             8
     send_to_pc                                  66
     check_send_ERROR                            62
     send_without_check                          36
     send_ascii                                  72
     ?Subroutine4                                 4
     ??Subroutine12_0                             6
     enable_transparent_transfer                 40
     disable_transparent_transfer                52
     read_to_sendBuf                             26
     send_transparent_transfer                   88
     send_line_id                                 8
     get_received_len                            22
     ??DataTable17                                4
     ??DataTable19                                4
     ??DataTable20                                4
     ??DataTable23                                4
     ??DataTable25                                4
     ??DataTable26                                4
     ?<Constant {97, 116, 13}>                    4
     ?<Constant "at">                             2
     ?<Constant "at^ipinit=\"3gnet\"">           20
     ?<Constant "at^ipopen=3,\"tcp\",\"21...">   48
     ?<Constant "at^ipsend=3,\"hello\"">         20
     ?<Constant "at^reset=1">                    12
     ?<Constant "at^ipsend=1,\"">                16
     ?<Constant "at^ipentrans=1">                16
     ?<Constant "+++">                            4

 
 1 008 bytes in section .bss
 1 008 bytes in section .data
   142 bytes in section .rodata
 1 336 bytes in section .text
 
 1 336 bytes of CODE  memory
   142 bytes of CONST memory
 2 016 bytes of DATA  memory

Errors: none
Warnings: none
