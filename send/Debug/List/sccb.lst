###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.40.0.51500/W32 for ARM     28/Apr/2011  09:50:58 #
# Copyright (C) 1999-2009 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Documents and Settings\Administrator\桌面\2.4G\Demo\s #
#                    ource\sccb.c                                             #
#    Command line =  "C:\Documents and Settings\Administrator\桌面\2.4G\Demo\ #
#                    source\sccb.c" -lC "C:\Documents and                     #
#                    Settings\Administrator\桌面\2.4G\Demo\project\EWARMv5\De #
#                    bug\List\" -lb "C:\Documents and                         #
#                    Settings\Administrator\桌面\2.4G\Demo\project\EWARMv5\De #
#                    bug\List\" -o "C:\Documents and                          #
#                    Settings\Administrator\桌面\2.4G\Demo\project\EWARMv5\De #
#                    bug\Obj\" --debug --endian=little --cpu=Cortex-M3 -e     #
#                    --fpu=None --dlib_config "C:\Program Files\IAR           #
#                    Systems\Embedded Workbench 5.4_2\arm\INC\DLib_Config_Ful #
#                    l.h" -I "C:\Documents and Settings\Administrator\桌面\2. #
#                    4G\Demo\project\EWARMv5\..\..\include\" -I               #
#                    "C:\Documents and Settings\Administrator\桌面\2.4G\Demo\ #
#                    project\EWARMv5\..\..\source\" -I "C:\Documents and      #
#                    Settings\Administrator\桌面\2.4G\Demo\project\EWARMv5\.. #
#                    \..\..\FWLib\library\inc\" -I "C:\Documents and          #
#                    Settings\Administrator\桌面\2.4G\Demo\project\EWARMv5\.. #
#                    \..\..\USBLib\library\inc\" -I "C:\Documents and         #
#                    Settings\Administrator\桌面\2.4G\Demo\project\EWARMv5\.. #
#                    \..\fatfs\" -I "C:\Program Files\IAR Systems\Embedded    #
#                    Workbench 5.4_2\arm\INC\" -Ohz                           #
#    List file    =  C:\Documents and Settings\Administrator\桌面\2.4G\Demo\p #
#                    roject\EWARMv5\Debug\List\sccb.lst                       #
#    Object file  =  C:\Documents and Settings\Administrator\桌面\2.4G\Demo\p #
#                    roject\EWARMv5\Debug\Obj\sccb.o                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\桌面\2.4G\Demo\source\sccb.c
      1          
      2          
      3          /*
      4          GUANFU_WANG
      5          */
      6          
      7          #include "sccb.h"
      8          #include "delay.h"
      9          #include "stm32f10x_lib.h"
     10          /*
     11          -----------------------------------------------
     12             功能: 初始化模拟SCCB接口
     13             参数: 无
     14           返回值: 无
     15          -----------------------------------------------
     16          */

   \                                 In section .text, align 2, keep-with-next
     17          void SCCB_GPIO_Config(void)
     18          {
   \                     SCCB_GPIO_Config:
   \   00000000   80B5               PUSH     {R7,LR}
     19            GPIO_InitTypeDef GPIO_InitStructure;
     20             /* Enable GPIOC  clock */
     21            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   \   00000002   ........           BL       ?Subroutine4
     22            GPIO_InitStructure.GPIO_Pin =  SCCB_SIC_BIT|SCCB_SID_BIT;
   \                     ??CrossCallReturnLabel_6:
   \   00000006   C020               MOVS     R0,#+192
   \   00000008   ....               B.N      ?Subroutine0
     23            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     24            GPIO_InitStructure.GPIO_Speed =GPIO_Speed_50MHz;
     25            GPIO_Init(GPIOC, &GPIO_InitStructure);
     26            
     27          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ADF80000           STRH     R0,[SP, #+0]
   \   00000004   1020               MOVS     R0,#+16
   \   00000006   8DF80300           STRB     R0,[SP, #+3]
   \   0000000A   0320               MOVS     R0,#+3
   \   0000000C   8DF80200           STRB     R0,[SP, #+2]
   \   00000010                      REQUIRE ??Subroutine5_0
   \   00000010                      ;; // Fall through to label ??Subroutine5_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??Subroutine5_0:
   \   00000000   00A9               ADD      R1,SP,#+0
   \   00000002   0248               LDR.N    R0,??Subroutine5_1  ;; 0x40011000
   \   00000004   ........           BL       GPIO_Init
   \   00000008   01BD               POP      {R0,PC}          ;; return
   \   0000000A   00BF               Nop      
   \                     ??Subroutine5_1:
   \   0000000C   00100140           DC32     0x40011000

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0121               MOVS     R1,#+1
   \   00000002   1020               MOVS     R0,#+16
   \   00000004   ........           B.W      RCC_APB2PeriphClockCmd

   \                                 In section .text, align 4, keep-with-next
     28          void SCCB_SID_GPIO_OUTPUT(void)
     29          {
   \                     SCCB_SID_GPIO_OUTPUT:
   \   00000000   80B5               PUSH     {R7,LR}
     30            GPIO_InitTypeDef GPIO_InitStructure;
     31             /* Enable GPIOC  clock */
     32            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   \   00000002   ........           BL       ?Subroutine4
     33            GPIO_InitStructure.GPIO_Pin =  SCCB_SID_BIT;
   \                     ??CrossCallReturnLabel_5:
   \   00000006   4020               MOVS     R0,#+64
   \   00000008                      REQUIRE ?Subroutine0
   \   00000008                      ;; // Fall through to label ?Subroutine0
     34            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     35            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     36            GPIO_Init(GPIOC, &GPIO_InitStructure);
     37          }

   \                                 In section .text, align 2, keep-with-next
     38          void SCCB_SID_GPIO_INPUT(void)
     39          {
   \                     SCCB_SID_GPIO_INPUT:
   \   00000000   80B5               PUSH     {R7,LR}
     40            GPIO_InitTypeDef GPIO_InitStructure;
     41             /* Enable GPIOC  clock */
     42            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   \   00000002   ........           BL       ?Subroutine4
     43            GPIO_InitStructure.GPIO_Pin =  SCCB_SID_BIT;
   \                     ??CrossCallReturnLabel_4:
   \   00000006   4020               MOVS     R0,#+64
   \   00000008   ADF80000           STRH     R0,[SP, #+0]
     44            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   \   0000000C   0420               MOVS     R0,#+4
   \   0000000E   8DF80300           STRB     R0,[SP, #+3]
     45           // GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     46            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   00000012   ....               B.N      ??Subroutine5_0
     47          }
     48          
     49          /*
     50          -----------------------------------------------
     51             功能: start命令,SCCB的起始信号
     52             参数: 无
     53           返回值: 无
     54          -----------------------------------------------
     55          */

   \                                 In section .text, align 2, keep-with-next
     56          void startSCCB(void)
     57          {
   \                     startSCCB:
   \   00000000   10B5               PUSH     {R4,LR}
     58              SCCB_SID_H();     //数据线高电平
   \   00000002   ........           BL       ?Subroutine2
     59              delay_us(800);
     60          
     61              SCCB_SIC_H();	   //在时钟线高的时候数据线由高至低
   \                     ??CrossCallReturnLabel_22:
   \   00000006   8020               MOVS     R0,#+128
   \   00000008   ........           BL       ??Subroutine2_0
     62              delay_us(800);
     63           
     64              SCCB_SID_L();
   \                     ??CrossCallReturnLabel_20:
   \   0000000C   4020               MOVS     R0,#+64
   \   0000000E   6060               STR      R0,[R4, #+4]
     65              delay_us(800);
   \   00000010   ........           BL       ??Subroutine6_0
     66          
     67              SCCB_SIC_L();	 //数据线恢复低电平，单操作函数必要
   \                     ??CrossCallReturnLabel_17:
   \   00000014   8020               MOVS     R0,#+128
   \   00000016   ....               B.N      ?Subroutine1
     68              delay_us(800);
     69          
     70          
     71          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   6060               STR      R0,[R4, #+4]
   \                     ??Subroutine1_0:
   \   00000002   4FF44870           MOV      R0,#+800
   \   00000006   BDE81040           POP      {R4,LR}
   \   0000000A   ........           B.W      delay_us

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   ....               LDR.N    R4,??DataTable1  ;; 0x40011010
   \   00000002   4020               MOVS     R0,#+64
   \                     ??Subroutine2_0:
   \   00000004   2060               STR      R0,[R4, #+0]
   \   00000006                      REQUIRE ??Subroutine6_0
   \   00000006                      ;; // Fall through to label ??Subroutine6_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine6_0:
   \   00000000   4FF44870           MOV      R0,#+800
   \   00000004   ........           B.W      delay_us
     72          /*
     73          -----------------------------------------------
     74             功能: stop命令,SCCB的停止信号
     75             参数: 无
     76           返回值: 无
     77          -----------------------------------------------
     78          */

   \                                 In section .text, align 2, keep-with-next
     79          void stopSCCB(void)
     80          {
   \                     stopSCCB:
   \   00000000   10B5               PUSH     {R4,LR}
     81              SCCB_SID_L();
   \   00000002   ....               LDR.N    R4,??DataTable1  ;; 0x40011010
   \   00000004   4020               MOVS     R0,#+64
   \   00000006   6060               STR      R0,[R4, #+4]
     82              delay_us(800);
   \   00000008   ........           BL       ??Subroutine6_0
     83           
     84              SCCB_SIC_H();	
   \                     ??CrossCallReturnLabel_16:
   \   0000000C   8020               MOVS     R0,#+128
   \   0000000E   ........           BL       ??Subroutine2_0
     85              delay_us(800);
     86            
     87          
     88              SCCB_SID_H();	
   \                     ??CrossCallReturnLabel_19:
   \   00000012   4020               MOVS     R0,#+64
   \   00000014   2060               STR      R0,[R4, #+0]
     89              delay_us(800);
   \   00000016   ....               B.N      ??Subroutine1_0
     90             
     91          }
     92          
     93          /*
     94          -----------------------------------------------
     95             功能: noAck,用于连续读取中的最后一个结束周期
     96             参数: 无
     97           返回值: 无
     98          -----------------------------------------------
     99          */

   \                                 In section .text, align 2, keep-with-next
    100          void noAck(void)
    101          {
   \                     noAck:
   \   00000000   10B5               PUSH     {R4,LR}
    102          	
    103          	SCCB_SID_H();	
   \   00000002   ........           BL       ?Subroutine2
    104          	delay_us(800);
    105          	
    106          	SCCB_SIC_H();	
   \                     ??CrossCallReturnLabel_21:
   \   00000006   8020               MOVS     R0,#+128
   \   00000008   ........           BL       ??Subroutine2_0
    107          	delay_us(800);
    108          	
    109          	SCCB_SIC_L();	
   \                     ??CrossCallReturnLabel_18:
   \   0000000C   8020               MOVS     R0,#+128
   \   0000000E   6060               STR      R0,[R4, #+4]
    110          	delay_us(800);
   \   00000010   ........           BL       ??Subroutine6_0
    111          	
    112          	SCCB_SID_L();	
   \                     ??CrossCallReturnLabel_15:
   \   00000014   4020               MOVS     R0,#+64
   \   00000016                      REQUIRE ?Subroutine1
   \   00000016                      ;; // Fall through to label ?Subroutine1
    113          	delay_us(800);
    114          
    115          }
    116          
    117          /*
    118          -----------------------------------------------
    119             功能: 写入一个字节的数据到SCCB
    120             参数: 写入数据
    121           返回值: 发送成功返回1，发送失败返回0
    122          -----------------------------------------------
    123          */

   \                                 In section .text, align 2, keep-with-next
    124          unsigned char SCCBwriteByte(unsigned char m_data)
    125          {
   \                     SCCBwriteByte:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0546               MOV      R5,R0
    126          	unsigned char j,tem;
    127          
    128          	for(j=0;j<8;j++) //循环8次发送数据
   \   00000004   0026               MOVS     R6,#+0
   \   00000006   ....               LDR.N    R4,??DataTable3  ;; 0x40011008
    129          	{
    130          		if((m_data<<j)&0x80)
   \                     ??SCCBwriteByte_0:
   \   00000008   05FA06F0           LSL      R0,R5,R6
   \   0000000C   0006               LSLS     R0,R0,#+24
   \   0000000E   47BF               ITTEE    MI 
   \   00000010   4020               MOVMI    R0,#+64
   \   00000012   A060               STRMI    R0,[R4, #+8]
   \   00000014   4020               MOVPL    R0,#+64
   \   00000016   E060               STRPL    R0,[R4, #+12]
    131          		{
    132          			SCCB_SID_H();	
    133          		}
    134          		else
    135          		{
    136          			SCCB_SID_L();	
    137          		}
    138          		delay_us(800);
   \   00000018   ........           BL       ??Subroutine6_0
    139          		SCCB_SIC_H();	
   \                     ??CrossCallReturnLabel_14:
   \   0000001C   8020               MOVS     R0,#+128
   \   0000001E   A060               STR      R0,[R4, #+8]
    140          		delay_us(800);
   \   00000020   ........           BL       ??Subroutine6_0
    141          		SCCB_SIC_L();	
   \                     ??CrossCallReturnLabel_13:
   \   00000024   8020               MOVS     R0,#+128
   \   00000026   E060               STR      R0,[R4, #+12]
    142          		delay_us(800);
   \   00000028   ........           BL       ??Subroutine6_0
    143          
    144          	}
   \                     ??CrossCallReturnLabel_12:
   \   0000002C   761C               ADDS     R6,R6,#+1
   \   0000002E   082E               CMP      R6,#+8
   \   00000030   EADB               BLT.N    ??SCCBwriteByte_0
    145          	delay_us(100);
   \   00000032   6420               MOVS     R0,#+100
   \   00000034   ........           BL       delay_us
    146          	SCCB_SID_IN;/*设置SDA为输入*/
   \   00000038   ........           BL       SCCB_SID_GPIO_INPUT
    147          	delay_us(500);
   \   0000003C   ........           BL       ?Subroutine3
    148          	SCCB_SIC_H();	
   \                     ??CrossCallReturnLabel_3:
   \   00000040   8020               MOVS     R0,#+128
   \   00000042   A060               STR      R0,[R4, #+8]
    149          	delay_us(500);
   \   00000044   ........           BL       ?Subroutine3
    150          	if(SCCB_SID_STATE){tem=0;}   //SDA=1发送失败，返回0}
   \                     ??CrossCallReturnLabel_2:
   \   00000048   2568               LDR      R5,[R4, #+0]
    151          	else {tem=1;}   //SDA=0发送成功，返回1
    152          	SCCB_SIC_L();	
   \   0000004A   8020               MOVS     R0,#+128
   \   0000004C   E060               STR      R0,[R4, #+12]
    153          	delay_us(800);	
   \   0000004E   ........           BL       ??Subroutine6_0
    154                  SCCB_SID_OUT;/*设置SDA为输出*/
   \                     ??CrossCallReturnLabel_11:
   \   00000052   ........           BL       SCCB_SID_GPIO_OUTPUT
    155                  delay_us(800);
   \   00000056   ........           BL       ??Subroutine6_0
    156          	return (tem);  
   \                     ??CrossCallReturnLabel_10:
   \   0000005A   2D06               LSLS     R5,R5,#+24
   \   0000005C   A80F               LSRS     R0,R5,#+30
   \   0000005E   00F00100           AND      R0,R0,#0x1
   \   00000062   80F00100           EOR      R0,R0,#0x1
   \   00000066   70BD               POP      {R4-R6,PC}       ;; return
    157          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   4FF4FA70           MOV      R0,#+500
   \   00000004   ........           B.W      delay_us
    158          
    159          /*
    160          -----------------------------------------------
    161             功能: 一个字节数据读取并且返回
    162             参数: 无
    163           返回值: 读取到的数据
    164          -----------------------------------------------
    165          */

   \                                 In section .text, align 2, keep-with-next
    166          unsigned char SCCBreadByte(void)
    167          {
   \                     SCCBreadByte:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    168          	unsigned char read,j;
    169          	read=0x00;
   \   00000002   0024               MOVS     R4,#+0
    170          	
    171          	SCCB_SID_IN;/*设置SDA为输入*/
   \   00000004   ........           BL       SCCB_SID_GPIO_INPUT
    172          	delay_us(800);
   \   00000008   ........           BL       ??Subroutine6_0
    173          	for(j=8;j>0;j--) //循环8次接收数据
   \                     ??CrossCallReturnLabel_9:
   \   0000000C   0825               MOVS     R5,#+8
   \   0000000E   ....               LDR.N    R6,??DataTable3  ;; 0x40011008
    174          	{		     
    175          		delay_us(800);
   \                     ??SCCBreadByte_0:
   \   00000010   ........           BL       ??Subroutine6_0
    176          		SCCB_SIC_H();
   \                     ??CrossCallReturnLabel_8:
   \   00000014   8020               MOVS     R0,#+128
   \   00000016   B060               STR      R0,[R6, #+8]
    177          		delay_us(500);
   \   00000018   ........           BL       ?Subroutine3
    178          		read=read<<1;
   \                     ??CrossCallReturnLabel_1:
   \   0000001C   6406               LSLS     R4,R4,#+25
   \   0000001E   240E               LSRS     R4,R4,#+24
    179          		if(SCCB_SID_STATE) 
   \   00000020   3068               LDR      R0,[R6, #+0]
   \   00000022   4006               LSLS     R0,R0,#+25
   \   00000024   01D5               BPL.N    ??SCCBreadByte_1
    180          		{
    181          			read=read+1;
   \   00000026   641C               ADDS     R4,R4,#+1
   \   00000028   E4B2               UXTB     R4,R4
    182          		}
    183          		SCCB_SIC_L();
   \                     ??SCCBreadByte_1:
   \   0000002A   8020               MOVS     R0,#+128
   \   0000002C   F060               STR      R0,[R6, #+12]
    184          		delay_us(800);
   \   0000002E   ........           BL       ??Subroutine6_0
    185          	}	
   \                     ??CrossCallReturnLabel_7:
   \   00000032   FF35               ADDS     R5,R5,#+255
   \   00000034   EDB2               UXTB     R5,R5
   \   00000036   012D               CMP      R5,#+1
   \   00000038   EADA               BGE.N    ??SCCBreadByte_0
    186                  SCCB_SID_OUT;/*设置SDA为输出*/
   \   0000003A   ........           BL       SCCB_SID_GPIO_OUTPUT
    187                  delay_us(500);
   \   0000003E   ........           BL       ?Subroutine3
    188          	return(read);
   \                     ??CrossCallReturnLabel_0:
   \   00000042   2046               MOV      R0,R4
   \   00000044   70BD               POP      {R4-R6,PC}       ;; return
    189          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   10100140           DC32     0x40011010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   08100140           DC32     0x40011008

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     SCCB_GPIO_Config          8
     SCCB_SID_GPIO_INPUT       8
     SCCB_SID_GPIO_OUTPUT      8
     SCCBreadByte             16
     SCCBwriteByte            16
     noAck                     8
     startSCCB                 8
     stopSCCB                  8


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     SCCB_GPIO_Config       10
     ?Subroutine0           16
     ??Subroutine5_0        16
     ?Subroutine4            8
     SCCB_SID_GPIO_OUTPUT    8
     SCCB_SID_GPIO_INPUT    20
     startSCCB              24
     ?Subroutine1           14
     ?Subroutine2            6
     ??Subroutine6_0         8
     stopSCCB               24
     noAck                  22
     SCCBwriteByte         104
     ?Subroutine3            8
     SCCBreadByte           70
     ??DataTable1            4
     ??DataTable3            4

 
 366 bytes in section .text
 
 366 bytes of CODE memory

Errors: none
Warnings: none
